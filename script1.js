var A = "// @ts-nocheck

var default_avatar = "https://cdn.jsdelivr.net/gh/ColaCaprichosa/FPWLR/logardo.png";
var allow_au = true;
var has_alias = false;

function c_theme() {
	const container = document.body;
	const theme_select = document.getElementById('theme_select');
	const selected = theme_select.value;
	container.setAttribute('data-theme', selected);

	s_int2('theme_select');
}

function g_tm_i() { return Math.round(+new Date() / 1000); }

const tooltip = document.createElement("div");
tooltip.classList.add("tooltip");
tooltip.id = "wmtooltip";
document.body.appendChild(tooltip);

document.addEventListener("mouseover", function (event) {
	const element = event.target;
	const tooltipMessage = element.getAttribute("data-ttip");
	if (tooltipMessage) {
		tooltip.innerText = tooltipMessage;
		tooltip.style.top = element.offsetTop - tooltip.offsetHeight - 8 + "px";
		tooltip.style.left = element.offsetLeft + (element.offsetWidth - tooltip.offsetWidth) / 2 + "px";
		tooltip.classList.add("tooltip--visible");
	}
});

document.addEventListener("mouseout", function (event) {
	const element = event.target;
	const tooltipMessage = element.getAttribute("data-ttip");
	if (tooltipMessage) {
		tooltip.innerText = ("-").trim();
		tooltip.classList.remove("tooltip--visible");
	}
});

/*already dispatched ids*/
var u_al_bool = [];
var u_al_float = [];
var u_al_int = [];

var u_bool = [];
var u_float = [];
var u_int = [];
var u_int2 = ["theme_select"];

path = "panel_chat";

c_text(path, "chatboxtxt", "chat", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
});

c_div(path, "chat-container", {
	width: "230px",
	height: "315px",
	maxHeight: "315px",
	overflowY: "auto",
	padding: "10px",
	backgroundColor: 'var(--c-secondary)',
});

c_br();

function send_chat() {
	if (!has_alias) {
		notify("disabled to default users", 7000);
		return;
	}

	if (document.getElementById("chat_text").validity.valid) {
		const chat_text = document.getElementById("chat_text").value;
		s_btn("send_chat", chat_text)
			.then(async function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);

				if (!responseText.includes("done"))
					return;

				await sleep(350);
				u_chat();
				document.getElementById("chat_text").value = "";
			})
			.catch(function (error) {
				console.error(error);
				document.getElementById("chat_text").value = "";
			});
	}
	else {
		notify("No se aceptan caracteres especiales, de 1 a 64 caracteres solamente.", 5000, "RED");
	}
}

c_textbox(path, "chat_text", false, "", "", {}, {
	pattern: "^[a-zA-Z0-9 ]*$",
	minLength: 1,
	maxLength: 64,
	required: true,
	placeholder: "write",
	eventListener: {
		keydown: function (el, ev) {
			if (ev.key === 'Enter') {
				send_chat();
			}
		}
	}
}, true);

c_btn(path, "btn_send_chat", "send", function () {
	send_chat();
}, "Envia un mensaje al chat, una vez cada 30 segundos.");

c_hr(path, false, { width: "200px" });

c_text(path, "usersonline", "disabled onlines", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '10px',
	marginBottom: '10px',
	marginTop: "0px",
});

function g_onlines() {
	if (!has_alias) return;

	if (document.getElementById("left_panel").style.display == "none")
		return;

	gather("onlines", "zz")
		.then(function (result) {
			try {
				const lives = JSON.parse(result);
				const onlinesel = document.getElementById('usersonline');
				onlinesel.innerHTML = "<p data-ttip='total: " + lives.all_onlines + "' style='font-weight:bold;font-size:14px;margin-bottom:0px;margin-top:0px;'>onlines (" + lives.live.length + ")</p><br>" + lives.live.join(", ");
			} catch (error) {
				console.log(error, result);
			}
		})
		.catch(function (error) {
			console.error(error);
		});
}

g_onlines();

c_hr(path, false, { width: "200px" });

c_btn(path, "opendlgfinduser", "search user", function () {
	var dialog = document.getElementById("finduserdlg");
	dialog.showModal();
}, "Busca un usuario.", { justifySelf: "center" });

c_br();

c_dialog(path, "finduserdlg");
path = "finduserdlg";

c_text(path, "userfindtxt", "search user", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
	color: "white"
});

c_br(path);

c_textbox(path, "find_user", false, "", "", {}, {
	pattern: "^[a-zA-Z0-9]*$",
	minLength: 3,
	maxLength: 20,
	required: true,
	placeholder: "alias",
	eventListener: {
		keydown: function (el, ev) {
			if (ev.key === 'Enter') {
				document.getElementById("btn_find_user").click();
			}
		}
	}
}, true);

const roleclr = { "normal": "#606060", "premium": "#8bb0ff", "chad": "#ffe58b", "GOD": "#f14c39", "PAPI": "#ce98e2" };
var fu_cooldown = 0;

c_btn(path, "btn_find_user", "find", function () {
	if (document.getElementById("find_user").validity.valid)
		if (fu_cooldown > g_tm_i()) {
			notify("recently used, wait " + (fu_cooldown - g_tm_i()) + " seconds", 7000);
			return;
		}
	gather("info_alias", document.getElementById("find_user").value)
		.then(function (result) {
			try {
				var u_inf = JSON.parse(result);

				if (u_inf["avatar"]) {
					document.getElementById("user_avtr").src = window.atob(u_inf["avatar"]);
				}

				var user_data = "";
				user_data += "<p style='margin-top:0px;margin-bottom:0px;'><strong>@" + u_inf["alias"];

				if (u_inf["role"])
					user_data += "<span style='display:inline;font-size:10px;color:" + roleclr[u_inf["role"].toLowerCase()] + ";'> (" + u_inf["role"] + ")</span><br></strong></p>";

				if (u_inf["user_id"])
					user_data += "<p style='font-size:10px;margin-top:0px;'>uid: " + u_inf["user_id"];
				else
					user_data += "<p style='font-size:10px;margin-top:0px;'>beta";

				if (u_inf["register_time"])
					user_data += " - joined: " + g_tm_dt(u_inf["register_time"], 0) + "</p>";
				else
					user_data += "</p>";

				if (u_inf["description"])
					user_data += "<p style='font-size:12px;margin-top: 0px;'>info: " + window.atob(u_inf["description"]) + "</p>";
				else
					user_data += "<p style='font-size:12px;margin-top: 0px;'>no info</p>"

				document.getElementById("user_inf").innerHTML = user_data;
			} catch (error) {
				notify(result.replace(/_/g, " "), 7000);
				if (result.includes("recently")) {
					if (fu_cooldown < g_tm_i())
						fu_cooldown = g_tm_i() + 30;
				}
			}
		})
		.catch(function (error) {
			console.error(error);
		});
}, "", { marginLeft: "10px" });

c_btn(path, "closefinduser", "close", function () {
	var dialog = document.getElementById("finduserdlg");
	dialog.close();
}, "", { marginLeft: "10px" });

c_hr(path, false, { width: "200px" });

c_div(path, "user_infalias", {
	display: "inline-grid",
	gridTemplateColumns: "repeat(3, 105px)",
	gridGap: "10px"
});

c_br(path, 2);

c_img("user_infalias", "user_avtr", default_avatar, 90, 90,
	{
		marginLeft: "10px",
		objectFit: "cover",
		borderRadius: "5px",
		placeSelf: "normal"
	});

c_br(path, 2);

c_text("user_infalias", "user_inf", "none", {
	display: "grid", gridTemplateColumns: "160px", marginTop: "0px",
	color: "white"
});

var last_msg = 0;
var first_snd = 0;

function p_sound(id) {
	if (first_snd == 0) {
		first_snd++;
	}
	else {
		var element = document.getElementById(id);
		element.volume = 0.1;
		element.play();
	}
}

function u_chat() {
	if (!has_alias) {
		const chatContainer = document.getElementById('chat-container');
		chatContainer.innerHTML = '';
		const chatElement = document.createElement('div');
		chatElement.style.fontSize = "12px";
		chatElement.innerHTML = `(<span data-ttip='${g_tm_dt(parseInt(new Date().getTime() / 1000), 0)}' style="opacity: 0.5;">${g_tm_dt(parseInt(new Date().getTime() / 1000))}</span>) <span style='${("color:" + (Object.entries(roleclr)[4]["1"]) + ";")}'><strong>ZINC</strong></span>: chat disabled to default aliases, change your alias in the right panel`;
		chatContainer.appendChild(chatElement);
		return;
	}

	if (document.getElementById("left_panel").style.display == "none")
		return;

	gather("get_chat", "z")
		.then(function (result) {
			const chats = JSON.parse(result);
			const chatContainer = document.getElementById('chat-container');
			chatContainer.innerHTML = '';

			let highest_ts = 0;
			chats.forEach(async (chat) => {

				if (!chat.msg.includes("disabled"))
					if (highest_ts < chat.ts)
						highest_ts = chat.ts;

				const chatElement = document.createElement('div');
				chatElement.style.fontSize = "12px";

				if (!chat.msg.includes("disabled"))
					chatElement.innerHTML = `(<span data-ttip='${g_tm_dt(chat.ts, 0)}' style="opacity: 0.5;">${g_tm_dt(chat.ts)}</span>) <span style='${chat.r != undefined ? ("color:" + (Object.entries(roleclr)[chat.r]["1"]) + ";") : ""}'><strong>${chat.u}</strong></span>: ${window.atob(chat.msg)}`;
				else
					chatElement.innerHTML = `(<span data-ttip='${g_tm_dt(chat.ts, 0)}' style="opacity: 0.5;">${g_tm_dt(chat.ts)}</span>) <span style='${chat.r != undefined ? ("color:" + (Object.entries(roleclr)[chat.r]["1"]) + ";") : ""}'><strong>${chat.u}</strong></span>: ${chat.msg}`;

				chatContainer.appendChild(chatElement);

				c_hr("chat-container", false, {
					opacity: "0.2",
					paddingTop: "0px",
					paddingBottom: "0px",
				});
			});

			if (last_msg != highest_ts) {
				p_sound("snd1");
				last_msg = highest_ts;
			}
		})
		.catch(function (error) {
			console.error(error);
		});
}

u_chat();

var path = "main_elements";

document.getElementById("title_id").innerText = "ZINC";

c_tab_button("element_right_buttons", [
	{ id: "p_updates", text: "logs" },
	{ id: "p_tickets", text: "tickets" },
	{ id: "p_profile", text: "profile" }
], 2);

/*START FEATURES*/
document.getElementById("product_id").innerText = "colorbot";

c_tab_button("element_buttons", [
	{ id: "main_tab", text: "main" },
	{ id: "qrcode_tab", text: "QR" },
	{ id: "settings_tab", text: "cfg" },
]);

c_combobox(path, "all_profiles", "", 0, 20, true, "", async function (el) {
	await sleep(500);
	r_info();
	await sleep(500);
	u_sliders();
}, { minWidth: "180px", marginRight: "-180px", position: 'relative', top: '-68px', left: '102px' });

c_checkbox(path, "colorbot", "enabled", "Activa el funcionamiento del colorbot.");
c_checkbox(path, "dinamic_smooth", "dinamic smooth", "Al activarlo, bloquea el smooth principal.");
//c_checkbox(path, "mask_format", "mask format", "Al estar activado, utiliza el mask thread (dejando inhabilitado el simple format)");
//c_checkbox(path, "simple_format", "simple format", "Al estar activado, utiliza un thread limpio sin opciones de debug, etc.");

c_combobox(path, "main_key", "main key", -100000, 100000, false, "La Key principal con la cual se activa el aim.");
c_combobox(path, "secondary_key", "secondary key", -100000, 100000, false, "La Key secundaria con la cual se activa el aim.");
c_combobox(path, "disable_secondary_key", "disable key", -100000, 100000, false, "La Key con la cual se desactiva el aim.");

c_combobox(path, "type_format", "format", 0, 3, false, "Distintos metodos para escanear/procesar los colores.");
c_combobox(path, "dinamic_smooth_type", "dinamic smooth type", -100000, 100000, false, "Acomoda el smooth dinamicamente dependiendo la distancia del enemigo");
c_combobox(path, "color_type", "colors", 0, 4, false, "El color seleccionado es en el cual se basara el aimbot");
c_combobox(path, "sort_method", "methods", 0, 8, false, "Distintos metodos para que el aimbot apunte, se recomienda el BEST.");

c_s_int(path, 'target_offset_x', "offset X", 0, 50, 1, 0);
c_s_int(path, "target_offset_y", "offset Y", 0, 50, 1, 5);

c_hr(path, false, { width: "200px" });

c_s_float(path, "speed", "smooth", 0.0, 6.0, 0.1, 2.0);
c_s_int(path, "fov_x", "Fov X", 5, 500, 5, 50);
c_s_int(path, "fov_y", "Fov Y", 5, 250, 5, 50);

c_hr(path, false, { width: "200px" });

c_checkbox(path, "recoil", "recoil", "Bajara el crosshair a la hora de disparar con la MAIN key.");
c_checkbox(path, "rcs_crouch_only", "crouch only", "Solo funcionara si estamos apretando CTRL");
c_s_int(path, "recoil_delay", "delay", 5, 500, 5, 200);
c_s_int(path, "recoil_strenght", "strenght", 1, 50, 1, 2);
c_s_int(path, "max_recoil_offset", "max offset", 1, 50, 1, 2);

c_hr(path, false, { width: "200px" });

c_checkbox(path, "triggerbot", "triggerbot", "Disparara automaticamente cuando el COLOR pase por el crosshair.");
c_checkbox(path, "disable_aim_on_trigger", "disable aim", "Deshabilita el aim cuando esta presionado el trigger");
c_combobox(path, "trigger_type", "type", -100000, 100000, false);
c_combobox(path, "trigger_key", "trigger key", -100000, 100000, false, "La Key con la cual se activa el TRIGGER.");
c_s_int(path, "trigger_radius", "fov", 1, 50, 1, 15);
c_s_int(path, "trigger_delay", "delay", 5, 550, 5, 250);

c_hr(path, false, { width: "200px" });

c_checkbox(path, "bhop_toggle", "bhop", "Al activarlo, debes bindear la key XButton2 o Mouse5 al bhop en vez del espacio.");
c_s_int(path, "bhop_delay", "bhop delay", 5, 200, 5, 200);

c_hr(path, false, { width: "200px" });

c_s_int(path, "custom_sleep", "sleep", 1, 200, 1, 200);

c_s_int(path, "acceptable_area", "acceptable area", 5, 200, 5, 200);

/*deprecated
path = "setting_elements";
c_checkbox(path, "debug_window", "debug window");
c_checkbox(path, "circles", "debug circles");
c_checkbox(path, "center_colors", "debug colors");
c_checkbox(path, "mask_window", "debug mask");*/

f_combo("trigger_type", "trigger_type");
f_combo("dinamic_smooth_type", "dinamic_smooth_type");
f_combo("color_type", "colors");
f_combo("sort_method", "methods");
f_combo("type_format", "formats");

const bind_elements = [
	{ id: "main_key", target: "main_key" },
	{ id: "secondary_key", target: "secondary_key" },
	{ id: "trigger_key", target: "trigger_key" },
	{ id: "disable_secondary_key", target: "disable_secondary_key" },
];

/*END FEATURES*/

f_combo("all_profiles", "all_profiles");
f_combo("all_profiles2", "all_profiles");

path = "elements_cfgb";

c_checkbox(path, "auto_update_menu", "Auto-update menu", "Se actualizara la pagina automaticamente cada 5 segundos en caso de que haya cambios desde otra pagina.", function (el) {
	allow_au = el.checked;
});

c_hr();
c_text(path, "rnd", "&#9679; cloud profiles", { fontSize: "18px", fontWeight: "bold", marginLeft: "20px" });

var show_pr_c = false;
c_btn(path, "btn_sv_profile", "create profile", function (c_el) {
	if (!show_pr_c) {
		document.getElementById("cprofilename").style.display = "block";
		document.getElementById("u_profile_list").style.display = "none";
		show_pr_c = true;
		return;
	}

	if (document.getElementById("cprofilename").validity.valid) {
		var ticket_info = document.getElementById("cprofilename").value;
		var ticket_reason = document.getElementById("cprofilename").value;

		s_btn("save_profile", ticket_reason + "-" + ticket_info)
			.then(function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);
			})
			.catch(function (error) {
				console.error(error);
			});
	}
	else {
		notify("No se aceptan caracteres especiales, de 1 a 20 caracteres solamente.", 5000, "RED");
	}
}, "Guarda tu perfil actual en el servidor, el cual puedes cargar", { marginRight: "5px" });

c_btn(path, "btn_profile_list", "profile list", function () {
	if (show_pr_c) {
		document.getElementById("cprofilename").style.display = "none";
		document.getElementById("u_profile_list").style.display = "block";
		show_pr_c = false;
	}

	s_btn("profile_list")
		.then(function (responseText) {
			try {
				console.log(responseText);
				var resjson = JSON.parse(responseText);

				if (resjson.length == 0) {
					document.getElementById("u_profile_list").innerHTML = "no profiles";
					notify("user has no profiles", 7000);
					return;
				}

				var to_tickets = "";
				for (const key in resjson) {
					if (Object.hasOwnProperty.call(resjson, key)) {
						const element = resjson[key];
						to_tickets += "</tr>";
						to_tickets += "<td>" + key + "</td>";
						to_tickets += "<td>" + g_tm_dt(element["timestamp"], 2) + "</td>";
						to_tickets += "<td>" + "<button class='newbutton' style='height:30px;width:auto;display:inline-block;' onclick=\"s_btn('get_profile', '" + key + "').then(function (responseText) { notify(responseText.replace(/_/g, ' '), 7000);r_info();f_combo('all_profiles', 'all_profiles');f_combo('all_profiles2', 'all_profiles');}).catch(function (error) {console.error(error);});\">select</button>" + "</td>";
						to_tickets += "</tr>";
					}
				}

				document.getElementById("u_profile_list").innerHTML = `<br>
				<tr>
				<th>name</th>
				<th>last saved</th>
				<th>options</th>
				</tr>
				`;
				document.getElementById("u_profile_list").innerHTML += to_tickets;
			} catch (error) {
				console.log(error);
				if (responseText.includes("_")) {
					notify(responseText.replace(/_/g, " "), 7000);
					return;
				}
			}
		})
		.catch(function (error) {
			console.error(error);
		});
}, "Muestra tus perfiles creados");

c_textbox(path, "cprofilename", true, "", "profile name", {
	resize: 'none',
	overflow: 'hidden',
	whiteSpace: 'pre-wrap',
	marginTop: "5px",
}, {
	pattern: "^[a-zA-Z0-9]*$",
	minLength: 1,
	maxLength: 20,
	placeholder: "name",
	required: true,
});

c_table(path, "u_profile_list");

c_hr();

c_text(path, "rnd", "&#9679; local profiles", { fontSize: "18px", fontWeight: "bold", marginLeft: "20px" });

c_combobox(path, "all_profiles2", "profile", 0, 20, false, "Perfiles para cada situacion.", async function (el) {
	await sleep(500);
	r_info();
	await sleep(500);
	u_sliders();
}, { minWidth: "180px" });

c_textbox(path, "profile_name_c", false, "", "4-16 characters.", { marginLeft: "5px", width: "150px" }, {
	pattern: "^[a-zA-Z0-9]*$",
	minLength: 4,
	maxLength: 9,
	required: false,
}, true);

c_btn(path, "btn_profile_change", "change name", function () {
	if (document.getElementById("profile_name_c").validity.valid) {
		var prof_value = document.getElementById("profile_name_c").value;
		s_info("profile_name", prof_value);
		document.getElementById("profile_name_c").value = "";
		r_info();
		f_combo("all_profiles", "all_profiles");
		f_combo("all_profiles2", "all_profiles");
	}
	else {
		notify("No se aceptan espacios o caracteres especiales.", 5000, "RED");
	}
}, "Cambia el nombre del profile", { marginRight: "10px" });

c_btn(path, "btn_profile_export", "export profile", function () {
	s_btn("export_profile");
}, "Exporta el perfil actual al CLIPBOARD.", { marginRight: "10px" });

c_btn(path, "btn_profile_import", "import profile", function () {
	s_btn("import_profile");
	r_info();
	f_combo("all_profiles", "all_profiles");
	f_combo("all_profiles2", "all_profiles");
}, "Importa un perfil desde el CLIPBOARD.", { marginRight: "10px" });

c_btn(path, "btn_profile_import", "set default", function () {
	document.getElementById('cfr_setdefault').showModal()
}, "Devuelve el perfil a valores default, tambien el nombre.");

c_dialog(path, 'cfr_setdefault');
c_text('cfr_setdefault', "cfrdlgdefaultpr", "You are about to set the current<br>profile as default", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
	color: "white"
});
c_btn('cfr_setdefault', "rnd", "CONFIRM", function () {
	s_btn('default_profile');
	r_info();
	f_combo("all_profiles", "all_profiles");
	f_combo("all_profiles2", "all_profiles");
	document.getElementById("cfr_setdefault").close();
}, "", { width: "100%", fontWeight: "bold" });

c_btn('cfr_setdefault', "rnd", "cancel", function () {
	document.getElementById("cfr_setdefault").close();
}, "", { width: "100%" });


c_hr();

c_text(path, "rnd", "&#9679; local config", { fontSize: "18px", fontWeight: "bold", marginLeft: "20px" });

c_dialog('element_config', 'confirm_loadcfg');
c_text('confirm_loadcfg', "confirmdlgloadcfg", "You are about to load your local CFG", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
	color: "white"
});
c_btn('confirm_loadcfg', "confirmloadcfg", "CONFIRM", async function () {
	s_btn('load_c');
	document.getElementById("confirm_loadcfg").close();
	await sleep(500);
	r_info();
	f_combo('all_profiles', 'all_profiles');
	f_combo('all_profiles2', 'all_profiles');
}, "", { width: "100%", fontWeight: "bold" });

c_btn('confirm_loadcfg', "cancel_loadcfg", "cancel", function () {
	document.getElementById("confirm_loadcfg").close();
}, "", { width: "100%" });

c_dialog('element_config', 'confirm_savecfg');

c_text('confirm_savecfg', "confirmdlgsavecfg", "You are about to save your local CFG", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
	color: "white"
});

c_btn('confirm_savecfg', "confirmsavecfg", "CONFIRM", function () {
	s_btn('save_c');
	document.getElementById("confirm_savecfg").close();
}, "", { width: "100%", fontWeight: "bold" });

c_btn('confirm_savecfg', "cancel_savecfg", "cancel", function () {
	document.getElementById("confirm_savecfg").close();
}, "", { width: "100%" });


c_dialog('element_config', 'confirm_importcfg');
c_text('confirm_importcfg', "confirmdlgimpcfg", "You are about to IMPORT another CFG", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px", color: "white"
});
c_btn('confirm_importcfg', "confirmimportcfg", "CONFIRM", function () {
	s_btn('import_c')
	document.getElementById("confirm_importcfg").close();
}, "", { width: "100%", fontWeight: "bold" });

c_btn('confirm_importcfg', "cancel_importcfg", "cancel", function () {
	document.getElementById("confirm_importcfg").close();
}, "", { width: "100%" });

c_dialog('element_config', 'confirm_exportcfg');
c_text('confirm_exportcfg', "confirmdlgexpcfg", "You are about to EXPORT the entire local CFG,<br> which include all your profiles", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px", color: "white"
});
c_btn('confirm_exportcfg', "confirmexportcfg", "CONFIRM", function () {
	s_btn('export_c')
	document.getElementById("confirm_exportcfg").close();
}, "", { width: "100%", fontWeight: "bold" });

c_btn('confirm_exportcfg', "cancel_exportcfg", "cancel", function () {
	document.getElementById("confirm_exportcfg").close();
}, "", { width: "100%" });

c_dialog('element_config', 'confirm_exit');
c_text('confirm_exit', "confirmdlgexit", "You are about to exit", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px", color: "white"
});
c_btn('confirm_exit', "confirmexit", "CONFIRM", function () {
	c_exit();
	document.getElementById("confirm_exit").close();
}, "", { width: "100%", fontWeight: "bold" });

c_btn('confirm_exit', "cancel_exit", "cancel", function () {
	document.getElementById("confirm_exit").close();
}, "", { width: "100%" });

path = "panel_tickets";

c_text(path, "ticketcenter", "Ticket Center", {
	textAlign: 'center',
	textDecoration: 'underline',
	fontSize: '18px',
	marginBottom: '10px',
	marginTop: "0px",
});

var ticket_faq_st = {
	textAlign: 'center',
	fontSize: '14px',
	marginBottom: '10px',
}

c_text(path, "tcktfaq", "- Do not spam the ticket system.<br>- Only create tickets if you have an issue.<br>- Only create tickets if you have a feature request.<br>", ticket_faq_st);
c_text(path, "tcktfaq", "- Only create tickets if you need <u>help</u>.<br>- All tickets are <u>private</u>.<br>- Do not post irrelevant comments in tickets or you may be <u>banned</u>.", ticket_faq_st);

c_combobox2(path, "ticket_behavior", ["Bug", "Feature", "Other"], true, "Selecciona una razon del ticket.");

c_textarea(path, "ticket_content", true, "", {
	height: '100px',
	resize: 'none',
	overflow: 'hidden',
	whiteSpace: 'pre-wrap',
	marginTop: "5px",
}, {
	pattern: "^[a-zA-Z0-9 ]*${5}",
	minLength: 5,
	maxLength: 256,
	placeholder: "info",
	required: true,
});

var show_ticket_c = false;
c_btn(path, "btn_create_ticket", "create ticket", function () {
	if (!show_ticket_c) {
		document.getElementById("ticket_content").style.display = "inline-block";
		document.getElementById("ticket_behavior").style.display = "inline-block";
		show_ticket_c = true;
		return;
	}

	if (document.getElementById("ticket_content").validity.valid) {
		var ticket_info = document.getElementById("ticket_content").value;
		var ticket_reason = document.getElementById("ticket_behavior").value;

		s_btn("create_ticket", ticket_reason + "-" + ticket_info)
			.then(function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);
			})
			.catch(function (error) {
				console.error(error);
			});
	}
	else {
		notify("No se aceptan caracteres especiales, de 5 a 256 caracteres solamente.", 5000, "RED");
	}
}, "Crea un ticket el cual sera atendido/visto por los administradores.");

c_hr(path, false, { width: "200px" });
c_btn(path, "btn_get_tickets", "view tickets", function () {
	if (show_ticket_c) {
		document.getElementById("ticket_content").style.display = "none";
		document.getElementById("ticket_behavior").style.display = "none";
		show_ticket_c = false;
	}

	s_btn("get_tickets")
		.then(function (responseText) {
			if (responseText.split("_").length - 1 > 2) {
				notify(responseText.replace(/_/g, " "), 7000);
				return;
			}

			var resjson = JSON.parse(responseText);

			if (resjson.length == 0) {
				document.getElementById("user_tickets").innerHTML = "no tickets";
				notify("user has no tickets", 7000);
				return;
			}

			document.getElementById("user_tickets").innerHTML = "no tickets";

			var to_tickets = "";
			for (const key in resjson) {
				if (Object.hasOwnProperty.call(resjson, key)) {
					const element = resjson[key];
					to_tickets += "<strong><u>" + element["reason"] + " [" + element["id"] + "]</u> | <button class='newbutton' data-ttip='Delete ticket' style='height:30px;width:auto;display:inline-block;color:red;' onclick=\"s_btn('delete_ticket', '" + element["id"] + "').then(function (responseText) { notify(responseText.replace(/_/g, ' '), 7000);}).catch(function (error) {console.error(error);});\">&times;</button></strong><br>";
					to_tickets += "<p>" + element["content"] + "</p>";
					to_tickets += "<br><br>";
				}
			}

			document.getElementById("user_tickets").innerHTML = to_tickets;
		})
		.catch(function (error) {
			console.error(error);
		});
}, "Muestra tus tickets creados");

c_text(path, "user_tickets", "", { textAlign: "center" });

c_br(path);

path = "panel_profiles";

c_text(path, "main_pf_text", "Profile", {
	textAlign: 'center',
	fontWeight: 'bold',
	textDecoration: 'underline',
	fontSize: '20px',
	marginBottom: '10px',
	marginTop: '0px'
});

c_div(path, "userinfo", {
	display: "inline-grid",
	gridTemplateColumns: "repeat(3, 1fr)",
	gridGap: "10px"
});

path = "userinfo";
c_img(path, "user_avatar", default_avatar, 90, 90,
	{
		justifySelf: "start",
		marginLeft: "10px",
		objectFit: "cover",
		borderRadius: "5px"
	});

c_text(path, "user_info", "none", { display: "grid", gridTemplateColumns: "160px", marginTop: "0px" });

function own_info() {
	gather("get_user_info", "z")
		.then(function (result) {
			let u_inf = JSON.parse(result);

			if (u_inf["avatar"]) {
				document.getElementById("user_avatar").src = window.atob(u_inf["avatar"]);
				document.getElementById("avtr_preview").src = window.atob(u_inf["avatar"]);
			}

			var user_data = "";
			user_data += "<p style='margin-top:0px;margin-bottom:0px;'><strong>@" + u_inf["alias"];

			if (!u_inf["alias"].includes("ZUser"))
				has_alias = true;

			if (u_inf["role"])
				user_data += "<span style='display:inline;font-size:10px;color:" + roleclr[u_inf["role"].toLowerCase()] + ";'> (" + u_inf["role"] + ")</span><br></strong></p>";

			if (u_inf["user_id"])
				user_data += "<p style='font-size:10px;margin-top:0px;'>uid: " + u_inf["user_id"];
			else
				user_data += "<p style='font-size:10px;margin-top:0px;'>beta";

			if (u_inf["register_time"])
				user_data += " - joined: " + g_tm_dt(u_inf["register_time"], 0) + "</p>";
			else
				user_data += "</p>";

			if (u_inf["description"])
				user_data += "<p style='font-size:12px;margin-top: 0px;'>info: " + window.atob(u_inf["description"]) + "</p>";
			else
				user_data += "<p></p>"

			document.getElementById("user_info").innerHTML = user_data;
		})
		.catch(function (error) {
			console.error(error);
		});
}

own_info();

path = "panel_profiles";
c_hr(path, false, { width: "200px" });

c_btn(path, "opendlgalias", "change alias", function () {
	var dialog = document.getElementById("alias_dlg");
	dialog.showModal();
}, "Permite cambiar el alias 1 vez cada 30 dias.", { justifySelf: "center" })

c_dialog(path, "alias_dlg", {}, {});
path = "alias_dlg";

c_textbox(path, "pf_alias_textbox", false, "", "", {
	marginTop: "5px",
}, {
	pattern: "^[a-zA-Z0-9]*$",
	minLength: 3,
	maxLength: 20,
	required: true,
});

c_br();

c_btn(path, "btn_change_alias", "change", function () {
	const elem_item = document.getElementById("pf_alias_textbox");

	if (elem_item.validity.valid) {
		var txtinfo = elem_item.value;
		s_btn("change_alias", txtinfo)
			.then(function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);

				if (responseText.includes("changed") && !responseText.includes("wait")) {
					own_info();
					has_alias = true;
				}
			})
			.catch(function (error) {
				console.error(error);
			});
	}
	else {
		notify(elem_item.minLength + " a " + elem_item.maxLength + " caracteres. Sin caracteres/simbolos especiales.", 5000, "RED");
	}
}, "", { width: "100%" });

c_br();

c_btn(path, "cancel_alias", "cancel", function () {
	var dialog = document.getElementById("alias_dlg");
	dialog.close();
}, "", { width: "100%" });

path = "panel_profiles";

c_btn(path, "opendlgavtr", "change avatar", function () {
	var dialog = document.getElementById("avtr_dlg");
	dialog.showModal();
}, "Cambia el avatar a una imagen, solo URLS.", { justifySelf: "center" })

c_dialog(path, "avtr_dlg");
path = "avtr_dlg";

c_img(path, "avtr_preview", default_avatar, 90, 90, {
	display: "block",
	margin: "0 auto",
	objectFit: "cover"
});

c_br();

c_text(path, "", "Imgur URL only, example.", {
	textAlign: "center",
	color: "white"
});
c_text(path, "", "https://i.imgur.com/GnJaEZL.png", {
	textAlign: "center",
	color: "white"
});

c_textbox(path, "pf_avatar_textbox", false, "", "10 a 130 caracteres. Evitar usar URL's de gifs/videos.", {
	marginTop: "5px",
	width: "95%"
}, {
	pattern: "^(https?:\/\/)?(i\.imgur\.com\/)([a-zA-Z0-9]+)(\.jpg|\.jpeg|\.png)$",
	minLength: 20,
	maxLength: 40,
	required: true,
});

c_br();

c_btn(path, "btn_preview_avatar", "preview", function () {
	const elem_item = document.getElementById("pf_avatar_textbox");

	if (elem_item.validity.valid) {
		document.getElementById("avtr_preview").src = elem_item.value;
	}
	else {
		notify(elem_item.minLength + " a " + elem_item.maxLength + " caracteres. Sin caracteres/simbolos especiales.", 5000, "RED");
	}
}, "", { width: "100%" });

c_br();
c_hr(path, false);

c_btn(path, "btn_change_avatar", "change", function () {
	const elem_item = document.getElementById("pf_avatar_textbox");

	if (elem_item.validity.valid) {
		var txtinfo = elem_item.value;
		s_btn('change_avatar', txtinfo)
			.then(function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);

				if (responseText.includes("changed") && !responseText.includes("wait")) {
					document.getElementById("avtr_preview").src = txtinfo;
					document.getElementById("user_avatar").src = txtinfo;

					var dialog = document.getElementById("avtr_dlg");
					dialog.close();
				}
			})
			.catch(function (error) {
				console.error(error);
			});
	}
	else {
		notify(elem_item.minLength + " a " + elem_item.maxLength + " caracteres. Sin caracteres/simbolos especiales.", 5000, "RED");
	}
}, "", { width: "100%" });

c_br();

c_btn(path, "cancel_avtr", "cancel", function () {
	var dialog = document.getElementById("avtr_dlg");
	dialog.close();
}, "", { width: "100%" });

path = "panel_profiles";

c_btn(path, "opendlgdesc", "change description", function () {
	var dialog = document.getElementById("desc_dlg");
	dialog.showModal();
}, "Cambia la descripcion de tu perfil.", { justifySelf: "center" })

c_dialog(path, "desc_dlg");
path = "desc_dlg";

c_textarea(path, "description_content", false, "", {
	height: '100px',
	resize: 'none',
	overflow: 'hidden',
	whiteSpace: 'pre-wrap',
	marginTop: "5px",
	justifySelf: "center",
	textbox: {
		display: "inherit"
	}
}, {
	pattern: "^[a-zA-Z0-9 ]*$",
	minLength: 4,
	maxLength: 256,
	placeholder: "description",
	required: true,
});

c_br();

c_btn(path, "btn_change_description", "change", function () {
	const elem_item = document.getElementById("description_content");

	if (elem_item.validity.valid) {
		var desc_info = elem_item.value;

		s_btn("change_description", desc_info)
			.then(function (responseText) {
				notify(responseText.replace(/_/g, " "), 7000);

				if (responseText.includes("changed") && !responseText.includes("wait")) {
					own_info();
				}
			})
			.catch(function (error) {
				console.error(error);
			});
	}
	else {
		notify(elem_item.minLength + " a " + elem_item.maxLength + " caracteres. Sin caracteres/simbolos especiales.", 5000, "RED");
	}
}, "", { width: "100%" });

c_br();

c_btn(path, "cancel_desc", "cancel", function () {
	var dialog = document.getElementById("desc_dlg");
	dialog.close();
}, "", { width: "100%" });

const virtualKeys = [];

for (let i = 0x41; i <= 0x5A; i++) {
	virtualKeys.push({ code: i, name: String.fromCharCode(i) });
}

for (let i = 0x30; i <= 0x39; i++) {
	virtualKeys.push({ code: i, name: String.fromCharCode(i) });
}

const specialKeys = [
	{ code: 0, name: 'NONE' },
	{ code: 0x08, name: 'Backspace' },
	{ code: 0x09, name: 'Tab' },
	{ code: 0x0D, name: 'Enter' },
	{ code: 0x10, name: 'Shift' },
	{ code: 0x11, name: 'Ctrl' },
	{ code: 0x12, name: 'Alt' },
	{ code: 0xA4, name: 'Left Alt' },
	{ code: 0xA5, name: 'Right Alt' },
	{ code: 0x13, name: 'Pause/Break' },
	{ code: 0x5B, name: 'Left Windows' },
	{ code: 0x5C, name: 'Right Windows' },
	{ code: 0x5D, name: 'Applications' },
	{ code: 0x60, name: 'NumPad 0' },
	{ code: 0x61, name: 'NumPad 1' },
	{ code: 0x62, name: 'NumPad 2' },
	{ code: 0x63, name: 'NumPad 3' },
	{ code: 0x64, name: 'NumPad 4' },
	{ code: 0x65, name: 'NumPad 5' },
	{ code: 0x66, name: 'NumPad 6' },
	{ code: 0x67, name: 'NumPad 7' },
	{ code: 0x68, name: 'NumPad 8' },
	{ code: 0x69, name: 'NumPad 9' },
	{ code: 0x70, name: 'F1' },
	{ code: 0x71, name: 'F2' },
	{ code: 0x72, name: 'F3' },
	{ code: 0x73, name: 'F4' },
	{ code: 0x74, name: 'F5' },
	{ code: 0x75, name: 'F6' },
	{ code: 0x76, name: 'F7' },
	{ code: 0x77, name: 'F8' },
	{ code: 0x78, name: 'F9' },
	{ code: 0x79, name: 'F10' },
	{ code: 0x7A, name: 'F11' },
	{ code: 0x7B, name: 'F12' },
	{ code: 0x01, name: 'LBUTTON' },
	{ code: 0x02, name: 'RBUTTON' },
	{ code: 0x04, name: 'MBUTTON' },
	{ code: 0x05, name: 'XBUTTON1' },
	{ code: 0x06, name: 'XBUTTON2' },
	{ code: 0xBB, name: '=' },
	{ code: 0xBC, name: ',' },
	{ code: 0xBD, name: '-' },
	{ code: 0xBE, name: '.' },
];

virtualKeys.push(...specialKeys);
virtualKeys.sort(function (a, b) { return a.code - b.code; });

function createOptionElement(keyElement, id) {
	const optionElement = document.createElement("option");
	optionElement.value = keyElement.code;
	optionElement.text = keyElement.name;
	optionElement.id = id + "_opt";
	return optionElement;
}

bind_elements.forEach((element) => {
	const targetElement = document.getElementById(element.target);
	virtualKeys.forEach((key) => {
		targetElement.appendChild(createOptionElement(key, element.id));
	});
});

function r_info() {
	for (const i in u_bool) {
		g_bool(u_bool[i]);
	}

	for (const i in u_float) {
		g_float(u_float[i]);
	}

	for (const i in u_int) {
		g_int(u_int[i]);
	}

	for (const i in u_int2) {
		g_int(u_int2[i], false);
	}
}

function u_server() {
	for (const i in u_bool) {
		s_bool(u_bool[i]);
	}

	for (const i in u_float) {
		s_float(u_float[i]);
	}
}

function ctab_fix(id, display = "inline-block") {
	var elementos = ['element_main', 'element_keys', 'element_overlay', 'element_setting', 'element_qrcode'];

	elementos.forEach(function (elemento) {
		if (document.getElementById(elemento))
			document.getElementById(elemento).style.display = 'none';
	});

	if (document.getElementById(id))
		document.getElementById(id).style.display = display;
}

function tab_switch(i = this.id, panel = "center", display = "inline-block") {
	switch (panel) {
		case 2:
		case "2":
		case "right":
			let tab2Buttons = document.querySelectorAll("[c-tab2-btn]");
			tab2Buttons.forEach((button) => {
				if (button.id === i) {
					button.classList.add("active");
				} else {
					button.classList.remove("active");
				}
			});
			switch (i) {
				case 'p_updates':
					document.getElementById('panel_updates').style.display = "flex";
					document.getElementById('panel_tickets').style.display = "none";
					document.getElementById('panel_profiles').style.display = "none";
					break;
				case 'p_tickets':
					document.getElementById('panel_updates').style.display = "none";
					document.getElementById('panel_tickets').style.display = "flex";
					document.getElementById('panel_profiles').style.display = "none";
					break;
				case 'p_profile':
					document.getElementById('panel_updates').style.display = "none";
					document.getElementById('panel_tickets').style.display = "none";
					document.getElementById('panel_profiles').style.display = "grid";
					break;
			}
			break;
		case 1:
		case "1":
		case "center":
			let tabButtons = document.querySelectorAll("[c-tab-btn]");
			tabButtons.forEach((button) => {
				if (button.id === i) {
					button.classList.add("active");
				} else {
					button.classList.remove("active");
				}
			});

			switch (i) {
				case 'main_tab':
					ctab_fix('element_main', display);
					break;
				case 'keys_tab':
					ctab_fix('element_keys', display);
					break;
				case 'overlay_tab':
					ctab_fix('element_overlay', display);
					break;
				case 'settings_tab':
					ctab_fix('element_setting', display);
					break;
				case 'qrcode_tab':
					ctab_fix('element_qrcode', display);
					break;
			}
			break;
	}
}

tab_switch("main_tab", "center", "none");
r_info();

var iterfound = 0;
var was_game_found = false;
var should_update = true;
var is_mouse_inside = false;

document.addEventListener("mouseenter", function () { is_mouse_inside = true; });
document.addEventListener("mouseleave", function () { is_mouse_inside = false; });

document.addEventListener("visibilitychange", (event) => {
	should_update = (document.visibilityState == "visible");
});

var updatert = setInterval(async function () {
	if (allow_au && should_update && document.body.style.cursor != "none" && is_mouse_inside) {
		r_info();
		await sleep(500);
		u_sliders();
	}
}, 5000);

setInterval(function () {
	if (document.body.style.cursor != "none" && is_mouse_inside) {
		u_chat();
		g_onlines();
	}
}, 2000);

async function gather(info, extra, func2 = function () { }) {
	return new Promise((resolve, reject) => {
		$.get("/toggle?feature=" + info + "&val=" + extra, function (responseText) {
			resolve(responseText);
		}).fail(function (error) {
			reject(error);
		});
	});
}

function zinc_info(info, extra) {
	$.get("/g_info?info=" + info, function (responseText) {
		if (document.getElementById(info) != undefined) {
			document.getElementById(info).innerHTML = extra + responseText;
			if (document.getElementById(info).style.display == "none")
				document.getElementById(info).style.display = "block";
		}
	});
}

var waiting = setInterval(function () {
	$.get("/g_info?info=gamefound", function (responseText) {
		was_game_found = parseInt(responseText);
		if (!was_game_found) {
			zinc_info("waiting_game", "intializing<br>closing in: ");
			document.getElementById("user_days").style.display = "none";
			document.getElementById("element_buttons").style.display = "none";
			document.getElementById("element_main").style.display = "none";
			document.getElementById("element_config").style.display = "none";
			tab_switch("main_tab", "center", "none");
		}
		else {
			iterfound++;

			if (iterfound > 2) {
				zinc_info("user_days", "days left: ");
				zinc_info("last_update", "<strong>Updated</strong>: ");
				zinc_info("changelogs", "<strong>Changelogs</strong>: ");
				document.getElementById("waiting_game").style.display = "none";
				document.getElementById("element_buttons").style.display = "flex";
				document.getElementById("element_main").style.display = "block";
				document.getElementById("element_config").style.display = "block";
				tab_switch("main_tab");
				tab_switch("p_updates", 2);
				clearInterval(waiting);
			}
		}
	})
}, 250);

var running = setInterval(function () {
	try {
		$.get("/g_info?info=running", function (responseText) { }).fail(function (error) {
			c_exit();
		});
	} catch (error) {
		console.log(error);
		alert(error);
		c_exit();
	}
}, 1500);

function c_dialog(id_where, id_item, stylez = {}, elemnt = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	if (document.getElementById(id_item)) {
		console.log("element exist with id: ", id_item)
		return;
	}

	const dialog = document.createElement("dialog");
	dialog.id = id_item;

	if (stylez) {
		Object.assign(dialog.style, stylez);
	}

	if (elemnt) {
		for (let key in elemnt) {
			const element = elemnt[key];
			const el = document.createElement(element.type);
			Object.assign(el, element.props);
			Object.assign(el.style, element.styles);
			dialog.appendChild(el);
		}
	}

	document.getElementById(id_where).appendChild(dialog);
}

function c_div(id_where, id_item, stylez = {}, elemnt = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	const div = document.createElement("div");
	div.id = id_item;
	if (elemnt) {
		Object.assign(div, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				div.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	if (stylez) {
		Object.assign(div.style, stylez);
	}

	const container = document.getElementById(id_where);
	container.appendChild(div);
}

function c_tab_button(id_where, buttons, typez = 1) {
	const tabContainer = document.getElementById(id_where);

	buttons.forEach(function (button, index) {
		var btn = document.createElement("button");
		btn.className = "tab-button";
		btn.setAttribute(typez == 1 ? "c-tab-btn" : ("c-tab" + typez + "-btn"), "");
		btn.id = button.id;
		btn.innerHTML = button.text;

		if (index === 0) {
			btn.style.borderTopRightRadius = "0px";
		} else if (index === buttons.length - 1) {
			btn.style.borderTopLeftRadius = "0px";
		} else {
			btn.style.borderTopRightRadius = "0px";
			btn.style.borderTopLeftRadius = "0px";
		}

		btn.onclick = function () {
			tab_switch(this.id, typez);
		};

		tabContainer.appendChild(btn);
	});
}

function g_tm_dt(timestamp, hrmin = 1) {
	var date = new Date(+timestamp * 1000);
	if (hrmin == 1) {
		var hour = ("0" + date.getHours()).substr(-2);
		var minutes = ("0" + date.getMinutes()).substr(-2);
		return (hour + ":" + minutes);
	}
	if (hrmin == 2) {
		var hour = ("0" + date.getHours()).substr(-2);
		var minutes = ("0" + date.getMinutes()).substr(-2);
		var year = date.getFullYear();
		var month = ("0" + (date.getMonth() + 1)).substr(-2);
		var day = ("0" + date.getDate()).substr(-2);
		return (hour + ":" + minutes) + " - " + (day + "/" + month + "/" + year);
	}
	else {
		var year = date.getFullYear();
		var month = ("0" + (date.getMonth() + 1)).substr(-2);
		var day = ("0" + date.getDate()).substr(-2);
		return (day + "/" + month + "/" + year);
	}
}

function c_btn(id_where, id_item, text, func2 = function (c_el) { }, tooltip = "", stylez = {}, elemnt = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	const button = document.createElement("button");
	button.type = "button";
	button.classList.add("newbutton");
	button.id = id_item;
	button.innerHTML = text;

	if (elemnt) {
		Object.assign(button, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				button.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	if (stylez) {
		Object.assign(button.style, stylez);
	}

	button.onclick = function () {
		func2(button);
	};

	if (tooltip != "") {
		button.setAttribute("data-ttip", tooltip);
	}

	const container = document.getElementById(id_where);
	container.appendChild(button);
}

function c_hr(id_where = path, margin = true, stylez = {}) {
	const container = document.getElementById(id_where);
	var hr = document.createElement("hr");
	if (margin)
		hr.style.marginLeft = "-20px";

	hr.style.border = "0px";
	hr.style.borderTop = "1px solid var(--c-hr)";

	if (stylez) {
		Object.assign(hr.style, stylez);
	}

	container.appendChild(hr);
}

function c_br(id_where = path, amount = 1) {
	const container = document.getElementById(id_where);
	for (let index = 0; index < amount; index++) {
		container.appendChild(document.createElement("br"));
	}
}

function c_checkbox(id_where, id_item, text, tooltip = "", func2 = function (c_el) { }) {
	if (id_item == "rnd")
		id_item = gRndId();

	const div = document.createElement('div');
	div.classList.add('elemitems_bg');
	div.htmlFor = id_item;
	div.style.display = "inline-flex";

	const checkbox = document.createElement("input");
	checkbox.type = "checkbox";
	checkbox.id = id_item;
	checkbox.onchange = function () {
		u_server();
		func2(checkbox);
	};

	const label = document.createElement("label");
	label.htmlFor = id_item;
	label.innerHTML = text;
	label.id = id_item + "zzzzz";

	const container = document.getElementById(id_where);

	div.appendChild(checkbox);
	div.appendChild(label);

	const i_tooltip = document.createElement("i");
	if (tooltip != "") {
		i_tooltip.className = "fa fa-question-circle fa-2";
		i_tooltip.setAttribute("aria-hidden", "true");
		i_tooltip.style.display = "inline-block";
		i_tooltip.style.fontWeight = "900";
		i_tooltip.style.fontSize = "15px";
		i_tooltip.style.opacity = "0.5";
		i_tooltip.style.marginLeft = "8px";

		i_tooltip.setAttribute("data-ttip", tooltip);
	}

	container.appendChild(div);

	if (tooltip != "") {
		container.appendChild(i_tooltip);
	}

	u_bool.push(id_item);
}

function c_s_float(id_where, id_item, text, min, max, step_val, default_val) {
	if (id_item == "rnd")
		id_item = gRndId();

	var stepval_ceros = (String(step_val).split(".")[1] || "");
	stepval_ceros = stepval_ceros.length;

	const div = document.createElement('div');
	div.classList.add('length', 'f_slider_bg');
	div.setAttribute('data-min', min);
	div.setAttribute('data-max', max);

	const titleDiv = document.createElement('div');
	titleDiv.classList.add('l_title', 'f_title');
	titleDiv.setAttribute('data-length', default_val);
	titleDiv.textContent = text + ": ";

	const number_input = document.createElement("input");
	number_input.classList.add("numberslider");
	number_input.type = "number";
	number_input.pattern = "[0-9]*";
	number_input.inputMode = "numeric";
	number_input.id = id_item;
	number_input.min = min;
	number_input.max = max;
	number_input.step = step_val;
	number_input.value = default_val;
	number_input.oninput = function () {
		u_server();
		applyFill(number_input, true, stepval_ceros, number_input.value);
	};

	const minus_btn = document.createElement("button");
	minus_btn.classList.add("controls-number");
	minus_btn.style.display = "inline";
	minus_btn.style.marginLeft = "8px";
	minus_btn.style.marginRight = "8px";
	minus_btn.innerHTML = ("&#8722;").trim();
	minus_btn.onclick = function () {
		sumrest_buttons(id_item, 0, min, max, 1, stepval_ceros);
		u_server();
		applyFill(number_input, true, stepval_ceros, number_input.value);
	};

	const plus_btn = document.createElement("button");
	plus_btn.classList.add("controls-number");
	plus_btn.style.display = "inline";
	plus_btn.style.marginLeft = "8px";
	plus_btn.style.marginRight = "8px";
	plus_btn.innerHTML = ("&#43;").trim();
	plus_btn.onclick = function () {
		sumrest_buttons(id_item, 1, min, max, 1, stepval_ceros);
		u_server();
		applyFill(number_input, true, stepval_ceros, number_input.value);
	};

	const container = document.getElementById(id_where);
	div.appendChild(titleDiv);
	div.appendChild(minus_btn);
	div.appendChild(number_input);
	div.appendChild(plus_btn);

	container.appendChild(div);

	u_float.push(id_item);
}

function c_img(id_where, id_item, image, width, height, stylez = {}, elemnt = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	const container = document.getElementById(id_where);
	const img = document.createElement("img");

	img.setAttribute('id', id_item);
	img.setAttribute('src', image);
	img.setAttribute('alt', "u_avatar");
	img.setAttribute('width', width);
	img.setAttribute('height', height);

	if (elemnt) {
		Object.assign(img, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				img.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	if (stylez) {
		Object.assign(img.style, stylez);
	}

	container.appendChild(img);
}

function c_textarea(id_where, id_item, hidden = false, label = "", stylez = {}, elemnt = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	const textbox_div = document.createElement("div");
	if (label !== "") {
		textbox_div.classList.add("textbox");

		const labelElem = document.createElement("label");
		labelElem.textContent = label.trim();
		labelElem.id = id_item + "lbl";
		labelElem.style.display = hidden ? "none" : "inline-block";
		labelElem.setAttribute("for", id_item);

		if (stylez && stylez.labelz) {
			Object.assign(textbox_div.style, stylez.labelz);
		}
		textbox_div.appendChild(labelElem);
	}

	const textarea = document.createElement("textarea");

	textarea.id = id_item;

	if (elemnt) {
		Object.assign(textarea, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				textarea.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	textarea.style.display = hidden ? "none" : "inline-block";

	if (stylez) {
		Object.assign(textarea.style, stylez);

		if (stylez.textbox) {
			Object.assign(textbox_div.style, stylez.textbox);
		}
	}

	if (label !== "") {
		textbox_div.appendChild(textarea);
	} else {
		const container = document.getElementById(id_where);
		container.appendChild(textarea);
	}

	const container = document.getElementById(id_where);
	if (label === "" && container) {
		container.appendChild(textarea);
	} else if (container) {
		container.appendChild(textbox_div);
	}
}

function c_textbox(id_where, id_item, hidden = false, label = "", tooltip = "", stylez = {}, elemnt = {}, disablestyle = false) {

	if (id_item == "rnd")
		id_item = gRndId();

	const textbox_div = document.createElement("div");
	if (label !== "") {
		textbox_div.classList.add("textbox");

		const labelElem = document.createElement("label");
		labelElem.textContent = label.trim();
		labelElem.id = id_item + "lbl";
		labelElem.style.display = hidden ? "none" : "inline-block";
		labelElem.setAttribute("for", id_item);

		if (stylez && stylez.labelz) {
			Object.assign(textbox_div.style, stylez.labelz);
		}

		textbox_div.appendChild(labelElem);
	}

	const input = document.createElement("input");
	input.setAttribute("type", "text");
	input.setAttribute("id", id_item);

	if (disablestyle)
		input.setAttribute('data-novalidinvalid', '');

	if (tooltip != "") {
		input.setAttribute("data-ttip", tooltip)
	}

	if (elemnt) {
		Object.assign(input, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				input.addEventListener(eventName, function (ev) {
					elemnt.eventListener[eventName](this, ev);
				});
			}
		}
	}

	input.style.display = hidden ? "none" : "inline-block";

	if (stylez) {
		Object.assign(input.style, stylez);

		if (stylez.textbox) {
			Object.assign(textbox_div.style, stylez.textbox);
		}
	}

	if (label !== "") {
		textbox_div.appendChild(input);
	} else {
		const container = document.getElementById(id_where);
		container.appendChild(input);
	}

	const container = document.getElementById(id_where);
	if (label === "" && container) {
		container.appendChild(input);
	} else if (container) {
		container.appendChild(textbox_div);
	}
}

function c_table(id_where, id_item, text, stylez = {}, elemnt = {}) {

	if (id_item == "rnd")
		id_item = gRndId();

	const text_div = document.createElement("table");

	if (text)
		text_div.innerHTML = text.trim();

	text_div.id = id_item;

	if (elemnt) {
		Object.assign(text_div, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				text_div.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	if (stylez) {
		Object.assign(text_div.style, stylez);
	}

	const container = document.getElementById(id_where);
	container.appendChild(text_div);
}

function c_text(id_where, id_item, text, stylez = {}, elemnt = {}) {

	if (id_item == "rnd")
		id_item = gRndId();

	const text_div = document.createElement("p");
	text_div.classList.add("text");

	if (text)
		text_div.innerHTML = text.trim();

	text_div.id = id_item;

	if (elemnt) {
		Object.assign(text_div, elemnt);

		if (elemnt.eventListener) {
			for (let eventName in elemnt.eventListener) {
				text_div.addEventListener(eventName, function () {
					elemnt.eventListener[eventName](this);
				});
			}
		}
	}

	if (stylez) {
		Object.assign(text_div.style, stylez);
	}

	const container = document.getElementById(id_where);
	container.appendChild(text_div);
}

function c_combobox2(id_where, id_item, options, hidden = false, tooltip = "", stylez = {}) {

	if (id_item == "rnd")
		id_item = gRndId();

	const select_elem = document.createElement("select");
	select_elem.classList.add("select-dropdown");
	select_elem.id = id_item;

	if (tooltip != "") {
		select_elem.setAttribute("data-ttip", tooltip);
	}

	options.forEach((option, index) => {
		const option_elem = document.createElement("option");
		option_elem.value = index;
		option_elem.text = option;
		select_elem.add(option_elem);
	});

	select_elem.style.display = ((hidden == true) ? ("none") : ("inline-block"));

	if (stylez) {
		Object.assign(select_elem.style, stylez);
	}

	const container = document.getElementById(id_where);
	container.appendChild(select_elem);
}

function c_combobox(id_where, id_item, text, min, max, sameline = false, tooltip = "", func2 = function (c_el) { }, stylez = {}) {
	if (id_item == "rnd")
		id_item = gRndId();

	const text_div = document.createElement("div");
	if (text != "") {
		text_div.classList.add("text");
		text_div.textContent = text.trim();
	}

	const select_elem = document.createElement("select");
	select_elem.classList.add("select-dropdown");
	select_elem.id = id_item;
	select_elem.style.height = "42px";

	if (sameline)
		select_elem.style.marginRight = "10px";

	select_elem.onchange = function () {
		s_int2(id_item, min, max);
		func2(select_elem);
	};

	//if (tooltip != "") {
	//	select_elem.setAttribute("data-ttip", tooltip);
	//}

	if (stylez) {
		Object.assign(select_elem.style, stylez);

		if (stylez.text_div) {
			Object.assign(select_elem.style, stylez.text_div);
		}
	}

	const container = document.getElementById(id_where);
	if (text != "") {
		container.appendChild(text_div);
	}
	container.appendChild(select_elem);

	const i_tooltip = document.createElement("i");
	if (tooltip != "") {
		i_tooltip.className = "fa fa-question-circle fa-2";
		i_tooltip.setAttribute("aria-hidden", "true");
		i_tooltip.style.display = "inline";
		i_tooltip.style.position = "relative";
		i_tooltip.style.marginLeft = "8px"
		i_tooltip.style.fontWeight = "900";
		i_tooltip.style.fontSize = "15px";
		i_tooltip.style.opacity = "0.5";

		i_tooltip.setAttribute("data-ttip", tooltip);
	}

	if (tooltip != "") {
		container.appendChild(i_tooltip);
	}

	u_int2.push(id_item);
}

function c_s_int(id_where, id_item, id_text, min, max, step, value, tooltip = "") {
	if (id_item == "rnd")
		id_item = gRndId();

	const container = document.getElementById(id_where);

	const div = document.createElement('div');
	div.classList.add('length', 'r_slider_bg');
	div.setAttribute('data-min', min);
	div.setAttribute('data-max', max);

	const titleDiv = document.createElement('div');
	titleDiv.classList.add('l_title', 'f_title');
	titleDiv.setAttribute('data-length', value);
	titleDiv.textContent = id_text + ": ";

	const input = document.createElement('input');

	const minusBtn = document.createElement("button");
	minusBtn.className = "controls-number";
	minusBtn.style.display = "inline";
	minusBtn.style.marginLeft = "8px";
	minusBtn.style.marginRight = "8px";
	minusBtn.innerHTML = ("&#8722;").trim();
	minusBtn.onclick = () => {
		sumrest_buttons(id_item, 0, min, max);
		s_int2(id_item, min, max);
		applyFill(input);
	};

	const plusBtn = document.createElement("button");
	plusBtn.className = "controls-number";
	plusBtn.style.display = "inline";
	plusBtn.style.marginLeft = "8px";
	plusBtn.style.marginRight = "8px";
	plusBtn.innerHTML = ("&#43;").trim();
	plusBtn.onclick = () => {
		sumrest_buttons(id_item, 1, min, max);
		s_int2(id_item, min, max);
		applyFill(input);
	};

	input.classList.add('slider');
	input.setAttribute("id", id_item);
	input.setAttribute('type', 'range');
	input.setAttribute('min', min);
	input.setAttribute('max', max);
	input.setAttribute('step', step);
	input.setAttribute('value', value);
	input.onchange = () => {
		s_int2(id_item, min, max);
		applyFill(input);
	};

	if (tooltip != "") {
		div.setAttribute("data-ttip", tooltip);
	}

	div.appendChild(titleDiv);
	div.appendChild(minusBtn);
	div.appendChild(input);
	div.appendChild(plusBtn);

	container.appendChild(div);

	u_int.push(id_item);
}

const sliderProps = {
	background: "rgba(255, 255, 255, 0.214)",
};

function u_sliders() {
	const sliders = document.querySelectorAll(".r_slider_bg");

	sliders.forEach((slider) => {
		const sliderInput = slider.querySelector(".slider");
		const sliderValue = slider.querySelector(".l_title");

		sliderInput.addEventListener("input", (event) => {
			sliderValue.setAttribute("data-length", event.target.value);
			applyFill(event.target);
		});

		applyFill(sliderInput);
	});

	const f_sliders = document.querySelectorAll(".f_slider_bg");

	f_sliders.forEach(async (slider) => {
		const sliderInput = slider.querySelector(".numberslider");

		let stepval_ceros = (String(sliderInput.step).split(".")[1] || "");

		applyFill(sliderInput, true, stepval_ceros.length, sliderInput.value);
	});
}

u_sliders();

function applyFill(slider, is_flt = false, fltparse = 1, value) {
	if (is_flt) {
		slider.parentNode.querySelector(".l_title").setAttribute("data-length", parseFloat(value).toFixed(fltparse));
		slider.style.background = sliderProps.background;
		slider.style.color = 'var(--c-text)';
		slider.style.borderRadius = "5px";
		slider.style.border = "1px solid var(--c-contornos)";
		return;
	}

	const percentage = ((100 * (slider.value - slider.min)) / (slider.max - slider.min)).toFixed(1);
	const bg = `linear-gradient(90deg, var(--c-primary) 0%, var(--c-secondary) ${percentage}%, ${sliderProps.background} ${percentage}%, ${sliderProps.background} 100%)`;
	slider.style.background = bg;
	slider.parentNode.querySelector(".l_title").setAttribute("data-length", slider.value);
}

function sumrest_buttons(item_id, sum, min, max, is_flt = 0, fltparse = 1) {
	if (document.getElementById(item_id) == undefined) {
		console.log(item_id, "doesnt exist");
		return;
	}

	if (is_flt) {
		if (sum) {
			if (document.getElementById(item_id).value > max)
				document.getElementById(item_id).value = parseFloat(max);
			else
				document.getElementById(item_id).value = (parseFloat(document.getElementById(item_id).value) + parseFloat(document.getElementById(item_id).step)).toFixed(fltparse);
		} else {
			if (document.getElementById(item_id).value < min)
				document.getElementById(item_id).value = parseFloat(max);
			else
				document.getElementById(item_id).value = (parseFloat(document.getElementById(item_id).value) - parseFloat(document.getElementById(item_id).step)).toFixed(fltparse);
		}
	}
	else {
		if (sum) {
			if (document.getElementById(item_id).value > max)
				document.getElementById(item_id).value = parseInt(max);
			else
				document.getElementById(item_id).value = parseFloat(document.getElementById(item_id).value) + parseFloat(document.getElementById(item_id).step);
		} else {
			if (document.getElementById(item_id).value < min)
				document.getElementById(item_id).value = parseInt(max);
			else
				document.getElementById(item_id).value = parseFloat(document.getElementById(item_id).value) - parseFloat(document.getElementById(item_id).step);
		}
	}
}

window.mobileCheck = function () {
	let check = false;
	(function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
	return check;
};

window.steamCheck = function () {
	let userAgent = navigator.userAgent.toLowerCase();
	let isSteamBrowser = userAgent.indexOf("steam") > -1;
	return isSteamBrowser;
};

if (!window.mobileCheck()) {
	document.getElementById("qrcode_text").innerHTML = "scan on mobile or enter: " + window.location.hostname + " on your mobile browser";
	document.getElementById("qrimage").src = "https://chart.googleapis.com/chart?cht=qr&chl=" + window.location.hostname + "&chs=250x250&chld=L|0";

	window.onload = function () {
		if (window.innerWidth < 1000) {
			t_panel('left_panel');
			t_panel();
		}
		else {
			if (window.steamCheck()) {
				document.getElementById("right_panel").style.opacity = 0;
				document.getElementById("right_panel").style.width = "0px";

				setTimeout(async () => {
					document.getElementById("right_panel").style.display = "none";
				}, 250);

				document.getElementById("left_panel").style.opacity = 0;
				document.getElementById("left_panel").style.width = "0px";

				setTimeout(async () => {
					document.getElementById("left_panel").style.display = "none";
				}, 250);

				notify("panels disabled on steam.");
			} else {
				document.getElementById("right_panel").style.opacity = 1;
				setTimeout(async () => {
					document.getElementById("right_panel").style.display = "block";
				}, 250);

				document.getElementById("left_panel").style.opacity = 1;
				setTimeout(async () => {
					document.getElementById("left_panel").style.display = "block";
				}, 250);
			}
		}
	};
}
else {
	document.body.style.zoom = "75%";
	t_panel('left_panel');
	t_panel();
	document.getElementById("qrcode_text").innerHTML = "only on pc".trim();
	document.getElementById("qrimage").style.display = "none";
}

function string2bool(string) {
	switch (string.toLowerCase().trim()) {
		case "true":
		case "yes":
		case "1":
			return true;
		case "false":
		case "no":
		case "0":
		case null:
			return false;
		default:
			return Boolean(string);
	}
}

function g_bool(module) {
	$.get("/g_bool?feature=" + module, function (responseText) {
		if (document.getElementById(module) == undefined) {
			console.log(module, "doesnt exist");
			return;
		}

		document.getElementById(module).checked = string2bool(responseText);

		if (!u_al_bool.includes(module)) {
			document.getElementById(module).dispatchEvent(new Event("change"));
			u_al_bool.push(module);
		}
	});
}

function g_int(module, returned = true) {
	$.get("/g_int?feature=" + module, function (responseText) {
		if (document.getElementById(module) == undefined) {
			console.log(module, "doesnt exist");
			return;
		}

		document.getElementById(module).value = responseText;

		if (module.includes("theme_select")) {
			document.getElementById(module).dispatchEvent(new Event("change"));
		}

		if (returned) {
			if (!u_al_int.includes(module)) {
				document.getElementById(module).dispatchEvent(new Event("input"));
				u_al_int.push(module);
			}

			if (document.getElementById(module + "z") != undefined)
				document.getElementById(module + "z").innerHTML = document.getElementById(module).value;
		}
	});
}

function g_float(module) {
	$.get("/g_float?feature=" + module, function (responseText) {
		if (document.getElementById(module) == undefined) {
			console.log(module, "doesnt exist");
			return;
		}

		var stepval_ceros2 = (String(document.getElementById(module).step).split(".")[1] || "");

		document.getElementById(module).value = parseFloat(responseText).toFixed(stepval_ceros2.length);

		if (!u_al_float.includes(module)) {
			document.getElementById(module).dispatchEvent(new Event("input"));
			u_al_float.push(module);
		}

		if (document.getElementById(module + "z") != undefined)
			document.getElementById(module + "z").innerHTML = document.getElementById(module).value;
	});
}

function s_bool(module) {
	let modulez = document.getElementById(module);
	if (modulez == undefined) {
		console.log(module, "doesnt exist")
		return;
	}
	var value = modulez.checked;

	$.get("/s_bool?feature=" + module + "&val=" + value, function (responseText) { });
}

function s_int2(module, min = 0, max = 0) {
	let modulez = document.getElementById(module);
	if (modulez == undefined) {
		console.log(module + " not found");
		return;
	}

	var value = modulez.value;

	if (min == 0 && max == 0) {
		$.get("/s_int?feature=" + module + "&val=" + value, function (responseText) {
			var elementExists = document.getElementById(module + "z");
			if (elementExists != undefined || elementExists != null)
				elementExists.innerHTML = responseText;
		});
	} else {
		if (parseInt(value) >= parseInt(min) && parseInt(value) <= parseInt(max)) {
			$.get("/s_int?feature=" + module + "&val=" + value, function (responseText) {
				var elementExists = document.getElementById(module + "z");
				if (elementExists != undefined || elementExists != null)
					elementExists.innerHTML = responseText;
			});
		}
		else {
			console.log("minmax overpassed | ", value, min, max);
		}
	}
}

function s_float(module) {
	let modulez = document.getElementById(module);
	if (modulez == undefined) {
		console.log(module, "doesnt exist")
		return;
	}

	var value = parseFloat(modulez.value);
	var min = parseFloat(modulez.min);
	var max = parseFloat(modulez.max);

	if (value >= min && value <= max) {
		$.get("/s_float?feature=" + module + "&val=" + value, function (responseText) {
			if (document.getElementById(module + "z") != undefined)
				document.getElementById(module + "z").innerHTML = responseText;
		});
	}
}

function s_info(module, value, func2 = function () { }) {
	$.get("/s_info?feature=" + module + "&val=" + value, function (responseText) {
		func2();
	});
}

function gRndId(length = 8) {
	var id = '';
	var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	var charactersLength = characters.length;

	id = '';

	for (var i = 0; i < length; i++) {
		id += characters.charAt(Math.floor(Math.random() * charactersLength));
	}

	return id;
}

function s_btn(module, value = "") {
	return new Promise((resolve, reject) => {
		if (value == "") {
			$.get("/toggle?feature=" + module, function (responseText) {
				resolve(responseText);
			}).fail(function (error) {
				reject(error);
			});
		} else {
			$.get("/toggle?feature=" + module + "&val=" + value, function (responseText) {
				resolve(responseText);
			}).fail(function (error) {
				reject(error);
			});
		}
	});
}

function c_exit() {
	s_btn("dead");
	setTimeout(function () {
		window.open("", "_self", "");
		window.close();
		history.go(-1);
		navigator.app.backHistory();
		window.location.reload();
	}, 5000);
}

function f_combo(id_item, id_server) {
	$.get("/g_info?info=" + id_server, function (responseText) {
		var select = document.getElementById(id_item);

		if (select == undefined) {
			console.log(id_item, "doesnt exist");
			return;
		}

		var response = window.atob(responseText);

		if (response != null) {
			response = JSON.parse(response);
			if (response != null) {
				select.innerHTML = ("").trim();

				for (const key in response) {
					if (Object.hasOwnProperty.call(response, key)) {
						const element = response[key];
						var opt = document.createElement("option");
						opt.value = key;
						opt.id = id_item + "_" + key;
						opt.innerHTML = element["id"];
						select.appendChild(opt);
					}
				}
			}
		}
	});
}

window.addEventListener("resize", function () {
	if (window.innerWidth < 1000) {
		t_panel('left_panel', 1);
		t_panel('right_panel', 1);
	}
	else {
		t_panel('left_panel', 2);
		t_panel('right_panel', 2);
	}
});

async function t_panel(id = "right_panel", type = 0) {
	const p_elm = document.getElementById(id);
	if (type == 0) {
		if (p_elm.style.display != "none") {
			p_elm.style.width = "0px";
			p_elm.style.height = "0px";
			p_elm.style.opacity = "0";
			setTimeout(async () => {
				p_elm.style.display = "none";
			}, 250);

			if (window.mobileCheck() || (window.innerWidth < 1000)) {
				document.getElementById("center_panel").style.display = "block";
				if ((id).includes("right")) {
					document.getElementById("m_t_right_panel").style.display = "none";
				}
				else {
					document.getElementById("m_t_left_panel").style.display = "none";
				}
			}
		}
		else {
			p_elm.style.display = "block";
			await setTimeout(async () => { }, 250);

			p_elm.style.width = "auto";
			p_elm.style.height = "auto";
			p_elm.style.opacity = "1";

			if (window.mobileCheck() || (window.innerWidth < 1000)) {
				document.getElementById("center_panel").style.display = "none";
				if ((id).includes("right")) {
					document.getElementById("m_t_right_panel").style.display = "block";
				}
				else {
					document.getElementById("m_t_left_panel").style.display = "block";
				}
			}

		}
	}
	else {
		if (p_elm.style.display != "none" && type == 1) {
			p_elm.style.width = "0px";
			p_elm.style.height = "0px";
			p_elm.style.opacity = "0";
			setTimeout(async () => {
				p_elm.style.display = "none";
			}, 250);

			if (window.mobileCheck() || (window.innerWidth < 1000)) {
				document.getElementById("center_panel").style.display = "block";
				if ((id).includes("right")) {
					document.getElementById("m_t_right_panel").style.display = "none";
				}
				else {
					document.getElementById("m_t_left_panel").style.display = "none";
				}
			}
		}
		else if (type == 2 && p_elm.style.display == "none") {
			p_elm.style.display = "block";
			await setTimeout(async () => { }, 250);

			p_elm.style.width = "auto";
			p_elm.style.height = "auto";
			p_elm.style.opacity = "1";

			if (window.mobileCheck() || (window.innerWidth < 1000)) {
				document.getElementById("center_panel").style.display = "none";
				if ((id).includes("right")) {
					document.getElementById("m_t_right_panel").style.display = "block";
				}
				else {
					document.getElementById("m_t_left_panel").style.display = "block";
				}
			}

		}
	}
}

var znotificationId = 0, notificationContainer = document.querySelector("#notification-container");
function notify(a, b, d) { b = void 0 === b ? 2500 : b; d = ++znotificationId; var c = document.createElement("div"); c.classList.add("notification"); c.innerHTML = ("<p>" + a + "</p><button class='close-button' data-notification-id='" + d + "'>&times;</button>").trim(); c.style.marginLeft = "auto"; c.style.width = "fit-content"; notificationContainer.appendChild(c); setTimeout(function () { c.style.opacity = "0"; setTimeout(function () { c.remove() }, 450) }, b); (a = c.previousSibling) && a.style && (a.style.marginTop = "6px") }
notificationContainer.addEventListener("click", function (a) { if (a.target.classList.contains("close-button")) { var b = document.querySelector("[data-notification-id='" + a.target.dataset.notificationId + "']").parentElement; b.style.opacity = "0"; setTimeout(function () { b.remove() }, 250); (a = b.previousSibling) && a.style && (a.style.marginTop = "6px") } });

async function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

console.log("breaking coconuts");///////////////////////////////////////////////////////";
eval(atob(A));