var A = "Ly8gQHRzLW5vY2hlY2sKCnZhciBkZWZhdWx0X2F2YXRhciA9ICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvQ29sYUNhcHJpY2hvc2EvRlBXTFIvbG9nYXJkby5wbmciOwp2YXIgYWxsb3dfYXUgPSBmYWxzZTsKdmFyIGhhc19hbGlhcyA9IGZhbHNlOwoKY29uc3QgZHN0eWxlcyA9IHsKCXNsaWRlcnM6IHsgdHRpcHM6IHsgY29sb3I6ICJ3aGl0ZSIgfSwgdGl0bGV6OiB7IGNvbG9yOiAid2hpdGUiIH0sIGJnejogeyBjb2xvcjogIndoaXRlIiB9IH0sCglkaWFndGl0bGVzOiB7CgkJdGV4dEFsaWduOiAnY2VudGVyJywKCQl0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsCgkJZm9udFNpemU6ICcxOHB4JywKCQltYXJnaW5Cb3R0b206ICcxMHB4JywKCQltYXJnaW5Ub3A6ICIwcHgiLCBjb2xvcjogIndoaXRlIgoJfSwKCXN1YnRpdGxlczogeyBmb250U2l6ZTogIjE4cHgiLCBmb250V2VpZ2h0OiAiYm9sZCIsIG1hcmdpbkxlZnQ6ICIyMHB4IiB9Cn0KCmNvbnN0IHJvbGVjbHIgPSB7ICJub3JtYWwiOiAiIzYwNjA2MCIsICJwcmVtaXVtIjogIiM4YmIwZmYiLCAiY2hhZCI6ICIjZmZlNThiIiwgIkdPRCI6ICIjZjE0YzM5IiwgIlBBUEkiOiAiI2NlOThlMiIgfTsKdmFyIGZ1X2Nvb2xkb3duID0gMDsKCmZ1bmN0aW9uIGNfdGhlbWUoKSB7Cgljb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5OwoJY29uc3QgdGhlbWVfc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RoZW1lX3NlbGVjdCcpOwoJY29uc3Qgc2VsZWN0ZWQgPSB0aGVtZV9zZWxlY3QudmFsdWU7Cgljb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgc2VsZWN0ZWQpOwoJc19pbnQyKCd0aGVtZV9zZWxlY3QnKTsKfQoKZnVuY3Rpb24gZ190bV9pKCkgeyByZXR1cm4gTWF0aC5yb3VuZCgrbmV3IERhdGUoKSAvIDEwMDApOyB9Cgpjb25zdCB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CnRvb2x0aXAuY2xhc3NMaXN0LmFkZCgidG9vbHRpcCIpOwp0b29sdGlwLmlkID0gIndtdG9vbHRpcCI7CmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG9vbHRpcCk7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCAoZXZlbnQpID0+IHsKCWNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQ7CgoJY29uc3QgdG9vbHRpcE1lc3NhZ2UgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgiZGF0YS10dGlwIik7CglpZiAodG9vbHRpcE1lc3NhZ2UpIHsKCQl2YXIgd2ljaF9kaWFnID0gbnVsbDsKCQlmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdV9kaWFsb2dzLmxlbmd0aDsgaW5kZXgrKykgewoJCQlpZiAobW9kYWxfb3Blbih1X2RpYWxvZ3NbaW5kZXhdKSkgewoJCQkJd2ljaF9kaWFnID0gdV9kaWFsb2dzW2luZGV4XTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoKCQlpZiAod2ljaF9kaWFnICE9IG51bGwpIHsKCQkJY29uc3QgYWxyZWFkeV9leGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdpY2hfZGlhZyArICJfdHRpcCIpOwoJCQljb25zdCB0b29sdGlweiA9IGFscmVhZHlfZXhpc3QgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgkJCWlmICghYWxyZWFkeV9leGlzdCkgewoJCQkJdG9vbHRpcHouY2xhc3NMaXN0LmFkZCgidG9vbHRpcCIpOwoJCQkJdG9vbHRpcHouaWQgPSB3aWNoX2RpYWcgKyAiX3R0aXAiOwoKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdpY2hfZGlhZykuYXBwZW5kQ2hpbGQodG9vbHRpcHopOwoJCQl9CgkJCXRvb2x0aXB6LmlubmVyVGV4dCA9IHRvb2x0aXBNZXNzYWdlOwoJCQl0b29sdGlwei5zdHlsZS50b3AgPSBlbGVtZW50Lm9mZnNldFRvcCAtIHRvb2x0aXB6Lm9mZnNldEhlaWdodCAtIDggKyAicHgiOwoJCQl0b29sdGlwei5zdHlsZS5sZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0ICsgKGVsZW1lbnQub2Zmc2V0V2lkdGggLSB0b29sdGlwei5vZmZzZXRXaWR0aCkgLyAyICsgInB4IjsKCQkJdG9vbHRpcHouY2xhc3NMaXN0LmFkZCgidG9vbHRpcC0tdmlzaWJsZSIpOwoJCX0KCQllbHNlIHsKCQkJdG9vbHRpcC5pbm5lclRleHQgPSB0b29sdGlwTWVzc2FnZTsKCQkJdG9vbHRpcC5zdHlsZS50b3AgPSBlbGVtZW50Lm9mZnNldFRvcCAtIHRvb2x0aXAub2Zmc2V0SGVpZ2h0IC0gOCArICJweCI7CgkJCXRvb2x0aXAuc3R5bGUubGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdCArIChlbGVtZW50Lm9mZnNldFdpZHRoIC0gdG9vbHRpcC5vZmZzZXRXaWR0aCkgLyAyICsgInB4IjsKCQkJdG9vbHRpcC5jbGFzc0xpc3QuYWRkKCJ0b29sdGlwLS12aXNpYmxlIik7CgkJfQoJfQp9KTsKCmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3V0IiwgKGV2ZW50KSA9PiB7Cgljb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0OwoJY29uc3QgdG9vbHRpcE1lc3NhZ2UgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgiZGF0YS10dGlwIik7CglpZiAodG9vbHRpcE1lc3NhZ2UpIHsKCQl2YXIgd2ljaF9kaWFnID0gbnVsbDsKCQlmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdV9kaWFsb2dzLmxlbmd0aDsgaW5kZXgrKykgewoJCQlpZiAobW9kYWxfb3Blbih1X2RpYWxvZ3NbaW5kZXhdKSkgewoJCQkJd2ljaF9kaWFnID0gdV9kaWFsb2dzW2luZGV4XTsKCQkJfQoJCX0KCgkJaWYgKHdpY2hfZGlhZyAhPSBudWxsKSB7CgkJCWNvbnN0IHRvb2x0aXB6ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQod2ljaF9kaWFnICsgIl90dGlwIik7CgkJCWlmICh0b29sdGlweikgewoJCQkJdG9vbHRpcHouaW5uZXJUZXh0ID0gKCItIikudHJpbSgpOwoJCQkJdG9vbHRpcHouY2xhc3NMaXN0LnJlbW92ZSgidG9vbHRpcC0tdmlzaWJsZSIpOwoJCQl9CgkJCWVsc2UgewoJCQkJdG9vbHRpcC5pbm5lclRleHQgPSAoIi0iKS50cmltKCk7CgkJCQl0b29sdGlwLmNsYXNzTGlzdC5yZW1vdmUoInRvb2x0aXAtLXZpc2libGUiKTsKCQkJfQoJCX0gZWxzZSB7CgkJCXRvb2x0aXAuaW5uZXJUZXh0ID0gKCItIikudHJpbSgpOwoJCQl0b29sdGlwLmNsYXNzTGlzdC5yZW1vdmUoInRvb2x0aXAtLXZpc2libGUiKTsKCQl9Cgl9Cn0pOwoKLyphbHJlYWR5IGRpc3BhdGNoZWQgaWRzKi8KdmFyIHVfYWxfYm9vbCA9IFtdOwp2YXIgdV9hbF9mbG9hdCA9IFtdOwp2YXIgdV9hbF9pbnQgPSBbXTsKdmFyIHVfZGlhbG9ncyA9IFtdOwp2YXIgdV9ib29sID0gW107CnZhciB1X2Zsb2F0ID0gW107CnZhciB1X2ludCA9IFtdOwp2YXIgdV9pbnQyID0gWyJ0aGVtZV9zZWxlY3QiXTsKCnBhdGggPSAicGFuZWxfY2hhdCI7CgpjX3RleHQocGF0aCwgInJuZCIsICJjaGF0IiwgewoJdGV4dEFsaWduOiAnY2VudGVyJywKCXRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJywKCWZvbnRTaXplOiAnMThweCcsCgltYXJnaW5Cb3R0b206ICcxMHB4JywKCW1hcmdpblRvcDogIjBweCIsCn0pOwoKY19kaXYocGF0aCwgImNoYXQtY29udGFpbmVyIiwgewoJd2lkdGg6ICIyMzBweCIsCgloZWlnaHQ6ICIzMTVweCIsCgltYXhIZWlnaHQ6ICIzMTVweCIsCglvdmVyZmxvd1k6ICJhdXRvIiwKCXBhZGRpbmc6ICIxMHB4IiwKCWJhY2tncm91bmRDb2xvcjogJ3ZhcigtLWMtc2Vjb25kYXJ5KScsCn0pOwoKY19icigpOwoKZnVuY3Rpb24gc2VuZF9jaGF0KCkgewoJaWYgKCFoYXNfYWxpYXMpIHsKCQlub3RpZnkoImRpc2FibGVkIHRvIGRlZmF1bHQgdXNlcnMiLCA3MDAwKTsKCQlyZXR1cm47Cgl9CgoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjaGF0X3RleHQiKS52YWxpZGl0eS52YWxpZCkgewoJCWNvbnN0IGNoYXRfdGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjaGF0X3RleHQiKS52YWx1ZTsKCQlzX2J0bigic2VuZF9jaGF0IiwgY2hhdF90ZXh0KQoJCQkudGhlbihhc3luYyAoclR4dCkgPT4gewoJCQkJbm90aWZ5KHJUeHQucmVwbGFjZSgvXy9nLCAiICIpLCA3MDAwKTsKCgkJCQlpZiAoIXJUeHQuaW5jbHVkZXMoImRvbmUiKSkKCQkJCQlyZXR1cm47CgoJCQkJYXdhaXQgc2xlZXAoMzUwKTsKCQkJCXVfY2hhdCgpOwoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNoYXRfdGV4dCIpLnZhbHVlID0gIiI7CgkJCX0pCgkJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNoYXRfdGV4dCIpLnZhbHVlID0gIiI7CgkJCX0pOwoJfQoJZWxzZSB7CgkJbm90aWZ5KCJObyBzZSBhY2VwdGFuIGNhcmFjdGVyZXMgZXNwZWNpYWxlcywgZGUgMSBhIDY0IGNhcmFjdGVyZXMgc29sYW1lbnRlLiIsIDUwMDAsICJSRUQiKTsKCX0KfQoKY190ZXh0Ym94KHBhdGgsICJjaGF0X3RleHQiLCBmYWxzZSwgIiIsICIiLCB7fSwgewoJcGF0dGVybjogIl5bYS16QS1aMC05IF0qJCIsCgltaW5MZW5ndGg6IDEsCgltYXhMZW5ndGg6IDY0LAoJcmVxdWlyZWQ6IHRydWUsCglwbGFjZWhvbGRlcjogIndyaXRlIiwKCWV2ZW50TGlzdGVuZXI6IHsKCQlrZXlkb3duOiAoZWwsIGV2KSA9PiB7CgkJCWlmIChldi5rZXkgPT09ICdFbnRlcicpIHsKCQkJCXNlbmRfY2hhdCgpOwoJCQl9CgkJfQoJfQp9LCB0cnVlKTsKCmNfYnRuKHBhdGgsICJidG5fc2VuZF9jaGF0IiwgInNlbmQiLCAoKSA9PiB7CglzZW5kX2NoYXQoKTsKfSwgIkVudmlhIHVuIG1lbnNhamUgYWwgY2hhdCwgdW5hIHZleiBjYWRhIDMwIHNlZ3VuZG9zLiIpOwoKY19ocihwYXRoLCBmYWxzZSwgeyB3aWR0aDogIjIwMHB4IiB9KTsKCmNfdGV4dChwYXRoLCAidXNlcnNvbmxpbmUiLCAiZGlzYWJsZWQgb25saW5lcyIsIHsKCXRleHRBbGlnbjogJ2NlbnRlcicsCgl0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsCglmb250U2l6ZTogJzEwcHgnLAoJbWFyZ2luQm90dG9tOiAnMTBweCcsCgltYXJnaW5Ub3A6ICIwcHgiLAp9KTsKCmZ1bmN0aW9uIGdfb25saW5lcygpIHsKCWlmICghaGFzX2FsaWFzKSByZXR1cm47CgoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsZWZ0X3BhbmVsIikuc3R5bGUuZGlzcGxheSA9PSAibm9uZSIpCgkJcmV0dXJuOwoKCWdhdGhlcigib25saW5lcyIsICJ6eiIpCgkJLnRoZW4oKHJlc3VsdCkgPT4gewoJCQl0cnkgewoJCQkJY29uc3QgbGl2ZXMgPSBKU09OLnBhcnNlKHJlc3VsdCk7CgkJCQljb25zdCBvbmxpbmVzZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXNlcnNvbmxpbmUnKTsKCQkJCW9ubGluZXNlbC5pbm5lckhUTUwgPSAiPHAgZGF0YS10dGlwPSd0b3RhbDogIiArIGxpdmVzLmFsbF9vbmxpbmVzICsgIicgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjE0cHg7bWFyZ2luLWJvdHRvbTowcHg7bWFyZ2luLXRvcDowcHg7Jz5vbmxpbmVzICgiICsgbGl2ZXMubGl2ZS5sZW5ndGggKyAiKTwvcD48YnI+IiArIGxpdmVzLmxpdmUuam9pbigiLCAiKTsKCQkJfSBjYXRjaCAoZXJyb3IpIHsKCQkJCWNvbnNvbGUubG9nKGVycm9yLCByZXN1bHQpOwoJCQl9CgkJfSkKCQkuY2F0Y2goKGVycm9yKSA9PiB7CgkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCX0pOwp9CgpnX29ubGluZXMoKTsKCmNfaHIocGF0aCwgZmFsc2UsIHsgd2lkdGg6ICIyMDBweCIgfSk7CgpjX2J0bihwYXRoLCAib3BlbmRsZ2ZpbmR1c2VyIiwgInNlYXJjaCB1c2VyIiwgKCkgPT4gewoJc19tb2RhbCgiZmluZHVzZXJkbGciKTsKfSwgIkJ1c2NhIHVuIHVzdWFyaW8uIiwgeyBqdXN0aWZ5U2VsZjogImNlbnRlciIgfSk7CgpjX2JyKCk7CgpjX2RpYWxvZyhwYXRoLCAiZmluZHVzZXJkbGciLCB7fSwge30sIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5pZCwgInJuZCIsICJzZWFyY2ggdXNlciIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgoJY19icihjX2VsLmlkKTsKCgljX3RleHRib3goY19lbC5pZCwgImZpbmRfdXNlciIsIGZhbHNlLCAiIiwgIiIsIHt9LCB7CgkJcGF0dGVybjogIl5bYS16QS1aMC05XSokIiwKCQltaW5MZW5ndGg6IDMsCgkJbWF4TGVuZ3RoOiAyMCwKCQlyZXF1aXJlZDogdHJ1ZSwKCQlwbGFjZWhvbGRlcjogImFsaWFzIiwKCQlldmVudExpc3RlbmVyOiB7CgkJCWtleWRvd246IChlbCwgZXYpID0+IHsKCQkJCWlmIChldi5rZXkgPT09ICdFbnRlcicpIHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYnRuX2ZpbmRfdXNlciIpLmNsaWNrKCk7CgkJCQl9CgkJCX0KCQl9Cgl9LCB0cnVlKTsKCgljX2J0bihjX2VsLmlkLCAiYnRuX2ZpbmRfdXNlciIsICJmaW5kIiwgKCkgPT4gewoJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmluZF91c2VyIikudmFsaWRpdHkudmFsaWQpCgkJCWlmIChmdV9jb29sZG93biA+IGdfdG1faSgpKSB7CgkJCQlub3RpZnkoInJlY2VudGx5IHVzZWQsIHdhaXQgIiArIChmdV9jb29sZG93biAtIGdfdG1faSgpKSArICIgc2Vjb25kcyIsIDcwMDApOwoJCQkJcmV0dXJuOwoJCQl9CgkJZ2F0aGVyKCJpbmZvX2FsaWFzIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZpbmRfdXNlciIpLnZhbHVlKQoJCQkudGhlbigocmVzdWx0KSA9PiB7CgkJCQl0cnkgewoJCQkJCXZhciB1X2luZiA9IEpTT04ucGFyc2UocmVzdWx0KTsKCgkJCQkJaWYgKHVfaW5mWyJhdmF0YXIiXSkgewoJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcl9hdnRyIikuc3JjID0gd2luZG93LmF0b2IodV9pbmZbImF2YXRhciJdKTsKCQkJCQl9CgoJCQkJCXZhciB1c2VyX2RhdGEgPSAiIjsKCQkJCQl1c2VyX2RhdGEgKz0gIjxwIHN0eWxlPSdtYXJnaW4tdG9wOjBweDttYXJnaW4tYm90dG9tOjBweDsnPjxzdHJvbmc+QCIgKyB1X2luZlsiYWxpYXMiXTsKCgkJCQkJaWYgKHVfaW5mWyJyb2xlIl0pCgkJCQkJCXVzZXJfZGF0YSArPSAiPHNwYW4gc3R5bGU9J2Rpc3BsYXk6aW5saW5lO2ZvbnQtc2l6ZToxMHB4O2NvbG9yOiIgKyByb2xlY2xyW3VfaW5mWyJyb2xlIl0udG9Mb3dlckNhc2UoKV0gKyAiOyc+ICgiICsgdV9pbmZbInJvbGUiXSArICIpPC9zcGFuPjxicj48L3N0cm9uZz48L3A+IjsKCgkJCQkJaWYgKHVfaW5mWyJ1c2VyX2lkIl0pCgkJCQkJCXVzZXJfZGF0YSArPSAiPHAgc3R5bGU9J2ZvbnQtc2l6ZToxMHB4O21hcmdpbi10b3A6MHB4Oyc+dWlkOiAiICsgdV9pbmZbInVzZXJfaWQiXTsKCQkJCQllbHNlCgkJCQkJCXVzZXJfZGF0YSArPSAiPHAgc3R5bGU9J2ZvbnQtc2l6ZToxMHB4O21hcmdpbi10b3A6MHB4Oyc+YmV0YSI7CgoJCQkJCWlmICh1X2luZlsicmVnaXN0ZXJfdGltZSJdKQoJCQkJCQl1c2VyX2RhdGEgKz0gIiAtIGpvaW5lZDogIiArIGdfdG1fZHQodV9pbmZbInJlZ2lzdGVyX3RpbWUiXSwgMCkgKyAiPC9wPiI7CgkJCQkJZWxzZQoJCQkJCQl1c2VyX2RhdGEgKz0gIjwvcD4iOwoKCQkJCQlpZiAodV9pbmZbImRlc2NyaXB0aW9uIl0pCgkJCQkJCXVzZXJfZGF0YSArPSAiPHAgc3R5bGU9J2ZvbnQtc2l6ZToxMnB4O21hcmdpbi10b3A6IDBweDsnPmluZm86ICIgKyB3aW5kb3cuYXRvYih1X2luZlsiZGVzY3JpcHRpb24iXSkgKyAiPC9wPiI7CgkJCQkJZWxzZQoJCQkJCQl1c2VyX2RhdGEgKz0gIjxwIHN0eWxlPSdmb250LXNpemU6MTJweDttYXJnaW4tdG9wOiAwcHg7Jz5ubyBpbmZvPC9wPiIKCgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzZXJfaW5mIikuaW5uZXJIVE1MID0gdXNlcl9kYXRhOwoJCQkJfSBjYXRjaCAoZXJyb3IpIHsKCQkJCQlub3RpZnkocmVzdWx0LnJlcGxhY2UoL18vZywgIiAiKSwgNzAwMCk7CgkJCQkJaWYgKHJlc3VsdC5pbmNsdWRlcygicmVjZW50bHkiKSkgewoJCQkJCQlpZiAoZnVfY29vbGRvd24gPCBnX3RtX2koKSkKCQkJCQkJCWZ1X2Nvb2xkb3duID0gZ190bV9pKCkgKyAzMDsKCQkJCQl9CgkJCQl9CgkJCX0pCgkJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCQl9KTsKCX0sICIiLCB7IG1hcmdpbkxlZnQ6ICIxMHB4IiB9KTsKCgljX2J0bihjX2VsLmlkLCAiY2xvc2VmaW5kdXNlciIsICJjbG9zZSIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgbWFyZ2luTGVmdDogIjEwcHgiIH0pOwoKCWNfaHIoY19lbC5pZCwgZmFsc2UsIHsgd2lkdGg6ICIyMDBweCIgfSk7CgoJY19kaXYoY19lbC5pZCwgInVzZXJfaW5mYWxpYXMiLCB7CgkJZGlzcGxheTogImlubGluZS1ncmlkIiwKCQlncmlkVGVtcGxhdGVDb2x1bW5zOiAicmVwZWF0KDMsIDEwNXB4KSIsCgkJZ3JpZEdhcDogIjEwcHgiCgl9KTsKCgljX2JyKGNfZWwuaWQsIDIpOwoKCWNfaW1nKCJ1c2VyX2luZmFsaWFzIiwgInVzZXJfYXZ0ciIsIGRlZmF1bHRfYXZhdGFyLCA5MCwgOTAsCgkJewoJCQltYXJnaW5MZWZ0OiAiMTBweCIsCgkJCW9iamVjdEZpdDogImNvdmVyIiwKCQkJYm9yZGVyUmFkaXVzOiAiNXB4IiwKCQkJcGxhY2VTZWxmOiAibm9ybWFsIgoJCX0pOwoKCWNfYnIoY19lbC5pZCwgMik7CgoJY190ZXh0KCJ1c2VyX2luZmFsaWFzIiwgInVzZXJfaW5mIiwgIm5vbmUiLCB7CgkJZGlzcGxheTogImdyaWQiLCBncmlkVGVtcGxhdGVDb2x1bW5zOiAiMTYwcHgiLCBtYXJnaW5Ub3A6ICIwcHgiLAoJCWNvbG9yOiAid2hpdGUiCgl9KTsKfSk7Cgp2YXIgbGFzdF9tc2cgPSAwOwp2YXIgZmlyc3Rfc25kID0gMDsKCmZ1bmN0aW9uIHBfc291bmQoaWQpIHsKCWlmIChmaXJzdF9zbmQgPT0gMCkgewoJCWZpcnN0X3NuZCsrOwoJfQoJZWxzZSB7CgkJdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CgkJZWxlbWVudC52b2x1bWUgPSAwLjE7CgkJZWxlbWVudC5wbGF5KCk7Cgl9Cn0KCmZ1bmN0aW9uIHVfY2hhdCgpIHsKCWlmICghaGFzX2FsaWFzKSB7CgkJY29uc3QgY2hhdENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGF0LWNvbnRhaW5lcicpOwoJCWNoYXRDb250YWluZXIuaW5uZXJIVE1MID0gJyc7CgkJY29uc3QgY2hhdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQljaGF0RWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICIxMnB4IjsKCQljaGF0RWxlbWVudC5pbm5lckhUTUwgPSBgKDxzcGFuIGRhdGEtdHRpcD0nJHtnX3RtX2R0KHBhcnNlSW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCksIDApfScgc3R5bGU9Im9wYWNpdHk6IDAuNTsiPiR7Z190bV9kdChwYXJzZUludChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApKX08L3NwYW4+KSA8c3BhbiBzdHlsZT0nJHsoImNvbG9yOiIgKyAoT2JqZWN0LmVudHJpZXMocm9sZWNscilbNF1bIjEiXSkgKyAiOyIpfSc+PHN0cm9uZz5aSU5DPC9zdHJvbmc+PC9zcGFuPjogY2hhdCBkaXNhYmxlZCB0byBkZWZhdWx0IGFsaWFzZXMsIGNoYW5nZSB5b3VyIGFsaWFzIGluIHRoZSByaWdodCBwYW5lbGA7CgkJY2hhdENvbnRhaW5lci5hcHBlbmRDaGlsZChjaGF0RWxlbWVudCk7CgkJcmV0dXJuOwoJfQoKCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibGVmdF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPT0gIm5vbmUiKQoJCXJldHVybjsKCglnYXRoZXIoImdldF9jaGF0IiwgInoiKQoJCS50aGVuKChyZXN1bHQpID0+IHsKCQkJY29uc3QgY2hhdHMgPSBKU09OLnBhcnNlKHJlc3VsdCk7CgkJCWNvbnN0IGNoYXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdC1jb250YWluZXInKTsKCQkJY2hhdENvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsKCgkJCWxldCBoaWdoZXN0X3RzID0gMDsKCQkJY2hhdHMuZm9yRWFjaChhc3luYyAoY2hhdCkgPT4gewoKCQkJCWlmICghY2hhdC5tc2cuaW5jbHVkZXMoImRpc2FibGVkIikpCgkJCQkJaWYgKGhpZ2hlc3RfdHMgPCBjaGF0LnRzKQoJCQkJCQloaWdoZXN0X3RzID0gY2hhdC50czsKCgkJCQljb25zdCBjaGF0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQkJY2hhdEVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSAiMTJweCI7CgoJCQkJaWYgKCFjaGF0Lm1zZy5pbmNsdWRlcygiZGlzYWJsZWQiKSkKCQkJCQljaGF0RWxlbWVudC5pbm5lckhUTUwgPSBgKDxzcGFuIGRhdGEtdHRpcD0nJHtnX3RtX2R0KGNoYXQudHMsIDApfScgc3R5bGU9Im9wYWNpdHk6IDAuNTsiPiR7Z190bV9kdChjaGF0LnRzKX08L3NwYW4+KSA8c3BhbiBzdHlsZT0nJHtjaGF0LnIgIT0gdW5kZWZpbmVkID8gKCJjb2xvcjoiICsgKE9iamVjdC5lbnRyaWVzKHJvbGVjbHIpW2NoYXQucl1bIjEiXSkgKyAiOyIpIDogIiJ9Jz48c3Ryb25nPiR7Y2hhdC51fTwvc3Ryb25nPjwvc3Bhbj46ICR7d2luZG93LmF0b2IoY2hhdC5tc2cpfWA7CgkJCQllbHNlCgkJCQkJY2hhdEVsZW1lbnQuaW5uZXJIVE1MID0gYCg8c3BhbiBkYXRhLXR0aXA9JyR7Z190bV9kdChjaGF0LnRzLCAwKX0nIHN0eWxlPSJvcGFjaXR5OiAwLjU7Ij4ke2dfdG1fZHQoY2hhdC50cyl9PC9zcGFuPikgPHNwYW4gc3R5bGU9JyR7Y2hhdC5yICE9IHVuZGVmaW5lZCA/ICgiY29sb3I6IiArIChPYmplY3QuZW50cmllcyhyb2xlY2xyKVtjaGF0LnJdWyIxIl0pICsgIjsiKSA6ICIifSc+PHN0cm9uZz4ke2NoYXQudX08L3N0cm9uZz48L3NwYW4+OiAke2NoYXQubXNnfWA7CgoJCQkJY2hhdENvbnRhaW5lci5hcHBlbmRDaGlsZChjaGF0RWxlbWVudCk7CgoJCQkJY19ocigiY2hhdC1jb250YWluZXIiLCBmYWxzZSwgewoJCQkJCW9wYWNpdHk6ICIwLjIiLAoJCQkJCXBhZGRpbmdUb3A6ICIwcHgiLAoJCQkJCXBhZGRpbmdCb3R0b206ICIwcHgiLAoJCQkJfSk7CgkJCX0pOwoKCQkJaWYgKGxhc3RfbXNnICE9IGhpZ2hlc3RfdHMpIHsKCQkJCXBfc291bmQoInNuZDEiKTsKCQkJCWxhc3RfbXNnID0gaGlnaGVzdF90czsKCQkJfQoJCX0pCgkJLmNhdGNoKChlcnJvcikgPT4gewoJCQljb25zb2xlLmVycm9yKGVycm9yKTsKCQl9KTsKfQoKdmFyIHBhdGggPSAibWFpbl9lbGVtZW50cyI7Cgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGl0bGVfaWQiKS5pbm5lclRleHQgPSAiWklOQyI7CgpjX3RhYl9idXR0b24oImVsZW1lbnRfcmlnaHRfYnV0dG9ucyIsIFsKCXsgaWQ6ICJwX3VwZGF0ZXMiLCB0ZXh0OiAibG9ncyIgfSwKCXsgaWQ6ICJwX3RpY2tldHMiLCB0ZXh0OiAidGlja2V0cyIgfSwKCXsgaWQ6ICJwX3Byb2ZpbGUiLCB0ZXh0OiAicHJvZmlsZSIgfQpdLCAyKTsKCi8qU1RBUlQgRkVBVFVSRVMqLwpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJvZHVjdF9pZCIpLmlubmVyVGV4dCA9ICJjb2xvcmJvdCI7CgpjX3RhYl9idXR0b24oImVsZW1lbnRfYnV0dG9ucyIsIFsKCXsgaWQ6ICJtYWluX3RhYiIsIHRleHQ6ICJtYWluIiB9LAoJeyBpZDogInFyY29kZV90YWIiLCB0ZXh0OiAiUVIiIH0sCgl7IGlkOiAic2V0dGluZ3NfdGFiIiwgdGV4dDogImNmZyIgfSwKXSk7CgpjX2NoZWNrYm94KHBhdGgsICJjb2xvcmJvdCIsICJlbmFibGVkIiwgIkFjdGl2YSBlbCBmdW5jaW9uYW1pZW50byBkZWwgY29sb3Jib3QuIik7CmNfY3VzdG9tc2V0dGluZ3MocGF0aCwgInJuZCIsICJleHRyYSBvcHRpb25zIiwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmNpZCwgInJuZCIsICJPcHRpb25zIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCgljX2NvbWJvYm94KGNfZWwuY2lkLCAibWFpbl9rZXkiLCAibWFpbiBrZXkiLCAtMTAwMDAwLCAxMDAwMDAsIGZhbHNlLCAiTGEgS2V5IHByaW5jaXBhbCBjb24gbGEgY3VhbCBzZSBhY3RpdmEgZWwgYWltLiIpOwoJY19jb21ib2JveChjX2VsLmNpZCwgInNlY29uZGFyeV9rZXkiLCAic2Vjb25kYXJ5IGtleSIsIC0xMDAwMDAsIDEwMDAwMCwgZmFsc2UsICJMYSBLZXkgc2VjdW5kYXJpYSBjb24gbGEgY3VhbCBzZSBhY3RpdmEgZWwgYWltLiIpOwoJY19jb21ib2JveChjX2VsLmNpZCwgImRpc2FibGVfc2Vjb25kYXJ5X2tleSIsICJkaXNhYmxlIGtleSIsIC0xMDAwMDAsIDEwMDAwMCwgZmFsc2UsICJMYSBLZXkgY29uIGxhIGN1YWwgc2UgZGVzYWN0aXZhIGVsIGFpbS4iKTsKCWNfaHIoY19lbC5jaWQpOwoJY19jb21ib2JveChjX2VsLmNpZCwgInR5cGVfZm9ybWF0IiwgImZvcm1hdCIsIDAsIDQsIGZhbHNlLCAiRGlzdGludG9zIG1ldG9kb3MgcGFyYSBlc2NhbmVhci9wcm9jZXNhciBsb3MgY29sb3Jlcy4iKTsKCWNfY29tYm9ib3goY19lbC5jaWQsICJjb2xvcl90eXBlIiwgImNvbG9ycyIsIDAsIDUsIGZhbHNlLCAiRWwgY29sb3Igc2VsZWNjaW9uYWRvIGVzIGVuIGVsIGN1YWwgc2UgYmFzYXJhIGVsIGFpbWJvdCIpOwoJY19jb21ib2JveChjX2VsLmNpZCwgInNvcnRfbWV0aG9kIiwgIm1ldGhvZHMiLCAwLCA5LCBmYWxzZSwgIkRpc3RpbnRvcyBtZXRvZG9zIHBhcmEgcXVlIGVsIGFpbWJvdCBhcHVudGUsIHNlIHJlY29taWVuZGEgZWwgQkVTVC4iKTsKCgljX2J0bihjX2VsLmNpZCwgInJuZCIsICJjbG9zZSIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmNpZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0sIHsgY29sb3I6ICJ3aGl0ZSIsIHdpZHRoOiAiMzUwcHgiIH0pOwoKY19jaGVja2JveChwYXRoLCAiZGluYW1pY19zbW9vdGgiLCAiZGluYW1pYyBzbW9vdGgiLCAiQWwgYWN0aXZhcmxvLCBibG9xdWVhIGVsIHNtb290aCBwcmluY2lwYWwuIik7CmNfY3VzdG9tc2V0dGluZ3MocGF0aCwgInJuZCIsICJleHRyYSBvcHRpb25zIiwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmNpZCwgInJuZCIsICJPcHRpb25zIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCgljX2NvbWJvYm94KGNfZWwuY2lkLCAiZGluYW1pY19zbW9vdGhfdHlwZSIsICJkaW5hbWljIHNtb290aCB0eXBlIiwgLTEwMDAwMCwgMTAwMDAwLCBmYWxzZSwgIkFjb21vZGEgZWwgc21vb3RoIGRpbmFtaWNhbWVudGUgZGVwZW5kaWVuZG8gbGEgZGlzdGFuY2lhIGRlbCBlbmVtaWdvIik7CgoJY19idG4oY19lbC5jaWQsICJybmQiLCAiY2xvc2UiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5jaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9LCB7IGNvbG9yOiAid2hpdGUiLCB3aWR0aDogIjM1MHB4IiB9KTsKCmNfaHIocGF0aCwgZmFsc2UsIHsgd2lkdGg6ICIyMDBweCIgfSk7CgpjX3NfaW50KHBhdGgsICd0YXJnZXRfb2Zmc2V0X3gnLCAib2Zmc2V0IFgiLCAwLCA1MCwgMSwgMCwgIkN1YW50byBtYXMgdmFsb3IgdGVuZ2EsIG1hcyBzZSBkZXNwbGF6YSBhIGxhIGRlcmVjaGEgZGVsIHRhcmdldCBpbmljaWFsLiIpOwpjX3NfaW50KHBhdGgsICJ0YXJnZXRfb2Zmc2V0X3kiLCAib2Zmc2V0IFkiLCAwLCA1MCwgMSwgNSwgIkN1YW50byBtYXMgdmFsb3IgdGVuZ2EsIG1hcyBzZSBkZXNwbGF6YSBhIGFiYWpvIGRlbCB0YXJnZXQgaW5pY2lhbC4iKTsKCmNfaHIocGF0aCwgZmFsc2UsIHsgd2lkdGg6ICIyMDBweCIgfSk7CgpjX3NfZmxvYXQocGF0aCwgInNwZWVkIiwgInNtb290aCIsIDAuMCwgMTUuMCwgMC4xLCAyLjAsICJTdWF2aWRhZCBkZWwgYXB1bnRhZG8sIG1pZW50cmFzIG1hcyB0ZW5nYSwgbWFzIHN1YXZlIHNlIHZlIGVsIG1vdmltaWVudG8uIik7CmNfc19pbnQocGF0aCwgImZvdl94IiwgIkZvdiBYIiwgNSwgNTAwLCA1LCA1MCwgIlJhbmdvL0ZvdiBob3Jpem9udGFsLCBtaWVudHJhcyBtYXMgdGVuZ2EsIG1hcyBhIGxvIGFuY2hvIGVzY2FuZWFyYS4iKTsKY19zX2ludChwYXRoLCAiZm92X3kiLCAiRm92IFkiLCA1LCAyNTAsIDUsIDUwLCAiUmFuZ28vRm92IHZlcnRpY2FsLCBtaWVudHJhcyBtYXMgdGVuZ2EsIG1hcyBhIGxvIGFsdG8gZXNjYW5lYXJhLiIpOwoKY19ocihwYXRoLCBmYWxzZSwgeyB3aWR0aDogIjIwMHB4IiB9KTsKCmNfY2hlY2tib3gocGF0aCwgInJlY29pbCIsICJyZWNvaWwiLCAiQmFqYXJhIGVsIGNyb3NzaGFpciBhIGxhIGhvcmEgZGUgZGlzcGFyYXIgY29uIGxhIE1BSU4ga2V5LiIpOwpjX2N1c3RvbXNldHRpbmdzKHBhdGgsICJybmQiLCAiZXh0cmEgb3B0aW9ucyIsIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5jaWQsICJybmQiLCAiT3B0aW9ucyIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgoJY19jaGVja2JveChjX2VsLmNpZCwgInJjc19jcm91Y2hfb25seSIsICJjcm91Y2ggb25seSIsICJTb2xvIGZ1bmNpb25hcmEgc2kgZXN0YW1vcyBhcHJldGFuZG8gQ1RSTC4iKTsKCWNfc19pbnQoY19lbC5jaWQsICJyZWNvaWxfZGVsYXkiLCAiZGVsYXkiLCA1LCA1MDAsIDUsIDIwMCwgIkRlbGF5IHBhcmEgY2FkYSBiYWphZGEgZGVsIHJjcy4iLCBkc3R5bGVzLnNsaWRlcnMpOwoJY19zX2ludChjX2VsLmNpZCwgInJlY29pbF9zdHJlbmdodCIsICJzdHJlbmdodCIsIDEsIDUwLCAxLCAyLCAiRnVlcnphIChQWCkgcXVlIGJhamFyYSBlbCByY3MgY2FkYSBEZWxheS4iLCBkc3R5bGVzLnNsaWRlcnMpOwoJY19zX2ludChjX2VsLmNpZCwgIm1heF9yZWNvaWxfb2Zmc2V0IiwgIm1heCBvZmZzZXQiLCAxLCA1MCwgMSwgMiwgIkNhbnRpZGFkIG1heGltYSBkZSBwaXhlbGVzIHF1ZSBiYWphcmEgZWwgcmNzLiIsIGRzdHlsZXMuc2xpZGVycyk7CgoJY19idG4oY19lbC5jaWQsICJybmQiLCAiY2xvc2UiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5jaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9LCB7IGNvbG9yOiAid2hpdGUiLCB3aWR0aDogIjM1MHB4IiB9KTsKCmNfaHIocGF0aCwgZmFsc2UsIHsgd2lkdGg6ICIyMDBweCIgfSk7CgpjX2NoZWNrYm94KHBhdGgsICJ0cmlnZ2VyYm90IiwgInRyaWdnZXJib3QiLCAiRGlzcGFyYXJhIGF1dG9tYXRpY2FtZW50ZSBjdWFuZG8gZWwgQ09MT1IgcGFzZSBwb3IgZWwgY3Jvc3NoYWlyLiIpOwpjX2N1c3RvbXNldHRpbmdzKHBhdGgsICJybmQiLCAiZXh0cmEgb3B0aW9ucyIsIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5jaWQsICJybmQiLCAiT3B0aW9ucyIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgoJY19jaGVja2JveChjX2VsLmNpZCwgImRpc2FibGVfYWltX29uX3RyaWdnZXIiLCAiZGlzYWJsZSBhaW0iLCAiRGVzaGFiaWxpdGEgZWwgYWltIGN1YW5kbyBlc3RhIHByZXNpb25hZG8gZWwgdHJpZ2dlci4iKTsKCWNfY29tYm9ib3goY19lbC5jaWQsICJ0cmlnZ2VyX3R5cGUiLCAidHlwZSIsIC0xMDAwMDAsIDEwMDAwMCwgZmFsc2UpOwoJY19jb21ib2JveChjX2VsLmNpZCwgInRyaWdnZXJfa2V5IiwgInRyaWdnZXIga2V5IiwgLTEwMDAwMCwgMTAwMDAwLCBmYWxzZSwgIkxhIEtleSBjb24gbGEgY3VhbCBzZSBhY3RpdmEgZWwgVFJJR0dFUi4iKTsKCWNfYnIoY19lbC5jaWQpOwoJY19zX2ludChjX2VsLmNpZCwgInRyaWdnZXJfcmFkaXVzIiwgImZvdiIsIDEsIDUwLCAxLCAxNSwgIlJhbmdvL0ZvdiBwYXJhIGRldGVjdGFyIGRlc2RlIGVsIGNlbnRybyBkZSBsYSBtaXJhLCBtaWVudHJhcyBtYXMgdGVuZ2EgbWFzIGltcHJlY2lzby4iLAoJCWRzdHlsZXMuc2xpZGVycyk7CgljX3NfaW50KGNfZWwuY2lkLCAidHJpZ2dlcl9kZWxheSIsICJkZWxheSIsIDUsIDU1MCwgNSwgMjUwLCAiRGVsYXkgcGFyYSBjYWRhIGRpc3Bhcm8uIiwgZHN0eWxlcy5zbGlkZXJzKTsKCgljX2J0bihjX2VsLmNpZCwgInJuZCIsICJjbG9zZSIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmNpZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0sIHsgY29sb3I6ICJ3aGl0ZSIsIHdpZHRoOiAiMzUwcHgiIH0pOwoKY19ocihwYXRoLCBmYWxzZSwgeyB3aWR0aDogIjIwMHB4IiB9KTsKCmNfY2hlY2tib3gocGF0aCwgImJob3BfdG9nZ2xlIiwgImJob3AiLCAiQWwgYWN0aXZhcmxvLCBkZWJlcyBiaW5kZWFyIGxhIGtleSBYQnV0dG9uMiBvIE1vdXNlNSBhbCBiaG9wIGVuIHZleiBkZWwgZXNwYWNpby4iKTsKY19jdXN0b21zZXR0aW5ncyhwYXRoLCAicm5kIiwgImV4dHJhIG9wdGlvbnMiLCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuY2lkLCAicm5kIiwgIk9wdGlvbnMiLCBkc3R5bGVzLmRpYWd0aXRsZXMpOwoKCWNfc19pbnQoY19lbC5jaWQsICJiaG9wX2RlbGF5IiwgImJob3AgZGVsYXkiLCA1LCAyMDAsIDUsIDIwMCwgIkRlbGF5IGVudHJlIGNhZGEgc2FsdG8uIiwKCQl7IHR0aXBzOiB7IGNvbG9yOiAid2hpdGUiIH0sIHRpdGxlejogeyBjb2xvcjogIndoaXRlIiB9LCBiZ3o6IHsgY29sb3I6ICJ3aGl0ZSIgfSB9KTsKCgljX2J0bihjX2VsLmNpZCwgInJuZCIsICJjbG9zZSIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmNpZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0sIHsgd2lkdGg6ICIzNTBweCIgfSk7CgpjX2hyKHBhdGgsIGZhbHNlLCB7IHdpZHRoOiAiMjAwcHgiIH0pOwoKY19zX2ludChwYXRoLCAiY3VzdG9tX3NsZWVwIiwgInNsZWVwICdtcyciLCAxLCAyMDAsIDEsIDIwMCwgIk1pbGlzZWd1bmRvcyBwYXJhIGFjdHVhbGl6YXIgZWwgY29sb3Jib3QsIG1pZW50cmFzIG1hcyB2YWxvciwgbWFzIHRhcmRhcmEgZW4gYWN0dWFsaXphci4iKTsKY19zX2ludChwYXRoLCAiYWNjZXB0YWJsZV9hcmVhIiwgImFjY2VwdGFibGUgYXJlYSIsIDUsIDIwMCwgNSwgMjAwLCAiQXJlYSBhY2VwdGFibGUgcGFyYSBlbCBmb3JtYXRvIHB5ICh0ZXN0KS4iKTsKCmZfY29tYm8oInRyaWdnZXJfdHlwZSIsICJ0cmlnZ2VyX3R5cGUiKTsKZl9jb21ibygiZGluYW1pY19zbW9vdGhfdHlwZSIsICJkaW5hbWljX3Ntb290aF90eXBlIik7CmZfY29tYm8oImNvbG9yX3R5cGUiLCAiY29sb3JzIik7CmZfY29tYm8oInNvcnRfbWV0aG9kIiwgIm1ldGhvZHMiKTsKZl9jb21ibygidHlwZV9mb3JtYXQiLCAiZm9ybWF0cyIpOwoKY29uc3QgYmluZF9lbGVtZW50cyA9IFsKCXsgaWQ6ICJtYWluX2tleSIsIHRhcmdldDogIm1haW5fa2V5IiB9LAoJeyBpZDogInNlY29uZGFyeV9rZXkiLCB0YXJnZXQ6ICJzZWNvbmRhcnlfa2V5IiB9LAoJeyBpZDogInRyaWdnZXJfa2V5IiwgdGFyZ2V0OiAidHJpZ2dlcl9rZXkiIH0sCgl7IGlkOiAiZGlzYWJsZV9zZWNvbmRhcnlfa2V5IiwgdGFyZ2V0OiAiZGlzYWJsZV9zZWNvbmRhcnlfa2V5IiB9LApdOwoKLypFTkQgRkVBVFVSRVMqLwoKZl9jb21ibygiYWxsX3Byb2ZpbGVzIiwgImFsbF9wcm9maWxlcyIpOwoKcGF0aCA9ICJlbGVtZW50c19jZmdiIjsKCmNfY2hlY2tib3gocGF0aCwgImF1dG9fdXBkYXRlX21lbnUiLCAiQXV0by11cGRhdGUgbWVudSIsICJTZSBhY3R1YWxpemFyYSBsYSBwYWdpbmEgYXV0b21hdGljYW1lbnRlIGNhZGEgNSBzZWd1bmRvcyBlbiBjYXNvIGRlIHF1ZSBoYXlhIGNhbWJpb3MgZGVzZGUgb3RyYSBwYWdpbmEuIiwgKGNfZWwpID0+IHsKCWFsbG93X2F1ID0gZWwuY2hlY2tlZDsKfSk7CgpjX2hyKCk7CmNfdGV4dChwYXRoLCAicm5kIiwgIiYjOTY3OTsgY2xvdWQgcHJvZmlsZXMiLCBkc3R5bGVzLnN1YnRpdGxlcyk7CgpjX2J0bihwYXRoLCAiYnRuX3N2X3Byb2ZpbGUiLCAiY3JlYXRlIHByb2ZpbGUiLCAoKSA9PiB7CglzX21vZGFsKCJkbGdfY3JlYXRlX3Byb2YiKTsKfSwgIkd1YXJkYSB0dSBwZXJmaWwgYWN0dWFsIGVuIGVsIHNlcnZpZG9yLCBlbCBjdWFsIHB1ZWRlcyBjYXJnYXIiLCB7IG1hcmdpblJpZ2h0OiAiNXB4IiB9KTsKCmNfZGlhbG9nKCdlbGVtZW50X2NvbmZpZycsICdkbGdfY3JlYXRlX3Byb2YnLCB7fSwge30sIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5pZCwgInJuZCIsICJDbG91ZCBwcm9maWxlIGNyZWF0b3IuIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCgljX3RleHRib3goY19lbC5pZCwgImNwcm9maWxlbmFtZSIsIGZhbHNlLCAicHJvZmlsZSBuYW1lICIsICIiLCB7CgkJcmVzaXplOiAnbm9uZScsCgkJb3ZlcmZsb3c6ICdoaWRkZW4nLAoJCXdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsCgkJbWFyZ2luVG9wOiAiNXB4IiwKCQljb2xvcjogIndoaXRlIiwgbGFiZWx6OiB7IGNvbG9yOiAid2hpdGUiIH0KCX0sIHsKCQlwYXR0ZXJuOiAiXlthLXpBLVowLTldKiQiLAoJCW1pbkxlbmd0aDogMSwKCQltYXhMZW5ndGg6IDE2LAoJCXBsYWNlaG9sZGVyOiAibmFtZSIsCgkJcmVxdWlyZWQ6IHRydWUsCgl9KTsKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY3JlYXRlIiwgKCkgPT4gewoJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY3Byb2ZpbGVuYW1lIikudmFsaWRpdHkudmFsaWQpIHsKCQkJdmFyIHRpY2tldF9pbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNwcm9maWxlbmFtZSIpLnZhbHVlOwoJCQl2YXIgdGlja2V0X3JlYXNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjcHJvZmlsZW5hbWUiKS52YWx1ZTsKCgkJCXNfYnRuKCJzYXZlX3Byb2ZpbGUiLCB0aWNrZXRfcmVhc29uICsgIi0iICsgdGlja2V0X2luZm8pCgkJCQkudGhlbigoclR4dCkgPT4gewoJCQkJCW5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgIiAiKSwgNzAwMCk7CgkJCQl9KQoJCQkJLmNhdGNoKChlcnJvcikgPT4gewoJCQkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCQkJfSk7CgkJfQoJCWVsc2UgewoJCQlub3RpZnkoIk5vIHNlIGFjZXB0YW4gY2FyYWN0ZXJlcyBlc3BlY2lhbGVzLCBkZSAxIGEgMTYgY2FyYWN0ZXJlcyBzb2xhbWVudGUuIiwgNTAwMCwgIlJFRCIpOwoJCX0KCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7CgljX2J0bihjX2VsLmlkLCAicm5kIiwgImNhbmNlbCIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiB9KTsKfSk7CgpjX2J0bihwYXRoLCAiYnRuX3Byb2ZpbGVfbGlzdCIsICJwcm9maWxlIGxpc3QiLCAoKSA9PiB7CglzX21vZGFsKCJkbGdfcHJvZl9saXN0Iik7CgoJc19idG4oInByb2ZpbGVfbGlzdCIpCgkJLnRoZW4oKHJUeHQpID0+IHsKCQkJdHJ5IHsKCQkJCWNvbnNvbGUubG9nKHJUeHQpOwoJCQkJdmFyIHJlc2pzb24gPSBKU09OLnBhcnNlKHJUeHQpOwoKCQkJCWlmIChyZXNqc29uLmxlbmd0aCA9PSAwKSB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVfcHJvZmlsZV9saXN0IikuaW5uZXJIVE1MID0gIm5vIHByb2ZpbGVzIjsKCQkJCQlub3RpZnkoInVzZXIgaGFzIG5vIHByb2ZpbGVzIiwgNzAwMCk7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXZhciB0b190aWNrZXRzID0gIiI7CgkJCQlmb3IgKGNvbnN0IGtleSBpbiByZXNqc29uKSB7CgkJCQkJaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc2pzb24sIGtleSkpIHsKCQkJCQkJY29uc3QgZWxlbWVudCA9IHJlc2pzb25ba2V5XTsKCQkJCQkJdG9fdGlja2V0cyArPSAiPC90cj4iOwoJCQkJCQl0b190aWNrZXRzICs9ICI8dGQ+IiArIGtleSArICI8L3RkPiI7CgkJCQkJCXRvX3RpY2tldHMgKz0gIjx0ZD4iICsgZ190bV9kdChlbGVtZW50WyJ0aW1lc3RhbXAiXSwgMikgKyAiPC90ZD4iOwoJCQkJCQkvKnRvX3RpY2tldHMgKz0gIjx0ZD4iICsgZWxlbWVudFsic3RhdHVzIl0gKyAiPC90ZD4iOyovCgkJCQkJCS8vKi8KCQkJCQkJdG9fdGlja2V0cyArPSAiPHRkPiI7CgkJCQkJCXRvX3RpY2tldHMgKz0gIjxidXR0b24gY2xhc3M9J25ld2J1dHRvbicgdGl0bGU9J2xvYWQgcHJvZmlsZScgc3R5bGU9J2hlaWdodDozMHB4O3dpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7JyBvbmNsaWNrPVwic19idG4oJ2dldF9wcm9maWxlJywgJyIgKyBrZXkgKyAiJykudGhlbihhc3luYyAoclR4dCk9PiB7IG5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgJyAnKSwgNzAwMCk7YXdhaXQgbGl2ZV9zZXJ2ZXIoKTtmX2NvbWJvKCdhbGxfcHJvZmlsZXMnLCAnYWxsX3Byb2ZpbGVzJyk7Zl9jb21ibygnYWxsX3Byb2ZpbGVzMicsICdhbGxfcHJvZmlsZXMnKTt9KS5jYXRjaCggKGVycm9yKT0+IHtjb25zb2xlLmVycm9yKGVycm9yKTt9KTtcIj48aSBjbGFzcz0nZmEgZmEtcGxheScgYXJpYS1oaWRkZW49J3RydWUnPjwvaT48L2J1dHRvbj4iOwoJCQkJCQl0b190aWNrZXRzICs9ICI8YnV0dG9uIGNsYXNzPSduZXdidXR0b24nIHRpdGxlPSdzYXZlL292ZXJyaWRlIHByb2ZpbGUnIHN0eWxlPSdtYXJnaW4tbGVmdDoycHg7aGVpZ2h0OjMwcHg7d2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsnIG9uY2xpY2s9XCJpZighY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoaXMgY2xvdWQgcHJvZmlsZSB3aXRoIHlvdXIgY3VycmVudCBwcm9maWxlPycpKSByZXR1cm47IHNfYnRuKCdzYXZlX3Byb2ZpbGUnLCAnIiArIGtleSArICInKS50aGVuKGFzeW5jICAoclR4dCk9PiB7IG5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgJyAnKSwgNzAwMCk7fSkuY2F0Y2goIChlcnJvcikgPT57Y29uc29sZS5lcnJvcihlcnJvcil9KVwiPjxpIGNsYXNzPSdmYSBmYS1mbG9wcHktbycgYXJpYS1oaWRkZW49J3RydWUnPjwvaT48L2J1dHRvbj4iOwoJCQkJCQkvKnRvX3RpY2tldHMgKz0gIjxidXR0b24gY2xhc3M9J25ld2J1dHRvbicgdGl0bGU9J2NoYW5nZSBzdGF0dXMnIHN0eWxlPSdtYXJnaW4tbGVmdDoycHg7aGVpZ2h0OjMwcHg7d2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsnIG9uY2xpY2s9XCJzX2J0bignY3ByX3N0YXR1cycsICciICsga2V5ICsgIicpLnRoZW4oYXN5bmMgIChyVHh0KT0+IHsgbm90aWZ5KHJUeHQucmVwbGFjZSgvXy9nLCAnICcpLCA3MDAwKTt9KS5jYXRjaCggKGVycm9yKT0+IHtjb25zb2xlLmVycm9yKGVycm9yKTt9KTtcIj48aSBjbGFzcz0nZmEgZmEtZXllJyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PC9pPjwvYnV0dG9uPiI7Ki8KCgkJCQkJCXRvX3RpY2tldHMgKz0gIjwvdGQ+IjsKCQkJCQkJLy8qLwoJCQkJCQl0b190aWNrZXRzICs9ICI8L3RyPiI7CgkJCQkJfQoJCQkJfQoKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1X3Byb2ZpbGVfbGlzdCIpLmlubmVySFRNTCA9IGA8YnI+CgkJCQk8dHI+CgkJCQk8dGg+bmFtZTwvdGg+CgkJCQk8dGggc3R5bGU9ImN1cnNvcjpwb2ludGVyOyIgb25jbGljaz0ic29ydF90YWJsZSgxLCAndV9wcm9maWxlX2xpc3QnKSI+bGFzdCBzYXZlZDwvdGg+CgkJCQk8IS0tPHRoPnN0YXR1czwvdGg+LS0+CgkJCQk8dGg+b3B0aW9uczwvdGg+CgkJCQk8L3RyPgoJCQkJYDsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1X3Byb2ZpbGVfbGlzdCIpLmlubmVySFRNTCArPSB0b190aWNrZXRzOwoJCQl9IGNhdGNoIChlcnJvcikgewoJCQkJY29uc29sZS5sb2coZXJyb3IpOwoJCQkJaWYgKHJUeHQuaW5jbHVkZXMoIl8iKSkgewoJCQkJCW5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgIiAiKSwgNzAwMCk7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQl9CgkJfSkKCQkuY2F0Y2goKGVycm9yKSA9PiB7CgkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCX0pOwp9LCAiTXVlc3RyYSB0dXMgcGVyZmlsZXMgY3JlYWRvcyIpOwoKY19kaWFsb2coJ2VsZW1lbnRfY29uZmlnJywgJ2RsZ19wcm9mX2xpc3QnLCB7fSwge30sIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5pZCwgInJuZCIsICJDbG91ZCBwcm9maWxlcy4iLCBkc3R5bGVzLmRpYWd0aXRsZXMpOwoJY190ZXh0Ym94KGNfZWwuaWQsICJmaW5kX3ByX3RibGlzdCIsIGZhbHNlLCAiIiwgIiIsIHt9LCB7CgkJcmVxdWlyZWQ6IGZhbHNlLAoJCXBsYWNlaG9sZGVyOiAic2VhcmNoIHByb2ZpbGUiLAoJCWV2ZW50TGlzdGVuZXI6IHsKCQkJaW5wdXQ6ICgpID0+IHsKCQkJCXNlYXJjaF90YWJsZSgnZmluZF9wcl90Ymxpc3QnLCAndV9wcm9maWxlX2xpc3QnKTsKCQkJfQoJCX0KCX0sIHRydWUpOwoKCWNfZGl2KGNfZWwuaWQsICJybmQiLCB7IG1heEhlaWdodDogIjM1MHB4Iiwgb3ZlcmZsb3c6ICJhdXRvIiB9LCB7fSwgKGNfZWwyKSA9PiB7CgkJY190YWJsZShjX2VsMi5pZCwgInVfcHJvZmlsZV9saXN0IiwgIiIsIHsgY29sb3I6ICJ3aGl0ZSIsIHdpZHRoOiAiMTAwJSIgfSk7Cgl9KTsKCgljX2J0bihjX2VsLmlkLCAicm5kIiwgImNsb3NlIiwgKCkgPT4gewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9KTsKCmNfaHIoKTsKCmNfdGV4dChwYXRoLCAicm5kIiwgIiYjOTY3OTsgbG9jYWwgcHJvZmlsZXMiLCBkc3R5bGVzLnN1YnRpdGxlcyk7CgpjX2NvbWJvYm94KHBhdGgsICJhbGxfcHJvZmlsZXMiLCAicHJvZmlsZSIsIDAsIDIwLCBmYWxzZSwgIlBlcmZpbGVzIHBhcmEgY2FkYSBzaXR1YWNpb24uIiwgYXN5bmMgKGNfZWwpID0+IHsKCWF3YWl0IGxpdmVfc2VydmVyKCk7Cn0sIHsgbWluV2lkdGg6ICIxODBweCIgfSk7CgpjX3RleHRib3gocGF0aCwgInByb2ZpbGVfbmFtZV9jIiwgZmFsc2UsICIiLCAiNC05IGNoYXJhY3RlcnMuIiwgeyBtYXJnaW5MZWZ0OiAiNXB4Iiwgd2lkdGg6ICIxNTBweCIgfSwgewoJcGF0dGVybjogIl5bYS16QS1aMC05XSokIiwKCW1pbkxlbmd0aDogMywKCW1heExlbmd0aDogOSwKCXJlcXVpcmVkOiBmYWxzZSwKfSwgdHJ1ZSk7CgpjX2J0bihwYXRoLCAiYnRuX3Byb2ZpbGVfY2hhbmdlIiwgImNoYW5nZSBuYW1lIiwgYXN5bmMgKCkgPT4gewoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9maWxlX25hbWVfYyIpLnZhbGlkaXR5LnZhbGlkKSB7CgkJdmFyIHByb2ZfdmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJvZmlsZV9uYW1lX2MiKS52YWx1ZTsKCQlzX2luZm8oInByb2ZpbGVfbmFtZSIsIHByb2ZfdmFsdWUpOwoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9maWxlX25hbWVfYyIpLnZhbHVlID0gIiI7CgkJYXdhaXQgbGl2ZV9zZXJ2ZXIoKTsKCQlmX2NvbWJvKCJhbGxfcHJvZmlsZXMiLCAiYWxsX3Byb2ZpbGVzIik7Cgl9CgllbHNlIHsKCQlub3RpZnkoIk5vIHNlIGFjZXB0YW4gZXNwYWNpb3MgbyBjYXJhY3RlcmVzIGVzcGVjaWFsZXMuIiwgNTAwMCwgIlJFRCIpOwoJfQp9LCAiQ2FtYmlhIGVsIG5vbWJyZSBkZWwgcHJvZmlsZSIsIHsgbWFyZ2luUmlnaHQ6ICIxMHB4IiB9KTsKCmNfYnRuKHBhdGgsICJidG5fcHJvZmlsZV9leHBvcnQiLCAiZXhwb3J0IHByb2ZpbGUiLCAoKSA9PiB7CglzX21vZGFsKCJjb25maXJtX2V4cF9wciIpOwp9LCAiRXhwb3J0YSBlbCBwZXJmaWwgYWN0dWFsIGFsIENMSVBCT0FSRC4iLCB7IG1hcmdpblJpZ2h0OiAiMTBweCIgfSk7CgpjX2RpYWxvZygnZWxlbWVudF9jb25maWcnLCAnY29uZmlybV9leHBfcHInLCB7fSwge30sIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5pZCwgInJuZCIsICJZb3UgYXJlIGFib3V0IHRvIDx1PkVYUE9SVDwvdT4geW91ciBjdXJyZW50IHByb2ZpbGUuIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiQ09ORklSTSIsIGFzeW5jICgpID0+IHsKCQlzX2J0bigiZXhwb3J0X3Byb2ZpbGUiKTsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiwgZm9udFdlaWdodDogImJvbGQiIH0pOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY2FuY2VsIiwgKCkgPT4gewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9KTsKCmNfYnRuKHBhdGgsICJybmQiLCAiaW1wb3J0IHByb2ZpbGUiLCBhc3luYyAoKSA9PiB7CglzX21vZGFsKCJjb25maXJtX2ltcF9wciIpOwp9KTsKCmNfZGlhbG9nKCdlbGVtZW50X2NvbmZpZycsICdjb25maXJtX2ltcF9wcicsIHt9LCB7fSwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgIllvdSBhcmUgYWJvdXQgdG8gaW1wb3J0IGFuIDx1PlVOS05PV04gUFJPRklMRTwvdT48YnI+VGhpcyB3aWxsIDx1Pm92ZXJyaWRlPC91PiB5b3VyIGN1cnJlbnQgcHJvZmlsZS4iLCBkc3R5bGVzLmRpYWd0aXRsZXMpOwoJY19idG4oY19lbC5pZCwgInJuZCIsICJDT05GSVJNIiwgYXN5bmMgKCkgPT4gewoJCXNfYnRuKCJpbXBvcnRfcHJvZmlsZSIpOwoJCWF3YWl0IGxpdmVfc2VydmVyKCk7CgkJZl9jb21ibygnYWxsX3Byb2ZpbGVzJywgJ2FsbF9wcm9maWxlcycpOwoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiLCBmb250V2VpZ2h0OiAiYm9sZCIgfSk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjYW5jZWwiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0pOwoKY19idG4ocGF0aCwgInJuZCIsICJzZXQgZGVmYXVsdCIsICgpID0+IHsKCXNfbW9kYWwoImNmcl9zZXRkZWZhdWx0Iik7Cn0sICJEZXZ1ZWx2ZSBlbCBwZXJmaWwgYSB2YWxvcmVzIGRlZmF1bHQsIHRhbWJpZW4gZWwgbm9tYnJlLiIpOwoKY19kaWFsb2cocGF0aCwgJ2Nmcl9zZXRkZWZhdWx0Jywge30sIHt9LCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuaWQsICJybmQiLCAiWW91IGFyZSBhYm91dCB0byBzZXQgdGhlIGN1cnJlbnQ8YnI+cHJvZmlsZSB0byBkZWZhdWx0IFZBTFVFUyIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgljX2J0bihjX2VsLmlkLCAicm5kIiwgIkNPTkZJUk0iLCBhc3luYyAoKSA9PiB7CgkJc19idG4oJ2RlZmF1bHRfcHJvZmlsZScpOwoJCWF3YWl0IGxpdmVfc2VydmVyKCk7CgkJZl9jb21ibygiYWxsX3Byb2ZpbGVzIiwgImFsbF9wcm9maWxlcyIpOwoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiLCBmb250V2VpZ2h0OiAiYm9sZCIgfSk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjYW5jZWwiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0pOwoKY19ocigpOwoKY190ZXh0KHBhdGgsICJybmQiLCAiJiM5Njc5OyBsb2NhbCBjb25maWciLCBkc3R5bGVzLnN1YnRpdGxlcyk7CgpjX2RpYWxvZygnZWxlbWVudF9jb25maWcnLCAnY29uZmlybV9sb2FkY2ZnJywge30sIHt9LCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuaWQsICJybmQiLCAiWW91IGFyZSBhYm91dCB0byBsb2FkIHlvdXIgPHU+bG9jYWw8L3U+IENGRyIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgljX2J0bihjX2VsLmlkLCAicm5kIiwgIkNPTkZJUk0iLCBhc3luYyAoKSA9PiB7CgkJc19idG4oJ2xvYWRfYycpOwoJCWF3YWl0IGxpdmVfc2VydmVyKCk7CgkJZl9jb21ibygnYWxsX3Byb2ZpbGVzJywgJ2FsbF9wcm9maWxlcycpOwoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiLCBmb250V2VpZ2h0OiAiYm9sZCIgfSk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjYW5jZWwiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0pOwoKY19kaWFsb2coJ2VsZW1lbnRfY29uZmlnJywgJ2NvbmZpcm1fc2F2ZWNmZycsIHt9LCB7fSwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgIllvdSBhcmUgYWJvdXQgdG8gc2F2ZSB5b3VyIGxvY2FsIENGRyIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJDT05GSVJNIiwgKCkgPT4gewoJCXNfYnRuKCdzYXZlX2MnKTsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiwgZm9udFdlaWdodDogImJvbGQiIH0pOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY2FuY2VsIiwgKCkgPT4gewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9KTsKCmNfZGlhbG9nKCdlbGVtZW50X2NvbmZpZycsICdjb25maXJtX2ltcG9ydGNmZycsIHt9LCB7fSwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgIllvdSBhcmUgYWJvdXQgdG8gSU1QT1JUIGFub3RoZXIgQ0ZHIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiQ09ORklSTSIsICgpID0+IHsKCQlzX2J0bignaW1wb3J0X2MnKQoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiLCBmb250V2VpZ2h0OiAiYm9sZCIgfSk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjYW5jZWwiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0pOwoKY19kaWFsb2coJ2VsZW1lbnRfY29uZmlnJywgJ2NvbmZpcm1fZXhwb3J0Y2ZnJywge30sIHt9LCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuaWQsICJybmQiLCAiWW91IGFyZSBhYm91dCB0byBFWFBPUlQgdGhlIGVudGlyZSBsb2NhbCBDRkcsPGJyPiB3aGljaCBpbmNsdWRlIGFsbCB5b3VyIHByb2ZpbGVzIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiQ09ORklSTSIsICgpID0+IHsKCQlzX2J0bignZXhwb3J0X2MnKQoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiLCBmb250V2VpZ2h0OiAiYm9sZCIgfSk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjYW5jZWwiLCAoKSA9PiB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7Cn0pOwoKY19kaWFsb2coJ2VsZW1lbnRfY29uZmlnJywgJ2NvbmZpcm1fZXhpdCcsIHt9LCB7fSwgKGNfZWwpID0+IHsKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgIllvdSBhcmUgYWJvdXQgdG8gZXhpdCIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgljX2J0bihjX2VsLmlkLCAicm5kIiwgIkNPTkZJUk0iLCAoKSA9PiB7CgkJY19leGl0KCk7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIsIGZvbnRXZWlnaHQ6ICJib2xkIiB9KTsKCgljX2J0bihjX2VsLmlkLCAicm5kIiwgImNhbmNlbCIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiB9KTsKfSk7CgpwYXRoID0gInBhbmVsX3RpY2tldHMiOwoKY190ZXh0KHBhdGgsICJ0aWNrZXRjZW50ZXIiLCAiVGlja2V0IENlbnRlciIsIHsKCXRleHRBbGlnbjogJ2NlbnRlcicsCgl0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsCglmb250U2l6ZTogJzE4cHgnLAoJbWFyZ2luQm90dG9tOiAnMTBweCcsCgltYXJnaW5Ub3A6ICIwcHgiLAp9KTsKCnZhciB0aWNrZXRfZmFxX3N0ID0gewoJdGV4dEFsaWduOiAnY2VudGVyJywKCWZvbnRTaXplOiAnMTRweCcsCgltYXJnaW5Cb3R0b206ICcxMHB4JywKfQoKY190ZXh0KHBhdGgsICJybmQiLCAiLSBEbyBub3Qgc3BhbSB0aGUgdGlja2V0IHN5c3RlbS48YnI+LSBPbmx5IGNyZWF0ZSB0aWNrZXRzIGlmIHlvdSBoYXZlIGFuIGlzc3VlLjxicj4tIE9ubHkgY3JlYXRlIHRpY2tldHMgaWYgeW91IGhhdmUgYSBmZWF0dXJlIHJlcXVlc3QuPGJyPiIsIHRpY2tldF9mYXFfc3QpOwpjX3RleHQocGF0aCwgInJuZCIsICItIE9ubHkgY3JlYXRlIHRpY2tldHMgaWYgeW91IG5lZWQgPHU+aGVscDwvdT4uPGJyPi0gQWxsIHRpY2tldHMgYXJlIDx1PnByaXZhdGU8L3U+Ljxicj4tIERvIG5vdCBwb3N0IGlycmVsZXZhbnQgY29tbWVudHMgaW4gdGlja2V0cyBvciB5b3UgbWF5IGJlIDx1PmJhbm5lZDwvdT4uIiwgdGlja2V0X2ZhcV9zdCk7CgpjX2NvbWJvYm94MihwYXRoLCAidGlja2V0X2JlaGF2aW9yIiwgWyJCdWciLCAiRmVhdHVyZSIsICJPdGhlciJdLCB0cnVlLCAiU2VsZWNjaW9uYSB1bmEgcmF6b24gZGVsIHRpY2tldC4iKTsKCmNfdGV4dGFyZWEocGF0aCwgInRpY2tldF9jb250ZW50IiwgdHJ1ZSwgIiIsIHsKCWhlaWdodDogJzEwMHB4JywKCXJlc2l6ZTogJ25vbmUnLAoJb3ZlcmZsb3c6ICdoaWRkZW4nLAoJd2hpdGVTcGFjZTogJ3ByZS13cmFwJywKCW1hcmdpblRvcDogIjVweCIsCn0sIHsKCXBhdHRlcm46ICJeW2EtekEtWjAtOSBdKiR7NX0iLAoJbWluTGVuZ3RoOiA1LAoJbWF4TGVuZ3RoOiAyNTYsCglwbGFjZWhvbGRlcjogImluZm8iLAoJcmVxdWlyZWQ6IHRydWUsCn0pOwoKdmFyIHNob3dfdGlja2V0X2MgPSBmYWxzZTsKY19idG4ocGF0aCwgInJuZCIsICJjcmVhdGUgdGlja2V0IiwgKCkgPT4gewoJaWYgKCFzaG93X3RpY2tldF9jKSB7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRpY2tldF9jb250ZW50Iikuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siOwoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0aWNrZXRfYmVoYXZpb3IiKS5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayI7CgkJc2hvd190aWNrZXRfYyA9IHRydWU7CgkJcmV0dXJuOwoJfQoKCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGlja2V0X2NvbnRlbnQiKS52YWxpZGl0eS52YWxpZCkgewoJCXZhciB0aWNrZXRfaW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0aWNrZXRfY29udGVudCIpLnZhbHVlOwoJCXZhciB0aWNrZXRfcmVhc29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRpY2tldF9iZWhhdmlvciIpLnZhbHVlOwoKCQlzX2J0bigiY3JlYXRlX3RpY2tldCIsIHRpY2tldF9yZWFzb24gKyAiLSIgKyB0aWNrZXRfaW5mbykKCQkJLnRoZW4oKHJUeHQpID0+IHsKCQkJCW5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgIiAiKSwgNzAwMCk7CgkJCX0pCgkJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCQl9KTsKCX0KCWVsc2UgewoJCW5vdGlmeSgiTm8gc2UgYWNlcHRhbiBjYXJhY3RlcmVzIGVzcGVjaWFsZXMsIGRlIDUgYSAyNTYgY2FyYWN0ZXJlcyBzb2xhbWVudGUuIiwgNTAwMCwgIlJFRCIpOwoJfQp9LCAiQ3JlYSB1biB0aWNrZXQgZWwgY3VhbCBzZXJhIGF0ZW5kaWRvL3Zpc3RvIHBvciBsb3MgYWRtaW5pc3RyYWRvcmVzLiIpOwoKY19ocihwYXRoLCBmYWxzZSwgeyB3aWR0aDogIjIwMHB4IiB9KTsKY19idG4ocGF0aCwgInJuZCIsICJ2aWV3IHRpY2tldHMiLCAoKSA9PiB7CglpZiAoc2hvd190aWNrZXRfYykgewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0aWNrZXRfY29udGVudCIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRpY2tldF9iZWhhdmlvciIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJc2hvd190aWNrZXRfYyA9IGZhbHNlOwoJfQoKCXNfYnRuKCJnZXRfdGlja2V0cyIpCgkJLnRoZW4oKHJUeHQpID0+IHsKCQkJaWYgKHJUeHQuc3BsaXQoIl8iKS5sZW5ndGggLSAxID4gMikgewoJCQkJbm90aWZ5KHJUeHQucmVwbGFjZSgvXy9nLCAiICIpLCA3MDAwKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJdmFyIHJlc2pzb24gPSBKU09OLnBhcnNlKHJUeHQpOwoKCQkJaWYgKHJlc2pzb24ubGVuZ3RoID09IDApIHsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1c2VyX3RpY2tldHMiKS5pbm5lckhUTUwgPSAibm8gdGlja2V0cyI7CgkJCQlub3RpZnkoInVzZXIgaGFzIG5vIHRpY2tldHMiLCA3MDAwKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzZXJfdGlja2V0cyIpLmlubmVySFRNTCA9ICJubyB0aWNrZXRzIjsKCgkJCXZhciB0b190aWNrZXRzID0gIiI7CgkJCWZvciAoY29uc3Qga2V5IGluIHJlc2pzb24pIHsKCQkJCWlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyZXNqc29uLCBrZXkpKSB7CgkJCQkJY29uc3QgZWxlbWVudCA9IHJlc2pzb25ba2V5XTsKCQkJCQl0b190aWNrZXRzICs9ICI8c3Ryb25nPjx1PiIgKyBlbGVtZW50WyJyZWFzb24iXSArICIgWyIgKyBlbGVtZW50WyJpZCJdICsgIl08L3U+IHwgPGJ1dHRvbiBjbGFzcz0nbmV3YnV0dG9uJyBkYXRhLXR0aXA9J0RlbGV0ZSB0aWNrZXQnIHN0eWxlPSdoZWlnaHQ6MzBweDt3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbG9yOnJlZDsnIG9uY2xpY2s9XCJzX2J0bignZGVsZXRlX3RpY2tldCcsICciICsgZWxlbWVudFsiaWQiXSArICInKS50aGVuKCAoclR4dCkgPT57IG5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgJyAnKSwgNzAwMCk7fSkuY2F0Y2goIChlcnJvcikgPT57Y29uc29sZS5lcnJvcihlcnJvcik7fSk7XCI+JnRpbWVzOzwvYnV0dG9uPjwvc3Ryb25nPjxicj4iOwoJCQkJCXRvX3RpY2tldHMgKz0gIjxwPiIgKyBlbGVtZW50WyJjb250ZW50Il0gKyAiPC9wPiI7CgkJCQkJdG9fdGlja2V0cyArPSAiPGJyPjxicj4iOwoJCQkJfQoJCQl9CgoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcl90aWNrZXRzIikuaW5uZXJIVE1MID0gdG9fdGlja2V0czsKCQl9KQoJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJY29uc29sZS5lcnJvcihlcnJvcik7CgkJfSk7Cn0sICJNdWVzdHJhIHR1cyB0aWNrZXRzIGNyZWFkb3MiKTsKCmNfdGV4dChwYXRoLCAidXNlcl90aWNrZXRzIiwgIiIsIHsgdGV4dEFsaWduOiAiY2VudGVyIiB9KTsKCmNfYnIocGF0aCk7CgpwYXRoID0gInBhbmVsX3Byb2ZpbGVzIjsKCmNfdGV4dChwYXRoLCAicm5kIiwgIlByb2ZpbGUiLCB7Cgl0ZXh0QWxpZ246ICdjZW50ZXInLAoJZm9udFdlaWdodDogJ2JvbGQnLAoJdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLAoJZm9udFNpemU6ICcyMHB4JywKCW1hcmdpbkJvdHRvbTogJzEwcHgnLAoJbWFyZ2luVG9wOiAnMHB4Jwp9KTsKCmNfZGl2KHBhdGgsICJ1c2VyaW5mbyIsIHsKCWRpc3BsYXk6ICJpbmxpbmUtZ3JpZCIsCglncmlkVGVtcGxhdGVDb2x1bW5zOiAicmVwZWF0KDMsIDFmcikiLAoJZ3JpZEdhcDogIjEwcHgiCn0pOwoKcGF0aCA9ICJ1c2VyaW5mbyI7CmNfaW1nKHBhdGgsICJ1c2VyX2F2YXRhciIsIGRlZmF1bHRfYXZhdGFyLCA5MCwgOTAsCgl7CgkJanVzdGlmeVNlbGY6ICJzdGFydCIsCgkJbWFyZ2luTGVmdDogIjEwcHgiLAoJCW9iamVjdEZpdDogImNvdmVyIiwKCQlib3JkZXJSYWRpdXM6ICI1cHgiCgl9KTsKCmNfdGV4dChwYXRoLCAidXNlcl9pbmZvIiwgIm5vbmUiLCB7IGRpc3BsYXk6ICJncmlkIiwgZ3JpZFRlbXBsYXRlQ29sdW1uczogIjE2MHB4IiwgbWFyZ2luVG9wOiAiMHB4IiB9KTsKCmZ1bmN0aW9uIG93bl9pbmZvKCkgewoJZ2F0aGVyKCJnZXRfdXNlcl9pbmZvIiwgInoiKQoJCS50aGVuKChyZXN1bHQpID0+IHsKCQkJbGV0IHVfaW5mID0gSlNPTi5wYXJzZShyZXN1bHQpOwoKCQkJaWYgKHVfaW5mWyJhdmF0YXIiXSkgewoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzZXJfYXZhdGFyIikuc3JjID0gd2luZG93LmF0b2IodV9pbmZbImF2YXRhciJdKTsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhdnRyX3ByZXZpZXciKS5zcmMgPSB3aW5kb3cuYXRvYih1X2luZlsiYXZhdGFyIl0pOwoJCQl9CgoJCQl2YXIgdXNlcl9kYXRhID0gIiI7CgkJCXVzZXJfZGF0YSArPSAiPHAgc3R5bGU9J21hcmdpbi10b3A6MHB4O21hcmdpbi1ib3R0b206MHB4Oyc+PHN0cm9uZz5AIiArIHVfaW5mWyJhbGlhcyJdOwoKCQkJaWYgKCF1X2luZlsiYWxpYXMiXS5pbmNsdWRlcygiWlVzZXIiKSkKCQkJCWhhc19hbGlhcyA9IHRydWU7CgoJCQlpZiAodV9pbmZbInJvbGUiXSkKCQkJCXVzZXJfZGF0YSArPSAiPHNwYW4gc3R5bGU9J2Rpc3BsYXk6aW5saW5lO2ZvbnQtc2l6ZToxMHB4O2NvbG9yOiIgKyByb2xlY2xyW3VfaW5mWyJyb2xlIl0udG9Mb3dlckNhc2UoKV0gKyAiOyc+ICgiICsgdV9pbmZbInJvbGUiXSArICIpPC9zcGFuPjxicj48L3N0cm9uZz48L3A+IjsKCgkJCWlmICh1X2luZlsidXNlcl9pZCJdKQoJCQkJdXNlcl9kYXRhICs9ICI8cCBzdHlsZT0nZm9udC1zaXplOjEwcHg7bWFyZ2luLXRvcDowcHg7Jz51aWQ6ICIgKyB1X2luZlsidXNlcl9pZCJdOwoJCQllbHNlCgkJCQl1c2VyX2RhdGEgKz0gIjxwIHN0eWxlPSdmb250LXNpemU6MTBweDttYXJnaW4tdG9wOjBweDsnPnVpZDogTk8iOwoKCQkJaWYgKHVfaW5mWyJyZWdpc3Rlcl90aW1lIl0pCgkJCQl1c2VyX2RhdGEgKz0gIiAtIGpvaW5lZDogIiArIGdfdG1fZHQodV9pbmZbInJlZ2lzdGVyX3RpbWUiXSwgMCkgKyAiPC9wPiI7CgkJCWVsc2UKCQkJCXVzZXJfZGF0YSArPSAiPC9wPiI7CgoJCQlpZiAodV9pbmZbImRlc2NyaXB0aW9uIl0pCgkJCQl1c2VyX2RhdGEgKz0gIjxwIHN0eWxlPSdmb250LXNpemU6MTJweDttYXJnaW4tdG9wOiAwcHg7Jz5pbmZvOiAiICsgd2luZG93LmF0b2IodV9pbmZbImRlc2NyaXB0aW9uIl0pICsgIjwvcD4iOwoJCQllbHNlCgkJCQl1c2VyX2RhdGEgKz0gIjxwPjwvcD4iCgoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcl9pbmZvIikuaW5uZXJIVE1MID0gdXNlcl9kYXRhOwoJCX0pCgkJLmNhdGNoKChlcnJvcikgPT4gewoJCQljb25zb2xlLmVycm9yKGVycm9yKTsKCQl9KTsKfQoKb3duX2luZm8oKTsKCnBhdGggPSAicGFuZWxfcHJvZmlsZXMiOwpjX2hyKHBhdGgsIGZhbHNlLCB7IHdpZHRoOiAiMjAwcHgiIH0pOwoKY19idG4ocGF0aCwgInJuZCIsICJjaGFuZ2UgYWxpYXMiLCAoKSA9PiB7CglzX21vZGFsKCJhbGlhc19kbGciKTsKfSwgIlBlcm1pdGUgY2FtYmlhciBlbCBhbGlhcyAxIHZleiBjYWRhIDMwIGRpYXMuIiwgeyBqdXN0aWZ5U2VsZjogImNlbnRlciIgfSkKCmNfZGlhbG9nKHBhdGgsICJhbGlhc19kbGciLCB7fSwge30sIChjX2VsKSA9PiB7CgljX3RleHQoY19lbC5pZCwgInJuZCIsICJDaGFuZ2UgYWxpYXMiLCBkc3R5bGVzLmRpYWd0aXRsZXMpOwoKCWNfdGV4dGJveChjX2VsLmlkLCAicGZfYWxpYXNfdGV4dGJveCIsIGZhbHNlLCAiIiwgIiIsIHsKCQltYXJnaW5Ub3A6ICI1cHgiLAoJfSwgewoJCXBhdHRlcm46ICJeW2EtekEtWjAtOV0qJCIsCgkJbWluTGVuZ3RoOiAzLAoJCW1heExlbmd0aDogMjAsCgkJcmVxdWlyZWQ6IHRydWUsCgl9KTsKCgljX2JyKGNfZWwuaWQpOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY2hhbmdlIiwgKCkgPT4gewoJCWNvbnN0IGVsZW1faXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwZl9hbGlhc190ZXh0Ym94Iik7CgoJCWlmIChlbGVtX2l0ZW0udmFsaWRpdHkudmFsaWQpIHsKCQkJdmFyIHR4dGluZm8gPSBlbGVtX2l0ZW0udmFsdWU7CgkJCXNfYnRuKCJjaGFuZ2VfYWxpYXMiLCB0eHRpbmZvKQoJCQkJLnRoZW4oKHJUeHQpID0+IHsKCQkJCQlub3RpZnkoclR4dC5yZXBsYWNlKC9fL2csICIgIiksIDcwMDApOwoKCQkJCQlpZiAoclR4dC5pbmNsdWRlcygiY2hhbmdlZCIpICYmICFyVHh0LmluY2x1ZGVzKCJ3YWl0IikpIHsKCQkJCQkJb3duX2luZm8oKTsKCQkJCQkJaGFzX2FsaWFzID0gdHJ1ZTsKCQkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY19lbC5pZCkuY2xvc2UoKTsKCQkJCQl9CgkJCQl9KQoJCQkJLmNhdGNoKChlcnJvcikgPT4gewoJCQkJCWNvbnNvbGUuZXJyb3IoZXJyb3IpOwoJCQkJfSk7CgkJfQoJCWVsc2UgewoJCQlub3RpZnkoZWxlbV9pdGVtLm1pbkxlbmd0aCArICIgYSAiICsgZWxlbV9pdGVtLm1heExlbmd0aCArICIgY2FyYWN0ZXJlcy4gU2luIGNhcmFjdGVyZXMvc2ltYm9sb3MgZXNwZWNpYWxlcy4iLCA1MDAwLCAiUkVEIik7CgkJfQoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiB9KTsKCgljX2JyKGNfZWwuaWQpOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY2FuY2VsIiwgKCkgPT4gewoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7Cgl9LCAiIiwgeyB3aWR0aDogIjEwMCUiIH0pOwp9KTsKcGF0aCA9ICJwYW5lbF9wcm9maWxlcyI7CgpjX2J0bihwYXRoLCAicm5kIiwgImNoYW5nZSBhdmF0YXIiLCAoKSA9PiB7CglzX21vZGFsKCJhdnRyX2RsZyIpOwp9LCAiQ2FtYmlhIGVsIGF2YXRhciBhIHVuYSBpbWFnZW4sIHNvbG8gVVJMUy4iLCB7IGp1c3RpZnlTZWxmOiAiY2VudGVyIiB9KQoKY19kaWFsb2cocGF0aCwgImF2dHJfZGxnIiwge30sIHt9LCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuaWQsICJybmQiLCAiQ2hhbmdlIGF2YXRhciIsIGRzdHlsZXMuZGlhZ3RpdGxlcyk7CgoJY19pbWcoY19lbC5pZCwgImF2dHJfcHJldmlldyIsIGRlZmF1bHRfYXZhdGFyLCA5MCwgOTAsIHsKCQlkaXNwbGF5OiAiYmxvY2siLAoJCW1hcmdpbjogIjAgYXV0byIsCgkJb2JqZWN0Rml0OiAiY292ZXIiCgl9KTsKCgljX2JyKGNfZWwuaWQpOwoKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgIkltZ3VyIFVSTCBvbmx5LCBleGFtcGxlLiIsIHsKCQl0ZXh0QWxpZ246ICJjZW50ZXIiLAoJCWNvbG9yOiAid2hpdGUiCgl9KTsKCWNfdGV4dChjX2VsLmlkLCAicm5kIiwgImh0dHBzOi8vaS5pbWd1ci5jb20vR25KYUVaTC5wbmciLCB7CgkJdGV4dEFsaWduOiAiY2VudGVyIiwKCQljb2xvcjogIndoaXRlIgoJfSk7CgoJY190ZXh0Ym94KGNfZWwuaWQsICJwZl9hdmF0YXJfdGV4dGJveCIsIGZhbHNlLCAiIiwgIjEwIGEgMTMwIGNhcmFjdGVyZXMuIEV2aXRhciB1c2FyIFVSTCdzIGRlIGdpZnMvdmlkZW9zLiIsIHsKCQltYXJnaW5Ub3A6ICI1cHgiLAoJCXdpZHRoOiAiOTUlIgoJfSwgewoJCXBhdHRlcm46ICJeKGh0dHBzPzpcL1wvKT8oaVwuaW1ndXJcLmNvbVwvKShbYS16QS1aMC05XSspKFwuanBnfFwuanBlZ3xcLnBuZykkIiwKCQltaW5MZW5ndGg6IDIwLAoJCW1heExlbmd0aDogNDAsCgkJcmVxdWlyZWQ6IHRydWUsCgl9KTsKCgljX2JyKGNfZWwuaWQpOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAicHJldmlldyIsICgpID0+IHsKCQljb25zdCBlbGVtX2l0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGZfYXZhdGFyX3RleHRib3giKTsKCgkJaWYgKGVsZW1faXRlbS52YWxpZGl0eS52YWxpZCkgewoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXZ0cl9wcmV2aWV3Iikuc3JjID0gZWxlbV9pdGVtLnZhbHVlOwoJCX0KCQllbHNlIHsKCQkJbm90aWZ5KGVsZW1faXRlbS5taW5MZW5ndGggKyAiIGEgIiArIGVsZW1faXRlbS5tYXhMZW5ndGggKyAiIGNhcmFjdGVyZXMuIFNpbiBjYXJhY3RlcmVzL3NpbWJvbG9zIGVzcGVjaWFsZXMuIiwgNTAwMCwgIlJFRCIpOwoJCX0KCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7CgoJY19icihjX2VsLmlkKTsKCWNfaHIoY19lbC5pZCwgZmFsc2UpOwoKCWNfYnRuKGNfZWwuaWQsICJybmQiLCAiY2hhbmdlIiwgKCkgPT4gewoJCWNvbnN0IGVsZW1faXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwZl9hdmF0YXJfdGV4dGJveCIpOwoKCQlpZiAoZWxlbV9pdGVtLnZhbGlkaXR5LnZhbGlkKSB7CgkJCXZhciB0eHRpbmZvID0gZWxlbV9pdGVtLnZhbHVlOwoJCQlzX2J0bignY2hhbmdlX2F2YXRhcicsIHR4dGluZm8pCgkJCQkudGhlbigoclR4dCkgPT4gewoJCQkJCW5vdGlmeShyVHh0LnJlcGxhY2UoL18vZywgIiAiKSwgNzAwMCk7CgoJCQkJCWlmIChyVHh0LmluY2x1ZGVzKCJjaGFuZ2VkIikgJiYgIXJUeHQuaW5jbHVkZXMoIndhaXQiKSkgewoJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXZ0cl9wcmV2aWV3Iikuc3JjID0gdHh0aW5mbzsKCQkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzZXJfYXZhdGFyIikuc3JjID0gdHh0aW5mbzsKCgkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7CgkJCQkJfQoJCQkJfSkKCQkJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJCQljb25zb2xlLmVycm9yKGVycm9yKTsKCQkJCX0pOwoJCX0KCQllbHNlIHsKCQkJbm90aWZ5KGVsZW1faXRlbS5taW5MZW5ndGggKyAiIGEgIiArIGVsZW1faXRlbS5tYXhMZW5ndGggKyAiIGNhcmFjdGVyZXMuIFNpbiBjYXJhY3RlcmVzL3NpbWJvbG9zIGVzcGVjaWFsZXMuIiwgNTAwMCwgIlJFRCIpOwoJCX0KCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7CgoJY19icihjX2VsLmlkKTsKCgljX2J0bihjX2VsLmlkLCAicm5kIiwgImNhbmNlbCIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiB9KTsKfSk7CgpwYXRoID0gInBhbmVsX3Byb2ZpbGVzIjsKCmNfYnRuKHBhdGgsICJvcGVuZGxnZGVzYyIsICJjaGFuZ2UgZGVzY3JpcHRpb24iLCAoKSA9PiB7CglzX21vZGFsKCJkZXNjX2RsZyIpOwp9LCAiQ2FtYmlhIGxhIGRlc2NyaXBjaW9uIGRlIHR1IHBlcmZpbC4iLCB7IGp1c3RpZnlTZWxmOiAiY2VudGVyIiB9KQoKY19icigpOwoKY19kaWFsb2cocGF0aCwgImRlc2NfZGxnIiwge30sIHt9LCAoY19lbCkgPT4gewoJY190ZXh0KGNfZWwuaWQsICJybmQiLCAiQ2hhbmdlIGRlc2NyaXB0aW9uIiwgZHN0eWxlcy5kaWFndGl0bGVzKTsKCgljX3RleHRhcmVhKGNfZWwuaWQsICJkZXNjcmlwdGlvbl9jb250ZW50IiwgZmFsc2UsICIiLCB7CgkJaGVpZ2h0OiAnMTAwcHgnLAoJCXJlc2l6ZTogJ25vbmUnLAoJCW92ZXJmbG93OiAnaGlkZGVuJywKCQl3aGl0ZVNwYWNlOiAncHJlLXdyYXAnLAoJCW1hcmdpblRvcDogIjVweCIsCgkJanVzdGlmeVNlbGY6ICJjZW50ZXIiLAoJCXRleHRib3g6IHsKCQkJZGlzcGxheTogImluaGVyaXQiCgkJfQoJfSwgewoJCXBhdHRlcm46ICJeW2EtekEtWjAtOSBdKiQiLAoJCW1pbkxlbmd0aDogNCwKCQltYXhMZW5ndGg6IDI1NiwKCQlwbGFjZWhvbGRlcjogImRlc2NyaXB0aW9uIiwKCQlyZXF1aXJlZDogdHJ1ZSwKCX0pOwoKCWNfYnIoY19lbC5pZCk7CgoJY19idG4oY19lbC5pZCwgInJuZCIsICJjaGFuZ2UiLCAoKSA9PiB7CgkJY29uc3QgZWxlbV9pdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRlc2NyaXB0aW9uX2NvbnRlbnQiKTsKCgkJaWYgKGVsZW1faXRlbS52YWxpZGl0eS52YWxpZCkgewoJCQl2YXIgZGVzY19pbmZvID0gZWxlbV9pdGVtLnZhbHVlOwoKCQkJc19idG4oImNoYW5nZV9kZXNjcmlwdGlvbiIsIGRlc2NfaW5mbykKCQkJCS50aGVuKChyVHh0KSA9PiB7CgkJCQkJbm90aWZ5KHJUeHQucmVwbGFjZSgvXy9nLCAiICIpLCA3MDAwKTsKCgkJCQkJaWYgKHJUeHQuaW5jbHVkZXMoImNoYW5nZWQiKSAmJiAhclR4dC5pbmNsdWRlcygid2FpdCIpKSB7CgkJCQkJCW93bl9pbmZvKCk7CgkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNfZWwuaWQpLmNsb3NlKCk7CgkJCQkJfQoJCQkJfSkKCQkJCS5jYXRjaCgoZXJyb3IpID0+IHsKCQkJCQljb25zb2xlLmVycm9yKGVycm9yKTsKCQkJCX0pOwoJCX0KCQllbHNlIHsKCQkJbm90aWZ5KGVsZW1faXRlbS5taW5MZW5ndGggKyAiIGEgIiArIGVsZW1faXRlbS5tYXhMZW5ndGggKyAiIGNhcmFjdGVyZXMuIFNpbiBjYXJhY3RlcmVzL3NpbWJvbG9zIGVzcGVjaWFsZXMuIiwgNTAwMCwgIlJFRCIpOwoJCX0KCX0sICIiLCB7IHdpZHRoOiAiMTAwJSIgfSk7CgoJY19icihjX2VsLmlkKTsKCgljX2J0bihjX2VsLmlkLCAicm5kIiwgImNhbmNlbCIsICgpID0+IHsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjX2VsLmlkKS5jbG9zZSgpOwoJfSwgIiIsIHsgd2lkdGg6ICIxMDAlIiB9KTsKfSk7Cgpjb25zdCB2aXJ0dWFsS2V5cyA9IFtdOwoKZm9yIChsZXQgaSA9IDB4NDE7IGkgPD0gMHg1QTsgaSsrKSB7Cgl2aXJ0dWFsS2V5cy5wdXNoKHsgY29kZTogaSwgbmFtZTogU3RyaW5nLmZyb21DaGFyQ29kZShpKSB9KTsKfQoKZm9yIChsZXQgaSA9IDB4MzA7IGkgPD0gMHgzOTsgaSsrKSB7Cgl2aXJ0dWFsS2V5cy5wdXNoKHsgY29kZTogaSwgbmFtZTogU3RyaW5nLmZyb21DaGFyQ29kZShpKSB9KTsKfQoKY29uc3Qgc3BlY2lhbEtleXMgPSBbCgl7IGNvZGU6IDAsIG5hbWU6ICdOT05FJyB9LAoJeyBjb2RlOiAweDA4LCBuYW1lOiAnQmFja3NwYWNlJyB9LAoJeyBjb2RlOiAweDA5LCBuYW1lOiAnVGFiJyB9LAoJeyBjb2RlOiAweDBELCBuYW1lOiAnRW50ZXInIH0sCgl7IGNvZGU6IDB4MTAsIG5hbWU6ICdTaGlmdCcgfSwKCXsgY29kZTogMHgxMSwgbmFtZTogJ0N0cmwnIH0sCgl7IGNvZGU6IDB4MTIsIG5hbWU6ICdBbHQnIH0sCgl7IGNvZGU6IDB4QTQsIG5hbWU6ICdMZWZ0IEFsdCcgfSwKCXsgY29kZTogMHhBNSwgbmFtZTogJ1JpZ2h0IEFsdCcgfSwKCXsgY29kZTogMHgxMywgbmFtZTogJ1BhdXNlL0JyZWFrJyB9LAoJeyBjb2RlOiAweDVCLCBuYW1lOiAnTGVmdCBXaW5kb3dzJyB9LAoJeyBjb2RlOiAweDVDLCBuYW1lOiAnUmlnaHQgV2luZG93cycgfSwKCXsgY29kZTogMHg1RCwgbmFtZTogJ0FwcGxpY2F0aW9ucycgfSwKCXsgY29kZTogMHg2MCwgbmFtZTogJ051bVBhZCAwJyB9LAoJeyBjb2RlOiAweDYxLCBuYW1lOiAnTnVtUGFkIDEnIH0sCgl7IGNvZGU6IDB4NjIsIG5hbWU6ICdOdW1QYWQgMicgfSwKCXsgY29kZTogMHg2MywgbmFtZTogJ051bVBhZCAzJyB9LAoJeyBjb2RlOiAweDY0LCBuYW1lOiAnTnVtUGFkIDQnIH0sCgl7IGNvZGU6IDB4NjUsIG5hbWU6ICdOdW1QYWQgNScgfSwKCXsgY29kZTogMHg2NiwgbmFtZTogJ051bVBhZCA2JyB9LAoJeyBjb2RlOiAweDY3LCBuYW1lOiAnTnVtUGFkIDcnIH0sCgl7IGNvZGU6IDB4NjgsIG5hbWU6ICdOdW1QYWQgOCcgfSwKCXsgY29kZTogMHg2OSwgbmFtZTogJ051bVBhZCA5JyB9LAoJeyBjb2RlOiAweDcwLCBuYW1lOiAnRjEnIH0sCgl7IGNvZGU6IDB4NzEsIG5hbWU6ICdGMicgfSwKCXsgY29kZTogMHg3MiwgbmFtZTogJ0YzJyB9LAoJeyBjb2RlOiAweDczLCBuYW1lOiAnRjQnIH0sCgl7IGNvZGU6IDB4NzQsIG5hbWU6ICdGNScgfSwKCXsgY29kZTogMHg3NSwgbmFtZTogJ0Y2JyB9LAoJeyBjb2RlOiAweDc2LCBuYW1lOiAnRjcnIH0sCgl7IGNvZGU6IDB4NzcsIG5hbWU6ICdGOCcgfSwKCXsgY29kZTogMHg3OCwgbmFtZTogJ0Y5JyB9LAoJeyBjb2RlOiAweDc5LCBuYW1lOiAnRjEwJyB9LAoJeyBjb2RlOiAweDdBLCBuYW1lOiAnRjExJyB9LAoJeyBjb2RlOiAweDdCLCBuYW1lOiAnRjEyJyB9LAoJeyBjb2RlOiAweDAxLCBuYW1lOiAnTEJVVFRPTicgfSwKCXsgY29kZTogMHgwMiwgbmFtZTogJ1JCVVRUT04nIH0sCgl7IGNvZGU6IDB4MDQsIG5hbWU6ICdNQlVUVE9OJyB9LAoJeyBjb2RlOiAweDA1LCBuYW1lOiAnWEJVVFRPTjEnIH0sCgl7IGNvZGU6IDB4MDYsIG5hbWU6ICdYQlVUVE9OMicgfSwKCXsgY29kZTogMHhCQiwgbmFtZTogJz0nIH0sCgl7IGNvZGU6IDB4QkMsIG5hbWU6ICcsJyB9LAoJeyBjb2RlOiAweEJELCBuYW1lOiAnLScgfSwKCXsgY29kZTogMHhCRSwgbmFtZTogJy4nIH0sCl07Cgp2aXJ0dWFsS2V5cy5wdXNoKC4uLnNwZWNpYWxLZXlzKTsKdmlydHVhbEtleXMuc29ydCgoYSwgYikgPT4geyByZXR1cm4gYS5jb2RlIC0gYi5jb2RlOyB9KTsKCmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbkVsZW1lbnQoa2V5RWxlbWVudCwgaWQpIHsKCWNvbnN0IG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKCW9wdGlvbkVsZW1lbnQudmFsdWUgPSBrZXlFbGVtZW50LmNvZGU7CglvcHRpb25FbGVtZW50LnRleHQgPSBrZXlFbGVtZW50Lm5hbWU7CglvcHRpb25FbGVtZW50LmlkID0gaWQgKyAiX29wdCI7CglyZXR1cm4gb3B0aW9uRWxlbWVudDsKfQoKYmluZF9lbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7Cgljb25zdCB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudC50YXJnZXQpOwoJdmlydHVhbEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7CgkJdGFyZ2V0RWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdGVPcHRpb25FbGVtZW50KGtleSwgZWxlbWVudC5pZCkpOwoJfSk7Cn0pOwoKZnVuY3Rpb24gcl9pbmZvKCkgewoJZm9yIChjb25zdCBpIGluIHVfYm9vbCkgewoJCWdfYm9vbCh1X2Jvb2xbaV0pOwoJfQoKCWZvciAoY29uc3QgaSBpbiB1X2Zsb2F0KSB7CgkJZ19mbG9hdCh1X2Zsb2F0W2ldKTsKCX0KCglmb3IgKGNvbnN0IGkgaW4gdV9pbnQpIHsKCQlnX2ludCh1X2ludFtpXSk7Cgl9CgoJZm9yIChjb25zdCBpIGluIHVfaW50MikgewoJCWdfaW50KHVfaW50MltpXSwgZmFsc2UpOwoJfQp9CgpmdW5jdGlvbiB1X3NlcnZlcigpIHsKCWZvciAoY29uc3QgaSBpbiB1X2Jvb2wpIHsKCQlzX2Jvb2wodV9ib29sW2ldKTsKCX0KCglmb3IgKGNvbnN0IGkgaW4gdV9mbG9hdCkgewoJCXNfZmxvYXQodV9mbG9hdFtpXSk7Cgl9Cn0KCmZ1bmN0aW9uIGN0YWJfZml4KGlkLCBkaXNwbGF5ID0gImlubGluZS1ibG9jayIpIHsKCXZhciBlbGVtZW50cyA9IFsnZWxlbWVudF9tYWluJywgJ2VsZW1lbnRfa2V5cycsICdlbGVtZW50X292ZXJsYXknLCAnZWxlbWVudF9zZXR0aW5nJywgJ2VsZW1lbnRfcXJjb2RlJ107CgoJZWxlbWVudHMuZm9yRWFjaChhc3luYyAoZWxlbWVudCkgPT4gewoJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KSkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCkuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCX0pOwoKCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpCgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5Owp9CgpmdW5jdGlvbiB0YWJfc3dpdGNoKGksIHBhbmVsID0gImNlbnRlciIsIGRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIikgewoJc3dpdGNoIChwYW5lbCkgewoJCWNhc2UgMjoKCQljYXNlICIyIjoKCQljYXNlICJyaWdodCI6CgkJCWxldCB0YWIyQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltjLXRhYjItYnRuXSIpOwoJCQl0YWIyQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHsKCQkJCWlmIChidXR0b24uaWQgPT09IGkpIHsKCQkJCQlidXR0b24uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIik7CgkJCQl9IGVsc2UgewoJCQkJCWJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCJhY3RpdmUiKTsKCQkJCX0KCQkJfSk7CgkJCXN3aXRjaCAoaSkgewoJCQkJY2FzZSAncF91cGRhdGVzJzoKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZWxfdXBkYXRlcycpLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVsX3RpY2tldHMnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lbF9wcm9maWxlcycpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCQkJYnJlYWs7CgkJCQljYXNlICdwX3RpY2tldHMnOgoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lbF91cGRhdGVzJykuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZWxfdGlja2V0cycpLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVsX3Byb2ZpbGVzJykuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJCQlicmVhazsKCQkJCWNhc2UgJ3BfcHJvZmlsZSc6CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVsX3VwZGF0ZXMnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lbF90aWNrZXRzJykuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZWxfcHJvZmlsZXMnKS5zdHlsZS5kaXNwbGF5ID0gImdyaWQiOwoJCQkJCWJyZWFrOwoJCQl9CgkJCWJyZWFrOwoJCWNhc2UgMToKCQljYXNlICIxIjoKCQljYXNlICJjZW50ZXIiOgoJCQlsZXQgdGFiQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltjLXRhYi1idG5dIik7CgkJCXRhYkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7CgkJCQlpZiAoYnV0dG9uLmlkID09PSBpKSB7CgkJCQkJYnV0dG9uLmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpOwoJCQkJfSBlbHNlIHsKCQkJCQlidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgiYWN0aXZlIik7CgkJCQl9CgkJCX0pOwoKCQkJc3dpdGNoIChpKSB7CgkJCQljYXNlICdtYWluX3RhYic6CgkJCQkJY3RhYl9maXgoJ2VsZW1lbnRfbWFpbicsIGRpc3BsYXkpOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAna2V5c190YWInOgoJCQkJCWN0YWJfZml4KCdlbGVtZW50X2tleXMnLCBkaXNwbGF5KTsKCQkJCQlicmVhazsKCQkJCWNhc2UgJ292ZXJsYXlfdGFiJzoKCQkJCQljdGFiX2ZpeCgnZWxlbWVudF9vdmVybGF5JywgZGlzcGxheSk7CgkJCQkJYnJlYWs7CgkJCQljYXNlICdzZXR0aW5nc190YWInOgoJCQkJCWN0YWJfZml4KCdlbGVtZW50X3NldHRpbmcnLCBkaXNwbGF5KTsKCQkJCQlicmVhazsKCQkJCWNhc2UgJ3FyY29kZV90YWInOgoJCQkJCWN0YWJfZml4KCdlbGVtZW50X3FyY29kZScsIGRpc3BsYXkpOwoJCQkJCWJyZWFrOwoJCQl9CgkJCWJyZWFrOwoJfQp9Cgp0YWJfc3dpdGNoKCJtYWluX3RhYiIsICJjZW50ZXIiLCAibm9uZSIpOwoKdmFyIGl0ZXJmb3VuZCA9IDA7CnZhciB3YXNfZ2FtZV9mb3VuZCA9IGZhbHNlOwp2YXIgc2hvdWxkX3VwZGF0ZSA9IHRydWU7CnZhciBpc19tb3VzZV9pbnNpZGUgPSBmYWxzZTsKCmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZW50ZXIiLCAoKSA9PiB7IGlzX21vdXNlX2luc2lkZSA9IHRydWU7IH0pOwpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgKCkgPT4geyBpc19tb3VzZV9pbnNpZGUgPSBmYWxzZTsgfSk7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIiwgKGV2ZW50KSA9PiB7CglzaG91bGRfdXBkYXRlID0gKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSAidmlzaWJsZSIpOwp9KTsKCnZhciB1cGRhdGVydCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHsKCWlmIChhbGxvd19hdSAmJiBzaG91bGRfdXBkYXRlICYmIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yICE9ICJub25lIiAmJiBpc19tb3VzZV9pbnNpZGUpIHsKCQlhd2FpdCBsaXZlX3NlcnZlcigpOwoJfQp9LCA1MDAwKTsKCnNldEludGVydmFsKCgpID0+IHsKCWlmIChkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciAhPSAibm9uZSIgJiYgaXNfbW91c2VfaW5zaWRlKSB7CgkJdV9jaGF0KCk7CgkJZ19vbmxpbmVzKCk7Cgl9Cn0sIDIwMDApOwoKYXN5bmMgZnVuY3Rpb24gZ2F0aGVyKGluZm8sIGV4dHJhLCBmdW5jMiA9ICgpID0+IHsgfSkgewoJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKCQkkLmdldCgiL3RvZ2dsZT9mZWF0dXJlPSIgKyBpbmZvICsgIiZ2YWw9IiArIGV4dHJhLCAoclR4dCkgPT4gewoJCQlyZXNvbHZlKHJUeHQpOwoJCX0pLmZhaWwoKGVycm9yKSA9PiB7CgkJCXJlamVjdChlcnJvcik7CgkJfSk7Cgl9KTsKfQoKZnVuY3Rpb24gemluY19pbmZvKGluZm8sIGV4dHJhKSB7CgkkLmdldCgiL2dfaW5mbz9pbmZvPSIgKyBpbmZvLCAoclR4dCkgPT4gewoJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbmZvKSAhPSB1bmRlZmluZWQpIHsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5mbykuaW5uZXJIVE1MID0gZXh0cmEgKyByVHh0OwoJCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5mbykuc3R5bGUuZGlzcGxheSA9PSAibm9uZSIpCgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbmZvKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQl9Cgl9KTsKfQoKdmFyIHdhaXRpbmcgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CgkkLmdldCgiL2dfaW5mbz9pbmZvPWdhbWVmb3VuZCIsIChyVHh0KSA9PiB7CgkJd2FzX2dhbWVfZm91bmQgPSBwYXJzZUludChyVHh0KTsKCQlpZiAoIXdhc19nYW1lX2ZvdW5kKSB7CgkJCXppbmNfaW5mbygid2FpdGluZ19nYW1lIiwgImludGlhbGl6aW5nPGJyPmNsb3NpbmcgaW46ICIpOwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcl9kYXlzIikuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVsZW1lbnRfYnV0dG9ucyIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbGVtZW50X21haW4iKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZWxlbWVudF9jb25maWciKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQl0YWJfc3dpdGNoKCJtYWluX3RhYiIsICJjZW50ZXIiLCAibm9uZSIpOwoJCX0KCQllbHNlIHsKCQkJaXRlcmZvdW5kKys7CgoJCQlpZiAoaXRlcmZvdW5kID4gMikgewoJCQkJemluY19pbmZvKCJ1c2VyX2RheXMiLCAiZGF5cyBsZWZ0OiAiKTsKCQkJCXppbmNfaW5mbygibGFzdF91cGRhdGUiLCAiPHN0cm9uZz5VcGRhdGVkPC9zdHJvbmc+OiAiKTsKCQkJCXppbmNfaW5mbygiY2hhbmdlbG9ncyIsICI8c3Ryb25nPkNoYW5nZWxvZ3M8L3N0cm9uZz46ICIpOwoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhaXRpbmdfZ2FtZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZWxlbWVudF9idXR0b25zIikuc3R5bGUuZGlzcGxheSA9ICJmbGV4IjsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbGVtZW50X21haW4iKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlbGVtZW50X2NvbmZpZyIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJdGFiX3N3aXRjaCgibWFpbl90YWIiKTsKCQkJCXRhYl9zd2l0Y2goInBfdXBkYXRlcyIsIDIpOwoJCQkJY2xlYXJJbnRlcnZhbCh3YWl0aW5nKTsKCQkJfQoJCX0KCX0pCn0sIDI1MCk7Cgp2YXIgcnVubmluZyA9IHNldEludGVydmFsKCgpID0+IHsKCXRyeSB7CgkJJC5nZXQoIi9nX2luZm8/aW5mbz1ydW5uaW5nIiwgKHJUeHQpID0+IHsgfSkuZmFpbCgoZXJyb3IpID0+IHsKCQkJY19leGl0KCk7CgkJfSk7Cgl9IGNhdGNoIChlcnJvcikgewoJCWNvbnNvbGUubG9nKGVycm9yKTsKCQlhbGVydChlcnJvcik7CgkJY19leGl0KCk7Cgl9Cn0sIDUwMDApOwoKZnVuY3Rpb24gY19kaWFsb2coaWRfd2hlcmUsIGlkX2l0ZW0sIHN0eWxleiA9IHt9LCBlbGVtbnQgPSB7fSwgZnVuYzIgPSAoY19lbCkgPT4geyB9KSB7CglpZiAoaWRfaXRlbSA9PSAicm5kIikKCQlpZF9pdGVtID0gZ1JuZElkKCk7CgoJaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSkpIHsgY29uc29sZS5sb2coaWRfd2hlcmUsICJkb2VzbnQgZXhpc3QiKTsgcmV0dXJuOyB9CglpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfaXRlbSkpIHsgY29uc29sZS5sb2coaWRfaXRlbSwgImFscmVhZHkgZXhpc3RzIik7IHJldHVybjsgfQoKCWNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpYWxvZyIpOwoJZGlhbG9nLmlkID0gaWRfaXRlbTsKCglpZiAoc3R5bGV6KSB7CgkJT2JqZWN0LmFzc2lnbihkaWFsb2cuc3R5bGUsIHN0eWxleik7Cgl9CgoJaWYgKGVsZW1udCkgewoJCWZvciAobGV0IGtleSBpbiBlbGVtbnQpIHsKCQkJY29uc3QgZWxlbWVudCA9IGVsZW1udFtrZXldOwoJCQljb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudC50eXBlKTsKCQkJT2JqZWN0LmFzc2lnbihlbCwgZWxlbWVudC5wcm9wcyk7CgkJCU9iamVjdC5hc3NpZ24oZWwuc3R5bGUsIGVsZW1lbnQuc3R5bGVzKTsKCQkJZGlhbG9nLmFwcGVuZENoaWxkKGVsKTsKCQl9Cgl9CgoJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpLmFwcGVuZENoaWxkKGRpYWxvZyk7CgoJZnVuYzIoZGlhbG9nKTsKCgl1X2RpYWxvZ3MucHVzaChpZF9pdGVtKTsKfQoKZnVuY3Rpb24gY19kaXYoaWRfd2hlcmUsIGlkX2l0ZW0sIHN0eWxleiA9IHt9LCBlbGVtbnQgPSB7fSwgZnVuYzIgPSAoY19lbCkgPT4geyB9KSB7CglpZiAoaWRfaXRlbSA9PSAicm5kIikKCQlpZF9pdGVtID0gZ1JuZElkKCk7CgoJY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CglkaXYuaWQgPSBpZF9pdGVtOwoJaWYgKGVsZW1udCkgewoJCU9iamVjdC5hc3NpZ24oZGl2LCBlbGVtbnQpOwoKCQlpZiAoZWxlbW50LmV2ZW50TGlzdGVuZXIpIHsKCQkJZm9yIChsZXQgZXZlbnROYW1lIGluIGVsZW1udC5ldmVudExpc3RlbmVyKSB7CgkJCQlkaXYuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsICgpID0+IHsKCQkJCQllbGVtbnQuZXZlbnRMaXN0ZW5lcltldmVudE5hbWVdKHRoaXMpOwoJCQkJfSk7CgkJCX0KCQl9Cgl9CgoJaWYgKHN0eWxleikgewoJCU9iamVjdC5hc3NpZ24oZGl2LnN0eWxlLCBzdHlsZXopOwoJfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCWNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpOwoKCWZ1bmMyKGRpdik7Cn0KCmZ1bmN0aW9uIGNfdGFiX2J1dHRvbihpZF93aGVyZSwgYnV0dG9ucywgdHlwZXogPSAxKSB7Cgljb25zdCB0YWJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSk7CgoJYnV0dG9ucy5mb3JFYWNoKGFzeW5jIChidXR0b24sIGluZGV4KSA9PiB7CgkJdmFyIGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwoJCWJ0bi5jbGFzc05hbWUgPSAidGFiLWJ1dHRvbiI7CgkJYnRuLnNldEF0dHJpYnV0ZSh0eXBleiA9PSAxID8gImMtdGFiLWJ0biIgOiAoImMtdGFiIiArIHR5cGV6ICsgIi1idG4iKSwgIiIpOwoJCWJ0bi5pZCA9IGJ1dHRvbi5pZDsKCQlidG4uaW5uZXJIVE1MID0gYnV0dG9uLnRleHQ7CgoJCWlmIChpbmRleCA9PT0gMCkgewoJCQlidG4uc3R5bGUuYm9yZGVyVG9wUmlnaHRSYWRpdXMgPSAiMHB4IjsKCQl9IGVsc2UgaWYgKGluZGV4ID09PSBidXR0b25zLmxlbmd0aCAtIDEpIHsKCQkJYnRuLnN0eWxlLmJvcmRlclRvcExlZnRSYWRpdXMgPSAiMHB4IjsKCQl9IGVsc2UgewoJCQlidG4uc3R5bGUuYm9yZGVyVG9wUmlnaHRSYWRpdXMgPSAiMHB4IjsKCQkJYnRuLnN0eWxlLmJvcmRlclRvcExlZnRSYWRpdXMgPSAiMHB4IjsKCQl9CgoJCWJ0bi5vbmNsaWNrID0gKCkgPT4gewoJCQl0YWJfc3dpdGNoKGJ0bi5pZCwgdHlwZXopOwoJCX07CgoJCXRhYkNvbnRhaW5lci5hcHBlbmRDaGlsZChidG4pOwoJfSk7Cn0KCmZ1bmN0aW9uIGdfdG1fZHQodGltZXN0YW1wLCBocm1pbiA9IDEpIHsKCXZhciBkYXRlID0gbmV3IERhdGUoK3RpbWVzdGFtcCAqIDEwMDApOwoJaWYgKGhybWluID09IDEpIHsKCQl2YXIgaG91ciA9ICgiMCIgKyBkYXRlLmdldEhvdXJzKCkpLnN1YnN0cigtMik7CgkJdmFyIG1pbnV0ZXMgPSAoIjAiICsgZGF0ZS5nZXRNaW51dGVzKCkpLnN1YnN0cigtMik7CgkJcmV0dXJuIChob3VyICsgIjoiICsgbWludXRlcyk7Cgl9CgllbHNlIGlmIChocm1pbiA9PSAyKSB7CgkJdmFyIGhvdXIgPSAoIjAiICsgZGF0ZS5nZXRIb3VycygpKS5zdWJzdHIoLTIpOwoJCXZhciBtaW51dGVzID0gKCIwIiArIGRhdGUuZ2V0TWludXRlcygpKS5zdWJzdHIoLTIpOwoJCXZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCXZhciBtb250aCA9ICgiMCIgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkpLnN1YnN0cigtMik7CgkJdmFyIGRheSA9ICgiMCIgKyBkYXRlLmdldERhdGUoKSkuc3Vic3RyKC0yKTsKCQlyZXR1cm4gKGRheSArICIvIiArIG1vbnRoICsgIi8iICsgeWVhcikgKyAiIC0gIiArIChob3VyICsgIjoiICsgbWludXRlcyk7Cgl9CgllbHNlIHsKCQl2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKCQl2YXIgbW9udGggPSAoIjAiICsgKGRhdGUuZ2V0TW9udGgoKSArIDEpKS5zdWJzdHIoLTIpOwoJCXZhciBkYXkgPSAoIjAiICsgZGF0ZS5nZXREYXRlKCkpLnN1YnN0cigtMik7CgkJcmV0dXJuIChkYXkgKyAiLyIgKyBtb250aCArICIvIiArIHllYXIpOwoJfQp9CgpmdW5jdGlvbiBjX2J0bihpZF93aGVyZSwgaWRfaXRlbSwgdGV4dCwgZnVuYzIgPSAoY19lbCkgPT4geyB9LCB0b29sdGlwID0gIiIsIHN0eWxleiA9IHt9LCBlbGVtbnQgPSB7fSkgewoJaWYgKGlkX2l0ZW0gPT0gInJuZCIpCgkJaWRfaXRlbSA9IGdSbmRJZCgpOwoKCWlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpKSB7IGNvbnNvbGUubG9nKGlkX3doZXJlLCAiZG9lc250IGV4aXN0Iik7IHJldHVybjsgfQoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pKSB7IGNvbnNvbGUubG9nKGlkX2l0ZW0sICJhbHJlYWR5IGV4aXN0cyIpOyByZXR1cm47IH0KCgljb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKCWJ1dHRvbi50eXBlID0gImJ1dHRvbiI7CglidXR0b24uY2xhc3NMaXN0LmFkZCgibmV3YnV0dG9uIik7CglidXR0b24uaWQgPSBpZF9pdGVtOwoJYnV0dG9uLmlubmVySFRNTCA9IHRleHQ7CgoJaWYgKGVsZW1udCkgewoJCU9iamVjdC5hc3NpZ24oYnV0dG9uLCBlbGVtbnQpOwoKCQlpZiAoZWxlbW50LmV2ZW50TGlzdGVuZXIpIHsKCQkJZm9yIChsZXQgZXZlbnROYW1lIGluIGVsZW1udC5ldmVudExpc3RlbmVyKSB7CgkJCQlidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsICgpID0+IHsKCQkJCQllbGVtbnQuZXZlbnRMaXN0ZW5lcltldmVudE5hbWVdKHRoaXMpOwoJCQkJfSk7CgkJCX0KCQl9Cgl9CgoJaWYgKHN0eWxleikgewoJCU9iamVjdC5hc3NpZ24oYnV0dG9uLnN0eWxlLCBzdHlsZXopOwoJfQoKCWJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gewoJCWZ1bmMyKGJ1dHRvbik7Cgl9OwoKCWlmICh0b29sdGlwICE9ICIiKSB7CgkJYnV0dG9uLnNldEF0dHJpYnV0ZSgiZGF0YS10dGlwIiwgdG9vbHRpcCk7Cgl9CgoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7Cn0KCmZ1bmN0aW9uIGNfaHIoaWRfd2hlcmUgPSBwYXRoLCBtYXJnaW4gPSB0cnVlLCBzdHlsZXogPSB7fSkgewoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJdmFyIGhyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaHIiKTsKCWlmIChtYXJnaW4pCgkJaHIuc3R5bGUubWFyZ2luTGVmdCA9ICItMjBweCI7CgoJaHIuc3R5bGUuYm9yZGVyID0gIjBweCI7Cgloci5zdHlsZS5ib3JkZXJUb3AgPSAiMXB4IHNvbGlkIHZhcigtLWMtaHIpIjsKCglpZiAoc3R5bGV6KSB7CgkJT2JqZWN0LmFzc2lnbihoci5zdHlsZSwgc3R5bGV6KTsKCX0KCgljb250YWluZXIuYXBwZW5kQ2hpbGQoaHIpOwp9CgpmdW5jdGlvbiBjX2JyKGlkX3doZXJlID0gcGF0aCwgYW1vdW50ID0gMSkgewoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFtb3VudDsgaW5kZXgrKykgewoJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJiciIpKTsKCX0KfQoKZnVuY3Rpb24gY19jaGVja2JveChpZF93aGVyZSwgaWRfaXRlbSwgdGV4dCwgdG9vbHRpcCA9ICIiLCBmdW5jMiA9IChjX2VsKSA9PiB7IH0pIHsKCWlmIChpZF9pdGVtID09ICJybmQiKQoJCWlkX2l0ZW0gPSBnUm5kSWQoKTsKCglpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKSkgeyBjb25zb2xlLmxvZyhpZF93aGVyZSwgImRvZXNudCBleGlzdCIpOyByZXR1cm47IH0KCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF9pdGVtKSkgeyBjb25zb2xlLmxvZyhpZF9pdGVtLCAiYWxyZWFkeSBleGlzdHMiKTsgcmV0dXJuOyB9CgoJY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CglkaXYuY2xhc3NMaXN0LmFkZCgnZWxlbWl0ZW1zX2JnJyk7CglkaXYuaHRtbEZvciA9IGlkX2l0ZW07CglkaXYuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtZmxleCI7CgoJY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJY2hlY2tib3gudHlwZSA9ICJjaGVja2JveCI7CgljaGVja2JveC5pZCA9IGlkX2l0ZW07CgljaGVja2JveC5vbmNoYW5nZSA9ICgpID0+IHsKCQl1X3NlcnZlcigpOwoJCWZ1bmMyKGNoZWNrYm94KTsKCX07CgoJY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsYWJlbCIpOwoJbGFiZWwuaHRtbEZvciA9IGlkX2l0ZW07CglsYWJlbC5pbm5lckhUTUwgPSB0ZXh0OwoJbGFiZWwuaWQgPSBpZF9pdGVtICsgInp6enp6IjsKCgljb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSk7CgoJZGl2LmFwcGVuZENoaWxkKGNoZWNrYm94KTsKCWRpdi5hcHBlbmRDaGlsZChsYWJlbCk7CgoJY29uc3QgaV90b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaSIpOwoJaWYgKHRvb2x0aXAgIT0gIiIpIHsKCQlpX3Rvb2x0aXAuY2xhc3NOYW1lID0gImZhIGZhLXF1ZXN0aW9uLWNpcmNsZSBmYS0yIjsKCQlpX3Rvb2x0aXAuc2V0QXR0cmlidXRlKCJhcmlhLWhpZGRlbiIsICJ0cnVlIik7CgkJaV90b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKCQlpX3Rvb2x0aXAuc3R5bGUuZm9udFdlaWdodCA9ICI5MDAiOwoJCWlfdG9vbHRpcC5zdHlsZS5mb250U2l6ZSA9ICIxNXB4IjsKCQlpX3Rvb2x0aXAuc3R5bGUub3BhY2l0eSA9ICIwLjUiOwoJCWlfdG9vbHRpcC5zdHlsZS5tYXJnaW5MZWZ0ID0gIjhweCI7CgoJCWlfdG9vbHRpcC5zZXRBdHRyaWJ1dGUoImRhdGEtdHRpcCIsIHRvb2x0aXApOwoJfQoKCWNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpOwoKCWlmICh0b29sdGlwICE9ICIiKSB7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKGlfdG9vbHRpcCk7Cgl9CgoJdV9ib29sLnB1c2goaWRfaXRlbSk7Cn0KCmZ1bmN0aW9uIGNfY3VzdG9tc2V0dGluZ3MoaWRfd2hlcmUsIGlkX2l0ZW0sIHRvb2x0aXAgPSAiIiwgZnVuYzIgPSAoY19lbCkgPT4geyB9LCBzdHlsZXogPSB7fSkgewoJaWYgKGlkX2l0ZW0gPT0gInJuZCIpCgkJaWRfaXRlbSA9IGdSbmRJZCgpOwoKCWlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpKSB7IGNvbnNvbGUubG9nKGlkX3doZXJlLCAiZG9lc250IGV4aXN0Iik7IHJldHVybjsgfQoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pKSB7IGNvbnNvbGUubG9nKGlkX2l0ZW0sICJhbHJlYWR5IGV4aXN0cyIpOyByZXR1cm47IH0KCgljb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSk7CgoJY29uc3QgaV90b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaSIpOwoJaV90b29sdGlwLmNsYXNzTmFtZSA9ICJmYSBmYS1jb2ciOwoJaV90b29sdGlwLnNldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iLCAidHJ1ZSIpOwoJaV90b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKCWlfdG9vbHRpcC5zdHlsZS5mb250V2VpZ2h0ID0gIjkwMCI7CglpX3Rvb2x0aXAuc3R5bGUuZm9udFNpemUgPSAiMTVweCI7CglpX3Rvb2x0aXAuc3R5bGUub3BhY2l0eSA9ICIwLjUiOwoJaV90b29sdGlwLnN0eWxlLm1hcmdpbkxlZnQgPSAiOHB4IjsKCWlfdG9vbHRpcC5zdHlsZS5jdXJzb3IgPSAicG9pbnRlciI7CglpX3Rvb2x0aXAuY2lkID0gaWRfaXRlbSArICJfZGlhbG9nIjsKCglpZiAodG9vbHRpcCAhPSAiIikKCQlpX3Rvb2x0aXAuc2V0QXR0cmlidXRlKCJkYXRhLXR0aXAiLCB0b29sdGlwKTsKCglpX3Rvb2x0aXAub25jbGljayA9IGFzeW5jICgpID0+IHsKCQlzX21vZGFsKGlfdG9vbHRpcC5jaWQpOwoJfQoKCWNfZGlhbG9nKGlkX3doZXJlLCBpX3Rvb2x0aXAuY2lkLCBzdHlsZXopOwoKCWZ1bmMyKGlfdG9vbHRpcCk7CgoJY29udGFpbmVyLmFwcGVuZENoaWxkKGlfdG9vbHRpcCk7Cgp9CgpmdW5jdGlvbiBjX3NfZmxvYXQoaWRfd2hlcmUsIGlkX2l0ZW0sIHRleHQsIG1pbiwgbWF4LCBzdGVwX3ZhbCwgZGVmYXVsdF92YWwsIHRvb2x0aXApIHsKCWlmIChpZF9pdGVtID09ICJybmQiKQoJCWlkX2l0ZW0gPSBnUm5kSWQoKTsKCglpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKSkgeyBjb25zb2xlLmxvZyhpZF93aGVyZSwgImRvZXNudCBleGlzdCIpOyByZXR1cm47IH0KCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF9pdGVtKSkgeyBjb25zb2xlLmxvZyhpZF9pdGVtLCAiYWxyZWFkeSBleGlzdHMiKTsgcmV0dXJuOyB9CgoJdmFyIHN0ZXB2YWxfY2Vyb3MgPSAoU3RyaW5nKHN0ZXBfdmFsKS5zcGxpdCgiLiIpWzFdIHx8ICIiKTsKCXN0ZXB2YWxfY2Vyb3MgPSBzdGVwdmFsX2Nlcm9zLmxlbmd0aDsKCgljb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCWRpdi5jbGFzc0xpc3QuYWRkKCdsZW5ndGgnLCAnZl9zbGlkZXJfYmcnKTsKCWRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWluJywgbWluKTsKCWRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWF4JywgbWF4KTsKCWRpdi5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1mbGV4IjsKCgljb25zdCB0aXRsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJdGl0bGVEaXYuY2xhc3NMaXN0LmFkZCgnbF90aXRsZScsICdmX3RpdGxlJyk7Cgl0aXRsZURpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGVuZ3RoJywgZGVmYXVsdF92YWwpOwoJdGl0bGVEaXYudGV4dENvbnRlbnQgPSB0ZXh0ICsgIjogIjsKCgljb25zdCBudW1iZXJfaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJbnVtYmVyX2lucHV0LmNsYXNzTGlzdC5hZGQoIm51bWJlcnNsaWRlciIpOwoJbnVtYmVyX2lucHV0LnR5cGUgPSAibnVtYmVyIjsKCW51bWJlcl9pbnB1dC5wYXR0ZXJuID0gIlswLTldKiI7CgludW1iZXJfaW5wdXQuaW5wdXRNb2RlID0gIm51bWVyaWMiOwoJbnVtYmVyX2lucHV0LmlkID0gaWRfaXRlbTsKCW51bWJlcl9pbnB1dC5taW4gPSBtaW47CgludW1iZXJfaW5wdXQubWF4ID0gbWF4OwoJbnVtYmVyX2lucHV0LnN0ZXAgPSBzdGVwX3ZhbDsKCW51bWJlcl9pbnB1dC52YWx1ZSA9IGRlZmF1bHRfdmFsOwoJbnVtYmVyX2lucHV0Lm9uaW5wdXQgPSAoKSA9PiB7CgkJdV9zZXJ2ZXIoKTsKCQlhcHBseUZpbGwobnVtYmVyX2lucHV0LCB0cnVlLCBzdGVwdmFsX2Nlcm9zLCBudW1iZXJfaW5wdXQudmFsdWUpOwoJfTsKCgljb25zdCBtaW51c19idG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKCW1pbnVzX2J0bi5jbGFzc0xpc3QuYWRkKCJjb250cm9scy1udW1iZXIiKTsKCW1pbnVzX2J0bi5zdHlsZS5kaXNwbGF5ID0gImlubGluZSI7CgltaW51c19idG4uc3R5bGUubWFyZ2luTGVmdCA9ICI4cHgiOwoJbWludXNfYnRuLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjhweCI7CgltaW51c19idG4uaW5uZXJIVE1MID0gKCImIzg3MjI7IikudHJpbSgpOwoJbWludXNfYnRuLm9uY2xpY2sgPSAoKSA9PiB7CgkJc3VtcmVzdF9idXR0b25zKGlkX2l0ZW0sIDAsIG1pbiwgbWF4LCAxLCBzdGVwdmFsX2Nlcm9zKTsKCQl1X3NlcnZlcigpOwoJCWFwcGx5RmlsbChudW1iZXJfaW5wdXQsIHRydWUsIHN0ZXB2YWxfY2Vyb3MsIG51bWJlcl9pbnB1dC52YWx1ZSk7Cgl9OwoKCWNvbnN0IHBsdXNfYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CglwbHVzX2J0bi5jbGFzc0xpc3QuYWRkKCJjb250cm9scy1udW1iZXIiKTsKCXBsdXNfYnRuLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lIjsKCXBsdXNfYnRuLnN0eWxlLm1hcmdpbkxlZnQgPSAiOHB4IjsKCXBsdXNfYnRuLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjhweCI7CglwbHVzX2J0bi5pbm5lckhUTUwgPSAoIiYjNDM7IikudHJpbSgpOwoJcGx1c19idG4ub25jbGljayA9ICgpID0+IHsKCQlzdW1yZXN0X2J1dHRvbnMoaWRfaXRlbSwgMSwgbWluLCBtYXgsIDEsIHN0ZXB2YWxfY2Vyb3MpOwoJCXVfc2VydmVyKCk7CgkJYXBwbHlGaWxsKG51bWJlcl9pbnB1dCwgdHJ1ZSwgc3RlcHZhbF9jZXJvcywgbnVtYmVyX2lucHV0LnZhbHVlKTsKCX07CgoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJZGl2LmFwcGVuZENoaWxkKHRpdGxlRGl2KTsKCWRpdi5hcHBlbmRDaGlsZChtaW51c19idG4pOwoJZGl2LmFwcGVuZENoaWxkKG51bWJlcl9pbnB1dCk7CglkaXYuYXBwZW5kQ2hpbGQocGx1c19idG4pOwoKCWNvbnN0IGlfdG9vbHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImkiKTsKCWlmICh0b29sdGlwICE9ICIiKSB7CgkJaV90b29sdGlwLmNsYXNzTmFtZSA9ICJmYSBmYS1xdWVzdGlvbi1jaXJjbGUgZmEtMiI7CgkJaV90b29sdGlwLnNldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iLCAidHJ1ZSIpOwoJCWlfdG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayI7CgkJaV90b29sdGlwLnN0eWxlLmZvbnRXZWlnaHQgPSAiOTAwIjsKCQlpX3Rvb2x0aXAuc3R5bGUuZm9udFNpemUgPSAiMTVweCI7CgkJaV90b29sdGlwLnN0eWxlLm9wYWNpdHkgPSAiMC41IjsKCQlpX3Rvb2x0aXAuc3R5bGUubWFyZ2luTGVmdCA9ICI4cHgiOwoKCQlpX3Rvb2x0aXAuc2V0QXR0cmlidXRlKCJkYXRhLXR0aXAiLCB0b29sdGlwKTsKCX0KCgljb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KTsKCglpZiAodG9vbHRpcCAhPSAiIikgewoJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChpX3Rvb2x0aXApOwoJfQoKCXVfZmxvYXQucHVzaChpZF9pdGVtKTsKfQoKZnVuY3Rpb24gY19pbWcoaWRfd2hlcmUsIGlkX2l0ZW0sIGltYWdlLCB3aWR0aCwgaGVpZ2h0LCBzdHlsZXogPSB7fSwgZWxlbW50ID0ge30pIHsKCWlmIChpZF9pdGVtID09ICJybmQiKQoJCWlkX2l0ZW0gPSBnUm5kSWQoKTsKCglpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKSkgeyBjb25zb2xlLmxvZyhpZF93aGVyZSwgImRvZXNudCBleGlzdCIpOyByZXR1cm47IH0KCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF9pdGVtKSkgeyBjb25zb2xlLmxvZyhpZF9pdGVtLCAiYWxyZWFkeSBleGlzdHMiKTsgcmV0dXJuOyB9CgoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CgoJaW1nLnNldEF0dHJpYnV0ZSgnaWQnLCBpZF9pdGVtKTsKCWltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGltYWdlKTsKCWltZy5zZXRBdHRyaWJ1dGUoJ2FsdCcsICJ1X2F2YXRhciIpOwoJaW1nLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3aWR0aCk7CglpbWcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoZWlnaHQpOwoKCWlmIChlbGVtbnQpIHsKCQlPYmplY3QuYXNzaWduKGltZywgZWxlbW50KTsKCgkJaWYgKGVsZW1udC5ldmVudExpc3RlbmVyKSB7CgkJCWZvciAobGV0IGV2ZW50TmFtZSBpbiBlbGVtbnQuZXZlbnRMaXN0ZW5lcikgewoJCQkJaW1nLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoKSA9PiB7CgkJCQkJZWxlbW50LmV2ZW50TGlzdGVuZXJbZXZlbnROYW1lXSh0aGlzKTsKCQkJCX0pOwoJCQl9CgkJfQoJfQoKCWlmIChzdHlsZXopIHsKCQlPYmplY3QuYXNzaWduKGltZy5zdHlsZSwgc3R5bGV6KTsKCX0KCgljb250YWluZXIuYXBwZW5kQ2hpbGQoaW1nKTsKfQoKZnVuY3Rpb24gY190ZXh0YXJlYShpZF93aGVyZSwgaWRfaXRlbSwgaGlkZGVuID0gZmFsc2UsIGxhYmVsID0gIiIsIHN0eWxleiA9IHt9LCBlbGVtbnQgPSB7fSkgewoJaWYgKGlkX2l0ZW0gPT0gInJuZCIpCgkJaWRfaXRlbSA9IGdSbmRJZCgpOwoKCWlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpKSB7IGNvbnNvbGUubG9nKGlkX3doZXJlLCAiZG9lc250IGV4aXN0Iik7IHJldHVybjsgfQoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pKSB7IGNvbnNvbGUubG9nKGlkX2l0ZW0sICJhbHJlYWR5IGV4aXN0cyIpOyByZXR1cm47IH0KCgljb25zdCB0ZXh0Ym94X2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoJaWYgKGxhYmVsICE9PSAiIikgewoJCXRleHRib3hfZGl2LmNsYXNzTGlzdC5hZGQoInRleHRib3giKTsKCgkJY29uc3QgbGFiZWxFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKCQlsYWJlbEVsZW0udGV4dENvbnRlbnQgPSBsYWJlbC50cmltKCk7CgkJbGFiZWxFbGVtLmlkID0gaWRfaXRlbSArICJsYmwiOwoJCWxhYmVsRWxlbS5zdHlsZS5kaXNwbGF5ID0gaGlkZGVuID8gIm5vbmUiIDogImlubGluZS1ibG9jayI7CgkJbGFiZWxFbGVtLnNldEF0dHJpYnV0ZSgiZm9yIiwgaWRfaXRlbSk7CgoJCWlmIChzdHlsZXogJiYgc3R5bGV6LmxhYmVseikgewoJCQlPYmplY3QuYXNzaWduKHRleHRib3hfZGl2LnN0eWxlLCBzdHlsZXoubGFiZWx6KTsKCQl9CgkJdGV4dGJveF9kaXYuYXBwZW5kQ2hpbGQobGFiZWxFbGVtKTsKCX0KCgljb25zdCB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7CgoJdGV4dGFyZWEuaWQgPSBpZF9pdGVtOwoKCWlmIChlbGVtbnQpIHsKCQlPYmplY3QuYXNzaWduKHRleHRhcmVhLCBlbGVtbnQpOwoKCQlpZiAoZWxlbW50LmV2ZW50TGlzdGVuZXIpIHsKCQkJZm9yIChsZXQgZXZlbnROYW1lIGluIGVsZW1udC5ldmVudExpc3RlbmVyKSB7CgkJCQl0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgKCkgPT4gewoJCQkJCWVsZW1udC5ldmVudExpc3RlbmVyW2V2ZW50TmFtZV0odGhpcyk7CgkJCQl9KTsKCQkJfQoJCX0KCX0KCgl0ZXh0YXJlYS5zdHlsZS5kaXNwbGF5ID0gaGlkZGVuID8gIm5vbmUiIDogImlubGluZS1ibG9jayI7CgoJaWYgKHN0eWxleikgewoJCU9iamVjdC5hc3NpZ24odGV4dGFyZWEuc3R5bGUsIHN0eWxleik7CgoJCWlmIChzdHlsZXoudGV4dGJveCkgewoJCQlPYmplY3QuYXNzaWduKHRleHRib3hfZGl2LnN0eWxlLCBzdHlsZXoudGV4dGJveCk7CgkJfQoJfQoKCWlmIChsYWJlbCAhPT0gIiIpIHsKCQl0ZXh0Ym94X2Rpdi5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7Cgl9IGVsc2UgewoJCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCQljb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dGFyZWEpOwoJfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCWlmIChsYWJlbCA9PT0gIiIgJiYgY29udGFpbmVyKSB7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRhcmVhKTsKCX0gZWxzZSBpZiAoY29udGFpbmVyKSB7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRib3hfZGl2KTsKCX0KfQoKZnVuY3Rpb24gY190ZXh0Ym94KGlkX3doZXJlLCBpZF9pdGVtLCBoaWRkZW4gPSBmYWxzZSwgbGFiZWwgPSAiIiwgdG9vbHRpcCA9ICIiLCBzdHlsZXogPSB7fSwgZWxlbW50ID0ge30sIGRpc2FibGVzdHlsZSA9IGZhbHNlKSB7CgoJaWYgKGlkX2l0ZW0gPT0gInJuZCIpCgkJaWRfaXRlbSA9IGdSbmRJZCgpOwoKCWlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpKSB7IGNvbnNvbGUubG9nKGlkX3doZXJlLCAiZG9lc250IGV4aXN0Iik7IHJldHVybjsgfQoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pKSB7IGNvbnNvbGUubG9nKGlkX2l0ZW0sICJhbHJlYWR5IGV4aXN0cyIpOyByZXR1cm47IH0KCgljb25zdCB0ZXh0Ym94X2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoJaWYgKGxhYmVsICE9PSAiIikgewoJCXRleHRib3hfZGl2LmNsYXNzTGlzdC5hZGQoInRleHRib3giKTsKCgkJY29uc3QgbGFiZWxFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKCQlsYWJlbEVsZW0udGV4dENvbnRlbnQgPSBsYWJlbC50cmltKCk7CgkJbGFiZWxFbGVtLmlkID0gaWRfaXRlbSArICJsYmwiOwoJCWxhYmVsRWxlbS5zdHlsZS5kaXNwbGF5ID0gaGlkZGVuID8gIm5vbmUiIDogImlubGluZS1ibG9jayI7CgkJbGFiZWxFbGVtLnNldEF0dHJpYnV0ZSgiZm9yIiwgaWRfaXRlbSk7CgoJCWlmIChzdHlsZXogJiYgc3R5bGV6LmxhYmVseikgewoJCQlPYmplY3QuYXNzaWduKHRleHRib3hfZGl2LnN0eWxlLCBzdHlsZXoubGFiZWx6KTsKCQl9CgoJCXRleHRib3hfZGl2LmFwcGVuZENoaWxkKGxhYmVsRWxlbSk7Cgl9CgoJY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJaW5wdXQuc2V0QXR0cmlidXRlKCJ0eXBlIiwgInRleHQiKTsKCWlucHV0LnNldEF0dHJpYnV0ZSgiaWQiLCBpZF9pdGVtKTsKCglpZiAoZGlzYWJsZXN0eWxlKQoJCWlucHV0LnNldEF0dHJpYnV0ZSgnZGF0YS1ub3ZhbGlkaW52YWxpZCcsICcnKTsKCglpZiAodG9vbHRpcCAhPSAiIikgewoJCWlucHV0LnNldEF0dHJpYnV0ZSgiZGF0YS10dGlwIiwgdG9vbHRpcCkKCX0KCglpZiAoZWxlbW50KSB7CgkJT2JqZWN0LmFzc2lnbihpbnB1dCwgZWxlbW50KTsKCgkJaWYgKGVsZW1udC5ldmVudExpc3RlbmVyKSB7CgkJCWZvciAobGV0IGV2ZW50TmFtZSBpbiBlbGVtbnQuZXZlbnRMaXN0ZW5lcikgewoJCQkJaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIChldikgPT4gewoJCQkJCWVsZW1udC5ldmVudExpc3RlbmVyW2V2ZW50TmFtZV0oaW5wdXQsIGV2KTsKCQkJCX0pOwoJCQl9CgkJfQoJfQoKCWlucHV0LnN0eWxlLmRpc3BsYXkgPSBoaWRkZW4gPyAibm9uZSIgOiAiaW5saW5lLWJsb2NrIjsKCglpZiAoc3R5bGV6KSB7CgkJT2JqZWN0LmFzc2lnbihpbnB1dC5zdHlsZSwgc3R5bGV6KTsKCgkJaWYgKHN0eWxlei50ZXh0Ym94KSB7CgkJCU9iamVjdC5hc3NpZ24odGV4dGJveF9kaXYuc3R5bGUsIHN0eWxlei50ZXh0Ym94KTsKCQl9Cgl9CgoJaWYgKGxhYmVsICE9PSAiIikgewoJCXRleHRib3hfZGl2LmFwcGVuZENoaWxkKGlucHV0KTsKCX0gZWxzZSB7CgkJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7Cgl9CgoJY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpOwoJaWYgKGxhYmVsID09PSAiIiAmJiBjb250YWluZXIpIHsKCQljb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpOwoJfSBlbHNlIGlmIChjb250YWluZXIpIHsKCQljb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dGJveF9kaXYpOwoJfQp9CgpmdW5jdGlvbiBjX3RhYmxlKGlkX3doZXJlLCBpZF9pdGVtLCB0ZXh0LCBzdHlsZXogPSB7fSwgZWxlbW50ID0ge30pIHsKCglpZiAoaWRfaXRlbSA9PSAicm5kIikKCQlpZF9pdGVtID0gZ1JuZElkKCk7CgoJaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSkpIHsgY29uc29sZS5sb2coaWRfd2hlcmUsICJkb2VzbnQgZXhpc3QiKTsgcmV0dXJuOyB9CglpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfaXRlbSkpIHsgY29uc29sZS5sb2coaWRfaXRlbSwgImFscmVhZHkgZXhpc3RzIik7IHJldHVybjsgfQoKCWNvbnN0IHRleHRfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGFibGUiKTsKCglpZiAodGV4dCAhPSAiIikKCQl0ZXh0X2Rpdi5pbm5lckhUTUwgPSB0ZXh0LnRyaW0oKTsKCgl0ZXh0X2Rpdi5pZCA9IGlkX2l0ZW07CgoJaWYgKGVsZW1udCkgewoJCU9iamVjdC5hc3NpZ24odGV4dF9kaXYsIGVsZW1udCk7CgoJCWlmIChlbGVtbnQuZXZlbnRMaXN0ZW5lcikgewoJCQlmb3IgKGxldCBldmVudE5hbWUgaW4gZWxlbW50LmV2ZW50TGlzdGVuZXIpIHsKCQkJCXRleHRfZGl2LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoKSA9PiB7CgkJCQkJZWxlbW50LmV2ZW50TGlzdGVuZXJbZXZlbnROYW1lXSh0aGlzKTsKCQkJCX0pOwoJCQl9CgkJfQoJfQoKCWlmIChzdHlsZXopIHsKCQlPYmplY3QuYXNzaWduKHRleHRfZGl2LnN0eWxlLCBzdHlsZXopOwoJfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCWNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0X2Rpdik7Cn0KCmZ1bmN0aW9uIGNfdGV4dChpZF93aGVyZSwgaWRfaXRlbSwgdGV4dCwgc3R5bGV6ID0ge30sIGVsZW1udCA9IHt9KSB7CgoJaWYgKGlkX2l0ZW0gPT0gInJuZCIpCgkJaWRfaXRlbSA9IGdSbmRJZCgpOwoKCWlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfd2hlcmUpKSB7IGNvbnNvbGUubG9nKGlkX3doZXJlLCAiZG9lc250IGV4aXN0Iik7IHJldHVybjsgfQoJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pKSB7IGNvbnNvbGUubG9nKGlkX2l0ZW0sICJhbHJlYWR5IGV4aXN0cyIpOyByZXR1cm47IH0KCgljb25zdCB0ZXh0X2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKCXRleHRfZGl2LmNsYXNzTGlzdC5hZGQoInRleHQiKTsKCglpZiAodGV4dCkKCQl0ZXh0X2Rpdi5pbm5lckhUTUwgPSB0ZXh0LnRyaW0oKTsKCgl0ZXh0X2Rpdi5pZCA9IGlkX2l0ZW07CgoJaWYgKGVsZW1udCkgewoJCU9iamVjdC5hc3NpZ24odGV4dF9kaXYsIGVsZW1udCk7CgoJCWlmIChlbGVtbnQuZXZlbnRMaXN0ZW5lcikgewoJCQlmb3IgKGxldCBldmVudE5hbWUgaW4gZWxlbW50LmV2ZW50TGlzdGVuZXIpIHsKCQkJCXRleHRfZGl2LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoKSA9PiB7CgkJCQkJZWxlbW50LmV2ZW50TGlzdGVuZXJbZXZlbnROYW1lXSh0aGlzKTsKCQkJCX0pOwoJCQl9CgkJfQoJfQoKCWlmIChzdHlsZXopIHsKCQlPYmplY3QuYXNzaWduKHRleHRfZGl2LnN0eWxlLCBzdHlsZXopOwoJfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCWNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0X2Rpdik7Cn0KCmZ1bmN0aW9uIGNfY29tYm9ib3gyKGlkX3doZXJlLCBpZF9pdGVtLCBvcHRpb25zLCBoaWRkZW4gPSBmYWxzZSwgdG9vbHRpcCA9ICIiLCBzdHlsZXogPSB7fSkgewoKCWlmIChpZF9pdGVtID09ICJybmQiKQoJCWlkX2l0ZW0gPSBnUm5kSWQoKTsKCglpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKSkgeyBjb25zb2xlLmxvZyhpZF93aGVyZSwgImRvZXNudCBleGlzdCIpOyByZXR1cm47IH0KCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF9pdGVtKSkgeyBjb25zb2xlLmxvZyhpZF9pdGVtLCAiYWxyZWFkeSBleGlzdHMiKTsgcmV0dXJuOyB9CgoJY29uc3Qgc2VsZWN0X2VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKTsKCXNlbGVjdF9lbGVtLmNsYXNzTGlzdC5hZGQoInNlbGVjdC1kcm9wZG93biIpOwoJc2VsZWN0X2VsZW0uaWQgPSBpZF9pdGVtOwoKCWlmICh0b29sdGlwICE9ICIiKSB7CgkJc2VsZWN0X2VsZW0uc2V0QXR0cmlidXRlKCJkYXRhLXR0aXAiLCB0b29sdGlwKTsKCX0KCglvcHRpb25zLmZvckVhY2goKG9wdGlvbiwgaW5kZXgpID0+IHsKCQljb25zdCBvcHRpb25fZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwoJCW9wdGlvbl9lbGVtLnZhbHVlID0gaW5kZXg7CgkJb3B0aW9uX2VsZW0udGV4dCA9IG9wdGlvbjsKCQlzZWxlY3RfZWxlbS5hZGQob3B0aW9uX2VsZW0pOwoJfSk7CgoJc2VsZWN0X2VsZW0uc3R5bGUuZGlzcGxheSA9ICgoaGlkZGVuID09IHRydWUpID8gKCJub25lIikgOiAoImlubGluZS1ibG9jayIpKTsKCglpZiAoc3R5bGV6KSB7CgkJT2JqZWN0LmFzc2lnbihzZWxlY3RfZWxlbS5zdHlsZSwgc3R5bGV6KTsKCX0KCgljb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSk7Cgljb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0X2VsZW0pOwp9CgpmdW5jdGlvbiBjX2NvbWJvYm94KGlkX3doZXJlLCBpZF9pdGVtLCB0ZXh0LCBtaW4sIG1heCwgc2FtZWxpbmUgPSBmYWxzZSwgdG9vbHRpcCA9ICIiLCBmdW5jMiA9IChjX2VsKSA9PiB7IH0sIHN0eWxleiA9IHt9KSB7CglpZiAoaWRfaXRlbSA9PSAicm5kIikKCQlpZF9pdGVtID0gZ1JuZElkKCk7CgoJaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSkpIHsgY29uc29sZS5sb2coaWRfd2hlcmUsICJkb2VzbnQgZXhpc3QiKTsgcmV0dXJuOyB9CglpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfaXRlbSkpIHsgY29uc29sZS5sb2coaWRfaXRlbSwgImFscmVhZHkgZXhpc3RzIik7IHJldHVybjsgfQoKCWNvbnN0IHRleHRfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CglpZiAodGV4dCAhPSAiIikgewoJCXRleHRfZGl2LmNsYXNzTGlzdC5hZGQoInRleHQiKTsKCQl0ZXh0X2Rpdi50ZXh0Q29udGVudCA9IHRleHQudHJpbSgpOwoJfQoKCWNvbnN0IHNlbGVjdF9lbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2VsZWN0Iik7CglzZWxlY3RfZWxlbS5jbGFzc0xpc3QuYWRkKCJzZWxlY3QtZHJvcGRvd24iKTsKCXNlbGVjdF9lbGVtLmlkID0gaWRfaXRlbTsKCXNlbGVjdF9lbGVtLnN0eWxlLmhlaWdodCA9ICI0MnB4IjsKCglpZiAoc2FtZWxpbmUpCgkJc2VsZWN0X2VsZW0uc3R5bGUubWFyZ2luUmlnaHQgPSAiMTBweCI7CgoJc2VsZWN0X2VsZW0ub25jaGFuZ2UgPSAoKSA9PiB7CgkJc19pbnQyKGlkX2l0ZW0sIG1pbiwgbWF4KTsKCQlmdW5jMihzZWxlY3RfZWxlbSk7Cgl9OwoKCWlmIChzdHlsZXopIHsKCQlPYmplY3QuYXNzaWduKHNlbGVjdF9lbGVtLnN0eWxlLCBzdHlsZXopOwoKCQlpZiAoc3R5bGV6LnRleHRfZGl2KSB7CgkJCU9iamVjdC5hc3NpZ24oc2VsZWN0X2VsZW0uc3R5bGUsIHN0eWxlei50ZXh0X2Rpdik7CgkJfQoJfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCWlmICh0ZXh0ICE9ICIiKSB7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRfZGl2KTsKCX0KCWNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3RfZWxlbSk7CgoJY29uc3QgaV90b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaSIpOwoJaWYgKHRvb2x0aXAgIT0gIiIpIHsKCQlpX3Rvb2x0aXAuY2xhc3NOYW1lID0gImZhIGZhLXF1ZXN0aW9uLWNpcmNsZSBmYS0yIjsKCQlpX3Rvb2x0aXAuc2V0QXR0cmlidXRlKCJhcmlhLWhpZGRlbiIsICJ0cnVlIik7CgkJaV90b29sdGlwLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lIjsKCQlpX3Rvb2x0aXAuc3R5bGUucG9zaXRpb24gPSAicmVsYXRpdmUiOwoJCWlfdG9vbHRpcC5zdHlsZS5tYXJnaW5MZWZ0ID0gIjhweCIKCQlpX3Rvb2x0aXAuc3R5bGUuZm9udFdlaWdodCA9ICI5MDAiOwoJCWlfdG9vbHRpcC5zdHlsZS5mb250U2l6ZSA9ICIxNXB4IjsKCQlpX3Rvb2x0aXAuc3R5bGUub3BhY2l0eSA9ICIwLjUiOwoKCQlpX3Rvb2x0aXAuc2V0QXR0cmlidXRlKCJkYXRhLXR0aXAiLCB0b29sdGlwKTsKCQljb250YWluZXIuYXBwZW5kQ2hpbGQoaV90b29sdGlwKTsKCX0KCgl1X2ludDIucHVzaChpZF9pdGVtKTsKfQoKZnVuY3Rpb24gY19zX2ludChpZF93aGVyZSwgaWRfaXRlbSwgaWRfdGV4dCwgbWluLCBtYXgsIHN0ZXAsIHZhbHVlLCB0b29sdGlwID0gIiIsIHN0eWxleiA9IHt9KSB7CglpZiAoaWRfaXRlbSA9PSAicm5kIikKCQlpZF9pdGVtID0gZ1JuZElkKCk7CgoJaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZF93aGVyZSkpIHsgY29uc29sZS5sb2coaWRfd2hlcmUsICJkb2VzbnQgZXhpc3QiKTsgcmV0dXJuOyB9CglpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRfaXRlbSkpIHsgY29uc29sZS5sb2coaWRfaXRlbSwgImFscmVhZHkgZXhpc3RzIik7IHJldHVybjsgfQoKCWNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX3doZXJlKTsKCgljb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCWRpdi5jbGFzc0xpc3QuYWRkKCdsZW5ndGgnLCAncl9zbGlkZXJfYmcnKTsKCWRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWluJywgbWluKTsKCWRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWF4JywgbWF4KTsKCWRpdi5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1mbGV4IjsKCWlmIChzdHlsZXogJiYgc3R5bGV6LmJneikgewoJCU9iamVjdC5hc3NpZ24oZGl2LnN0eWxlLCBzdHlsZXouYmd6KTsKCX0KCgljb25zdCB0aXRsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJdGl0bGVEaXYuY2xhc3NMaXN0LmFkZCgnbF90aXRsZScsICdmX3RpdGxlJyk7Cgl0aXRsZURpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGVuZ3RoJywgdmFsdWUpOwoJdGl0bGVEaXYudGV4dENvbnRlbnQgPSBpZF90ZXh0ICsgIjogIjsKCWlmIChzdHlsZXogJiYgc3R5bGV6LnRpdGxleikgewoJCU9iamVjdC5hc3NpZ24odGl0bGVEaXYuc3R5bGUsIHN0eWxlei50aXRsZXopOwoJfQoKCWNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKCgljb25zdCBtaW51c0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwoJbWludXNCdG4uY2xhc3NOYW1lID0gImNvbnRyb2xzLW51bWJlciI7CgltaW51c0J0bi5zdHlsZS5kaXNwbGF5ID0gImlubGluZSI7CgltaW51c0J0bi5zdHlsZS5tYXJnaW5MZWZ0ID0gIjhweCI7CgltaW51c0J0bi5zdHlsZS5tYXJnaW5SaWdodCA9ICI4cHgiOwoJbWludXNCdG4uaW5uZXJIVE1MID0gKCImIzg3MjI7IikudHJpbSgpOwoJbWludXNCdG4ub25jbGljayA9ICgpID0+IHsKCQlzdW1yZXN0X2J1dHRvbnMoaWRfaXRlbSwgMCwgbWluLCBtYXgpOwoJCXNfaW50MihpZF9pdGVtLCBtaW4sIG1heCk7CgkJYXBwbHlGaWxsKGlucHV0KTsKCX07CgoJY29uc3QgcGx1c0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwoJcGx1c0J0bi5jbGFzc05hbWUgPSAiY29udHJvbHMtbnVtYmVyIjsKCXBsdXNCdG4uc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUiOwoJcGx1c0J0bi5zdHlsZS5tYXJnaW5MZWZ0ID0gIjhweCI7CglwbHVzQnRuLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjhweCI7CglwbHVzQnRuLmlubmVySFRNTCA9ICgiJiM0MzsiKS50cmltKCk7CglwbHVzQnRuLm9uY2xpY2sgPSAoKSA9PiB7CgkJc3VtcmVzdF9idXR0b25zKGlkX2l0ZW0sIDEsIG1pbiwgbWF4KTsKCQlzX2ludDIoaWRfaXRlbSwgbWluLCBtYXgpOwoJCWFwcGx5RmlsbChpbnB1dCk7Cgl9OwoKCWlucHV0LmNsYXNzTGlzdC5hZGQoJ3NsaWRlcicpOwoJaW5wdXQuc2V0QXR0cmlidXRlKCJpZCIsIGlkX2l0ZW0pOwoJaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3JhbmdlJyk7CglpbnB1dC5zZXRBdHRyaWJ1dGUoJ21pbicsIG1pbik7CglpbnB1dC5zZXRBdHRyaWJ1dGUoJ21heCcsIG1heCk7CglpbnB1dC5zZXRBdHRyaWJ1dGUoJ3N0ZXAnLCBzdGVwKTsKCWlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7CglpbnB1dC5vbmNoYW5nZSA9ICgpID0+IHsKCQlzX2ludDIoaWRfaXRlbSwgbWluLCBtYXgpOwoJCWFwcGx5RmlsbChpbnB1dCk7Cgl9OwoKCWRpdi5hcHBlbmRDaGlsZCh0aXRsZURpdik7CglkaXYuYXBwZW5kQ2hpbGQobWludXNCdG4pOwoJZGl2LmFwcGVuZENoaWxkKGlucHV0KTsKCWRpdi5hcHBlbmRDaGlsZChwbHVzQnRuKTsKCgljb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KTsKCgljb25zdCBpX3Rvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpIik7CglpZiAodG9vbHRpcCAhPSAiIikgewoJCWlfdG9vbHRpcC5jbGFzc05hbWUgPSAiZmEgZmEtcXVlc3Rpb24tY2lyY2xlIGZhLTIiOwoJCWlfdG9vbHRpcC5zZXRBdHRyaWJ1dGUoImFyaWEtaGlkZGVuIiwgInRydWUiKTsKCQlpX3Rvb2x0aXAuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUiOwoJCWlfdG9vbHRpcC5zdHlsZS5wb3NpdGlvbiA9ICJyZWxhdGl2ZSI7CgkJaV90b29sdGlwLnN0eWxlLm1hcmdpbkxlZnQgPSAiOHB4IgoJCWlfdG9vbHRpcC5zdHlsZS5mb250V2VpZ2h0ID0gIjkwMCI7CgkJaV90b29sdGlwLnN0eWxlLmZvbnRTaXplID0gIjE1cHgiOwoJCWlfdG9vbHRpcC5zdHlsZS5vcGFjaXR5ID0gIjAuNSI7CgoJCWlmIChzdHlsZXogJiYgc3R5bGV6LnR0aXBzKSB7CgkJCU9iamVjdC5hc3NpZ24oaV90b29sdGlwLnN0eWxlLCBzdHlsZXoudHRpcHMpOwoJCX0KCgkJaV90b29sdGlwLnNldEF0dHJpYnV0ZSgiZGF0YS10dGlwIiwgdG9vbHRpcCk7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKGlfdG9vbHRpcCk7Cgl9CgoJdV9pbnQucHVzaChpZF9pdGVtKTsKfQoKY29uc3Qgc2xpZGVyUHJvcHMgPSB7CgliYWNrZ3JvdW5kOiAicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIxNCkiLAp9OwoKZnVuY3Rpb24gdV9zbGlkZXJzKCkgewoJY29uc3Qgc2xpZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5yX3NsaWRlcl9iZyIpOwoKCXNsaWRlcnMuZm9yRWFjaCgoc2xpZGVyKSA9PiB7CgkJY29uc3Qgc2xpZGVySW5wdXQgPSBzbGlkZXIucXVlcnlTZWxlY3RvcigiLnNsaWRlciIpOwoJCWNvbnN0IHNsaWRlclZhbHVlID0gc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoIi5sX3RpdGxlIik7CgoJCXNsaWRlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoImlucHV0IiwgKGV2ZW50KSA9PiB7CgkJCXNsaWRlclZhbHVlLnNldEF0dHJpYnV0ZSgiZGF0YS1sZW5ndGgiLCBldmVudC50YXJnZXQudmFsdWUpOwoJCQlhcHBseUZpbGwoZXZlbnQudGFyZ2V0KTsKCQl9KTsKCgkJYXBwbHlGaWxsKHNsaWRlcklucHV0KTsKCX0pOwoKCWNvbnN0IGZfc2xpZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5mX3NsaWRlcl9iZyIpOwoKCWZfc2xpZGVycy5mb3JFYWNoKGFzeW5jIChzbGlkZXIpID0+IHsKCQljb25zdCBzbGlkZXJJbnB1dCA9IHNsaWRlci5xdWVyeVNlbGVjdG9yKCIubnVtYmVyc2xpZGVyIik7CgoJCWxldCBzdGVwdmFsX2Nlcm9zID0gKFN0cmluZyhzbGlkZXJJbnB1dC5zdGVwKS5zcGxpdCgiLiIpWzFdIHx8ICIiKTsKCgkJYXBwbHlGaWxsKHNsaWRlcklucHV0LCB0cnVlLCBzdGVwdmFsX2Nlcm9zLmxlbmd0aCwgc2xpZGVySW5wdXQudmFsdWUpOwoJfSk7Cn0KCmZ1bmN0aW9uIGFwcGx5RmlsbChzbGlkZXIsIGlzX2ZsdCA9IGZhbHNlLCBmbHRwYXJzZSA9IDEsIHZhbHVlKSB7CglpZiAoaXNfZmx0KSB7CgkJc2xpZGVyLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcigiLmxfdGl0bGUiKS5zZXRBdHRyaWJ1dGUoImRhdGEtbGVuZ3RoIiwgcGFyc2VGbG9hdCh2YWx1ZSkudG9GaXhlZChmbHRwYXJzZSkpOwoJCXNsaWRlci5zdHlsZS5iYWNrZ3JvdW5kID0gc2xpZGVyUHJvcHMuYmFja2dyb3VuZDsKCQlzbGlkZXIuc3R5bGUuY29sb3IgPSAndmFyKC0tYy10ZXh0KSc7CgkJc2xpZGVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICI1cHgiOwoJCXNsaWRlci5zdHlsZS5ib3JkZXIgPSAiMXB4IHNvbGlkIHZhcigtLWMtY29udG9ybm9zKSI7CgkJcmV0dXJuOwoJfQoKCWNvbnN0IHBlcmNlbnRhZ2UgPSAoKDEwMCAqIChzbGlkZXIudmFsdWUgLSBzbGlkZXIubWluKSkgLyAoc2xpZGVyLm1heCAtIHNsaWRlci5taW4pKS50b0ZpeGVkKDEpOwoJY29uc3QgYmcgPSBgbGluZWFyLWdyYWRpZW50KDkwZGVnLCB2YXIoLS1jLXByaW1hcnkpIDAlLCB2YXIoLS1jLXNlY29uZGFyeSkgJHtwZXJjZW50YWdlfSUsICR7c2xpZGVyUHJvcHMuYmFja2dyb3VuZH0gJHtwZXJjZW50YWdlfSUsICR7c2xpZGVyUHJvcHMuYmFja2dyb3VuZH0gMTAwJSlgOwoJc2xpZGVyLnN0eWxlLmJhY2tncm91bmQgPSBiZzsKCXNsaWRlci5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoIi5sX3RpdGxlIikuc2V0QXR0cmlidXRlKCJkYXRhLWxlbmd0aCIsIHNsaWRlci52YWx1ZSk7Cn0KCmZ1bmN0aW9uIHN1bXJlc3RfYnV0dG9ucyhpdGVtX2lkLCBzdW0sIG1pbiwgbWF4LCBpc19mbHQgPSAwLCBmbHRwYXJzZSA9IDEpIHsKCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKSA9PSB1bmRlZmluZWQpIHsKCQljb25zb2xlLmxvZyhpdGVtX2lkLCAiZG9lc250IGV4aXN0Iik7CgkJcmV0dXJuOwoJfQoKCWlmIChpc19mbHQpIHsKCQlpZiAoc3VtKSB7CgkJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA+IG1heCkKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlID0gcGFyc2VGbG9hdChtYXgpOwoJCQllbHNlCgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA9IChwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlKSArIHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbV9pZCkuc3RlcCkpLnRvRml4ZWQoZmx0cGFyc2UpOwoJCX0gZWxzZSB7CgkJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA8IG1pbikKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlID0gcGFyc2VGbG9hdChtYXgpOwoJCQllbHNlCgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA9IChwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlKSAtIHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbV9pZCkuc3RlcCkpLnRvRml4ZWQoZmx0cGFyc2UpOwoJCX0KCX0KCWVsc2UgewoJCWlmIChzdW0pIHsKCQkJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlID4gbWF4KQoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbV9pZCkudmFsdWUgPSBwYXJzZUludChtYXgpOwoJCQllbHNlCgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA9IHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbV9pZCkudmFsdWUpICsgcGFyc2VGbG9hdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS5zdGVwKTsKCQl9IGVsc2UgewoJCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbV9pZCkudmFsdWUgPCBtaW4pCgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSA9IHBhcnNlSW50KG1heCk7CgkJCWVsc2UKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnZhbHVlID0gcGFyc2VGbG9hdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtX2lkKS52YWx1ZSkgLSBwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW1faWQpLnN0ZXApOwoJCX0KCX0KfQoKd2luZG93Lm1vYmlsZUNoZWNrID0gKCkgPT4gewoJbGV0IGNoZWNrID0gZmFsc2U7CgkoKGEpID0+IHsgaWYgKC8oYW5kcm9pZHxiYlxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QoYSkgfHwgLzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1wtKG58dSl8YzU1XC98Y2FwaXxjY3dhfGNkbVwtfGNlbGx8Y2h0bXxjbGRjfGNtZFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXC01fGdcLW1vfGdvKFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFwtKG18cHx0KXxoZWlcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXC1jfGh0KGMoXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XC18XC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XC8pfGtsb258a3B0IHxrd2NcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XC8oa3xsfHUpfDUwfDU0fFwtW2Etd10pfGxpYnd8bHlueHxtMVwtd3xtM2dhfG01MFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XC1nfHFhXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFwtWzItN118aVwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXC18b298cFwtKXxzZGtcL3xzZShjKFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFwtfHNoYXJ8c2llKFwtfG0pfHNrXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcLXx2XC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcLXx0ZGdcLXx0ZWwoaXxtKXx0aW1cLXx0XC1tb3x0byhwbHxzaCl8dHMoNzB8bVwtfG0zfG01KXx0eFwtOXx1cChcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcLXx5b3VyfHpldG98enRlXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgY2hlY2sgPSB0cnVlOyB9KShuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKTsKCXJldHVybiBjaGVjazsKfTsKCndpbmRvdy5zdGVhbUNoZWNrID0gKCkgPT4gewoJbGV0IHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKCWxldCBpc1N0ZWFtQnJvd3NlciA9IHVzZXJBZ2VudC5pbmRleE9mKCJzdGVhbSIpID4gLTE7CglyZXR1cm4gaXNTdGVhbUJyb3dzZXI7Cn07CgppZiAoIXdpbmRvdy5tb2JpbGVDaGVjaygpKSB7Cglkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicXJjb2RlX3RleHQiKS5pbm5lckhUTUwgPSAic2NhbiBvbiBtb2JpbGUgb3IgZW50ZXI6ICIgKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKyAiIG9uIHlvdXIgbW9iaWxlIGJyb3dzZXIiOwoJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInFyaW1hZ2UiKS5zcmMgPSAiaHR0cHM6Ly9jaGFydC5nb29nbGVhcGlzLmNvbS9jaGFydD9jaHQ9cXImY2hsPSIgKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKyAiJmNocz0yNTB4MjUwJmNobGQ9THwwIjsKCgl3aW5kb3cub25sb2FkID0gKCkgPT4gewoJCWlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMDApIHsKCQkJdF9wYW5lbCgnbGVmdF9wYW5lbCcpOwoJCQl0X3BhbmVsKCk7CgkJfQoJCWVsc2UgewoJCQlpZiAod2luZG93LnN0ZWFtQ2hlY2soKSkgewoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJpZ2h0X3BhbmVsIikuc3R5bGUub3BhY2l0eSA9IDA7CgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmlnaHRfcGFuZWwiKS5zdHlsZS53aWR0aCA9ICIwcHgiOwoKCQkJCXNldFRpbWVvdXQoYXN5bmMgKCkgPT4gewoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyaWdodF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCQl9LCAyNTApOwoKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsZWZ0X3BhbmVsIikuc3R5bGUub3BhY2l0eSA9IDA7CgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibGVmdF9wYW5lbCIpLnN0eWxlLndpZHRoID0gIjBweCI7CgoJCQkJc2V0VGltZW91dChhc3luYyAoKSA9PiB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxlZnRfcGFuZWwiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJfSwgMjUwKTsKCgkJCQlub3RpZnkoInBhbmVscyBkaXNhYmxlZCBvbiBzdGVhbS4iKTsKCQkJfSBlbHNlIHsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyaWdodF9wYW5lbCIpLnN0eWxlLm9wYWNpdHkgPSAxOwoJCQkJc2V0VGltZW91dChhc3luYyAoKSA9PiB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJpZ2h0X3BhbmVsIikuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CgkJCQl9LCAyNTApOwoKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsZWZ0X3BhbmVsIikuc3R5bGUub3BhY2l0eSA9IDE7CgkJCQlzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibGVmdF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJfSwgMjUwKTsKCQkJfQoJCX0KCX07Cn0KZWxzZSB7Cglkb2N1bWVudC5ib2R5LnN0eWxlLnpvb20gPSAiNzUlIjsKCXRfcGFuZWwoJ2xlZnRfcGFuZWwnKTsKCXRfcGFuZWwoKTsKCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJxcmNvZGVfdGV4dCIpLmlubmVySFRNTCA9ICJvbmx5IG9uIHBjIi50cmltKCk7Cglkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicXJpbWFnZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7Cn0KCmZ1bmN0aW9uIHN0cmluZzJib29sKHN0cmluZykgewoJc3dpdGNoIChzdHJpbmcudG9Mb3dlckNhc2UoKS50cmltKCkpIHsKCQljYXNlICJ0cnVlIjoKCQljYXNlICJ5ZXMiOgoJCWNhc2UgIjEiOgoJCQlyZXR1cm4gdHJ1ZTsKCQljYXNlICJmYWxzZSI6CgkJY2FzZSAibm8iOgoJCWNhc2UgIjAiOgoJCWNhc2UgbnVsbDoKCQkJcmV0dXJuIGZhbHNlOwoJCWRlZmF1bHQ6CgkJCXJldHVybiBCb29sZWFuKHN0cmluZyk7Cgl9Cn0KCmZ1bmN0aW9uIGdfYm9vbChtb2R1bGUpIHsKCSQuZ2V0KCIvZ19ib29sP2ZlYXR1cmU9IiArIG1vZHVsZSwgKHJUeHQpID0+IHsKCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKSA9PSB1bmRlZmluZWQpIHsKCQkJY29uc29sZS5sb2cobW9kdWxlLCAiZG9lc250IGV4aXN0Iik7CgkJCXJldHVybjsKCQl9CgoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkuY2hlY2tlZCA9IHN0cmluZzJib29sKHJUeHQpOwoKCQkvKmlmICghdV9hbF9ib29sLmluY2x1ZGVzKG1vZHVsZSkpIHsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgiY2hhbmdlIikpOwoJCQl1X2FsX2Jvb2wucHVzaChtb2R1bGUpOwoJCX0qLwoJfSk7Cn0KCmZ1bmN0aW9uIGdfaW50KG1vZHVsZSwgcmV0dXJuZWQgPSB0cnVlKSB7CgkkLmdldCgiL2dfaW50P2ZlYXR1cmU9IiArIG1vZHVsZSwgKHJUeHQpID0+IHsKCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKSA9PSB1bmRlZmluZWQpIHsKCQkJY29uc29sZS5sb2cobW9kdWxlLCAiZG9lc250IGV4aXN0Iik7CgkJCXJldHVybjsKCQl9CgoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkudmFsdWUgPSByVHh0OwoKCQlpZiAobW9kdWxlLmluY2x1ZGVzKCJ0aGVtZV9zZWxlY3QiKSkgewoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJjaGFuZ2UiKSk7CgkJfQoKCQlpZiAocmV0dXJuZWQpIHsKCQkJLyppZiAoIXVfYWxfaW50LmluY2x1ZGVzKG1vZHVsZSkpIHsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoImlucHV0IikpOwoJCQkJdV9hbF9pbnQucHVzaChtb2R1bGUpOwoJCQl9Ki8KCgkJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUgKyAieiIpICE9IHVuZGVmaW5lZCkKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSArICJ6IikuaW5uZXJIVE1MID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKS52YWx1ZTsKCQl9Cgl9KTsKfQoKZnVuY3Rpb24gZ19mbG9hdChtb2R1bGUpIHsKCSQuZ2V0KCIvZ19mbG9hdD9mZWF0dXJlPSIgKyBtb2R1bGUsIChyVHh0KSA9PiB7CgkJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkgPT0gdW5kZWZpbmVkKSB7CgkJCWNvbnNvbGUubG9nKG1vZHVsZSwgImRvZXNudCBleGlzdCIpOwoJCQlyZXR1cm47CgkJfQoKCQl2YXIgc3RlcHZhbF9jZXJvczIgPSAoU3RyaW5nKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkuc3RlcCkuc3BsaXQoIi4iKVsxXSB8fCAiIik7CgoJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSkudmFsdWUgPSBwYXJzZUZsb2F0KHJUeHQpLnRvRml4ZWQoc3RlcHZhbF9jZXJvczIubGVuZ3RoKTsKCgkJLyppZiAoIXVfYWxfZmxvYXQuaW5jbHVkZXMobW9kdWxlKSkgewoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJpbnB1dCIpKTsKCQkJdV9hbF9mbG9hdC5wdXNoKG1vZHVsZSk7CgkJfSovCgoJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUgKyAieiIpICE9IHVuZGVmaW5lZCkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlICsgInoiKS5pbm5lckhUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUpLnZhbHVlOwoJfSk7Cn0KCmZ1bmN0aW9uIHNfYm9vbChtb2R1bGUpIHsKCWxldCBtb2R1bGV6ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKTsKCWlmIChtb2R1bGV6ID09IHVuZGVmaW5lZCkgewoJCWNvbnNvbGUubG9nKG1vZHVsZSwgImRvZXNudCBleGlzdCIpCgkJcmV0dXJuOwoJfQoJdmFyIHZhbHVlID0gbW9kdWxlei5jaGVja2VkOwoKCSQuZ2V0KCIvc19ib29sP2ZlYXR1cmU9IiArIG1vZHVsZSArICImdmFsPSIgKyB2YWx1ZSwgKHJUeHQpID0+IHsgfSk7Cn0KCmZ1bmN0aW9uIHNfaW50Mihtb2R1bGUsIG1pbiA9IDAsIG1heCA9IDApIHsKCWxldCBtb2R1bGV6ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlKTsKCWlmIChtb2R1bGV6ID09IHVuZGVmaW5lZCkgewoJCWNvbnNvbGUubG9nKG1vZHVsZSArICIgbm90IGZvdW5kIik7CgkJcmV0dXJuOwoJfQoKCXZhciB2YWx1ZSA9IG1vZHVsZXoudmFsdWU7CgoJaWYgKG1pbiA9PSAwICYmIG1heCA9PSAwKSB7CgkJJC5nZXQoIi9zX2ludD9mZWF0dXJlPSIgKyBtb2R1bGUgKyAiJnZhbD0iICsgdmFsdWUsIChyVHh0KSA9PiB7CgkJCXZhciBlbGVtZW50RXhpc3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlICsgInoiKTsKCQkJaWYgKGVsZW1lbnRFeGlzdHMgIT0gdW5kZWZpbmVkIHx8IGVsZW1lbnRFeGlzdHMgIT0gbnVsbCkKCQkJCWVsZW1lbnRFeGlzdHMuaW5uZXJIVE1MID0gclR4dDsKCQl9KTsKCX0gZWxzZSB7CgkJaWYgKHBhcnNlSW50KHZhbHVlKSA+PSBwYXJzZUludChtaW4pICYmIHBhcnNlSW50KHZhbHVlKSA8PSBwYXJzZUludChtYXgpKSB7CgkJCSQuZ2V0KCIvc19pbnQ/ZmVhdHVyZT0iICsgbW9kdWxlICsgIiZ2YWw9IiArIHZhbHVlLCAoclR4dCkgPT4gewoJCQkJdmFyIGVsZW1lbnRFeGlzdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2R1bGUgKyAieiIpOwoJCQkJaWYgKGVsZW1lbnRFeGlzdHMgIT0gdW5kZWZpbmVkIHx8IGVsZW1lbnRFeGlzdHMgIT0gbnVsbCkKCQkJCQllbGVtZW50RXhpc3RzLmlubmVySFRNTCA9IHJUeHQ7CgkJCX0pOwoJCX0KCQllbHNlIHsKCQkJY29uc29sZS5sb2coIm1pbm1heCBvdmVycGFzc2VkIHwgIiwgdmFsdWUsIG1pbiwgbWF4KTsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIHNfZmxvYXQobW9kdWxlKSB7CglsZXQgbW9kdWxleiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSk7CglpZiAobW9kdWxleiA9PSB1bmRlZmluZWQpIHsKCQljb25zb2xlLmxvZyhtb2R1bGUsICJkb2VzbnQgZXhpc3QiKQoJCXJldHVybjsKCX0KCgl2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KG1vZHVsZXoudmFsdWUpOwoJdmFyIG1pbiA9IHBhcnNlRmxvYXQobW9kdWxlei5taW4pOwoJdmFyIG1heCA9IHBhcnNlRmxvYXQobW9kdWxlei5tYXgpOwoKCWlmICh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4KSB7CgkJJC5nZXQoIi9zX2Zsb2F0P2ZlYXR1cmU9IiArIG1vZHVsZSArICImdmFsPSIgKyB2YWx1ZSwgKHJUeHQpID0+IHsKCQkJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1vZHVsZSArICJ6IikgIT0gdW5kZWZpbmVkKQoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kdWxlICsgInoiKS5pbm5lckhUTUwgPSByVHh0OwoJCX0pOwoJfQp9CgpmdW5jdGlvbiBzX2luZm8obW9kdWxlLCB2YWx1ZSwgZnVuYzIgPSAoKSA9PiB7IH0pIHsKCSQuZ2V0KCIvc19pbmZvP2ZlYXR1cmU9IiArIG1vZHVsZSArICImdmFsPSIgKyB2YWx1ZSwgKHJUeHQpID0+IHsKCQlmdW5jMigpOwoJfSk7Cn0KCmZ1bmN0aW9uIGdSbmRJZChsZW5ndGggPSA4KSB7Cgl2YXIgaWQgPSAnJzsKCXZhciBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JzsKCXZhciBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7CgoJaWQgPSAnJzsKCglmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkJaWQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpOwoJfQoKCXJldHVybiBpZDsKfQoKZnVuY3Rpb24gc19idG4obW9kdWxlLCB2YWx1ZSA9ICIiKSB7CglyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewoJCWlmICh2YWx1ZSA9PSAiIikgewoJCQkkLmdldCgiL3RvZ2dsZT9mZWF0dXJlPSIgKyBtb2R1bGUsIChyVHh0KSA9PiB7CgkJCQlyZXNvbHZlKHJUeHQpOwoJCQl9KS5mYWlsKChlcnJvcikgPT4gewoJCQkJcmVqZWN0KGVycm9yKTsKCQkJfSk7CgkJfSBlbHNlIHsKCQkJJC5nZXQoIi90b2dnbGU/ZmVhdHVyZT0iICsgbW9kdWxlICsgIiZ2YWw9IiArIHZhbHVlLCAoclR4dCkgPT4gewoJCQkJcmVzb2x2ZShyVHh0KTsKCQkJfSkuZmFpbCgoZXJyb3IpID0+IHsKCQkJCXJlamVjdChlcnJvcik7CgkJCX0pOwoJCX0KCX0pOwp9CgpmdW5jdGlvbiBjX2V4aXQoKSB7CglzX2J0bigiZGVhZCIpOwoJc2V0VGltZW91dCgoKSA9PiB7CgkJd2luZG93Lm9wZW4oIiIsICJfc2VsZiIsICIiKTsKCQl3aW5kb3cuY2xvc2UoKTsKCQloaXN0b3J5LmdvKC0xKTsKCQluYXZpZ2F0b3IuYXBwLmJhY2tIaXN0b3J5KCk7CgkJd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwoJfSwgNTAwMCk7Cn0KCmZ1bmN0aW9uIGZfY29tYm8oaWRfaXRlbSwgaWRfc2VydmVyKSB7CgkkLmdldCgiL2dfaW5mbz9pbmZvPSIgKyBpZF9zZXJ2ZXIsIChyVHh0KSA9PiB7CgkJdmFyIHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkX2l0ZW0pOwoKCQlpZiAoc2VsZWN0ID09IHVuZGVmaW5lZCkgewoJCQljb25zb2xlLmxvZyhpZF9pdGVtLCAiZG9lc250IGV4aXN0Iik7CgkJCXJldHVybjsKCQl9CgoJCXZhciByZXNwb25zZSA9IHdpbmRvdy5hdG9iKHJUeHQpOwoKCQlpZiAocmVzcG9uc2UgIT0gbnVsbCkgewoJCQlyZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2UpOwoJCQlpZiAocmVzcG9uc2UgIT0gbnVsbCkgewoJCQkJc2VsZWN0LmlubmVySFRNTCA9ICgiIikudHJpbSgpOwoKCQkJCWZvciAoY29uc3Qga2V5IGluIHJlc3BvbnNlKSB7CgkJCQkJaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3BvbnNlLCBrZXkpKSB7CgkJCQkJCWNvbnN0IGVsZW1lbnQgPSByZXNwb25zZVtrZXldOwoJCQkJCQl2YXIgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CgkJCQkJCW9wdC52YWx1ZSA9IGtleTsKCQkJCQkJb3B0LmlkID0gaWRfaXRlbSArICJfIiArIGtleTsKCQkJCQkJb3B0LmlubmVySFRNTCA9IGVsZW1lbnRbImlkIl07CgkJCQkJCXNlbGVjdC5hcHBlbmRDaGlsZChvcHQpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0pOwp9Cgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgKCkgPT4gewoJaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAwMCkgewoJCXRfcGFuZWwoJ2xlZnRfcGFuZWwnLCAxKTsKCQl0X3BhbmVsKCdyaWdodF9wYW5lbCcsIDEpOwoJfQoJZWxzZSB7CgkJdF9wYW5lbCgnbGVmdF9wYW5lbCcsIDIpOwoJCXRfcGFuZWwoJ3JpZ2h0X3BhbmVsJywgMik7Cgl9Cn0pOwoKYXN5bmMgZnVuY3Rpb24gdF9wYW5lbChpZCA9ICJyaWdodF9wYW5lbCIsIHR5cGUgPSAwKSB7Cgljb25zdCBwX2VsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKCWlmICh0eXBlID09IDApIHsKCQlpZiAocF9lbG0uc3R5bGUuZGlzcGxheSAhPSAibm9uZSIpIHsKCQkJcF9lbG0uc3R5bGUud2lkdGggPSAiMHB4IjsKCQkJcF9lbG0uc3R5bGUuaGVpZ2h0ID0gIjBweCI7CgkJCXBfZWxtLnN0eWxlLm9wYWNpdHkgPSAiMCI7CgkJCXNldFRpbWVvdXQoYXN5bmMgKCkgPT4gewoJCQkJcF9lbG0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJfSwgMjUwKTsKCgkJCWlmICh3aW5kb3cubW9iaWxlQ2hlY2soKSB8fCAod2luZG93LmlubmVyV2lkdGggPCAxMDAwKSkgewoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNlbnRlcl9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJaWYgKChpZCkuaW5jbHVkZXMoInJpZ2h0IikpIHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibV90X3JpZ2h0X3BhbmVsIikuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtX3RfbGVmdF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCQl9CgkJCX0KCQl9CgkJZWxzZSB7CgkJCXBfZWxtLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQlhd2FpdCBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsgfSwgMjUwKTsKCgkJCXBfZWxtLnN0eWxlLndpZHRoID0gImF1dG8iOwoJCQlwX2VsbS5zdHlsZS5oZWlnaHQgPSAiYXV0byI7CgkJCXBfZWxtLnN0eWxlLm9wYWNpdHkgPSAiMSI7CgoJCQlpZiAod2luZG93Lm1vYmlsZUNoZWNrKCkgfHwgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAwMCkpIHsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjZW50ZXJfcGFuZWwiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJaWYgKChpZCkuaW5jbHVkZXMoInJpZ2h0IikpIHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibV90X3JpZ2h0X3BhbmVsIikuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibV90X2xlZnRfcGFuZWwiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJCX0KCQkJfQoKCQl9Cgl9CgllbHNlIHsKCQlpZiAocF9lbG0uc3R5bGUuZGlzcGxheSAhPSAibm9uZSIgJiYgdHlwZSA9PSAxKSB7CgkJCXBfZWxtLnN0eWxlLndpZHRoID0gIjBweCI7CgkJCXBfZWxtLnN0eWxlLmhlaWdodCA9ICIwcHgiOwoJCQlwX2VsbS5zdHlsZS5vcGFjaXR5ID0gIjAiOwoJCQlzZXRUaW1lb3V0KGFzeW5jICgpID0+IHsKCQkJCXBfZWxtLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCX0sIDI1MCk7CgoJCQlpZiAod2luZG93Lm1vYmlsZUNoZWNrKCkgfHwgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAwMCkpIHsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjZW50ZXJfcGFuZWwiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJCWlmICgoaWQpLmluY2x1ZGVzKCJyaWdodCIpKSB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1fdF9yaWdodF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibV90X2xlZnRfcGFuZWwiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJfQoJCQl9CgkJfQoJCWVsc2UgaWYgKHR5cGUgPT0gMiAmJiBwX2VsbS5zdHlsZS5kaXNwbGF5ID09ICJub25lIikgewoJCQlwX2VsbS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCQkJYXdhaXQgc2V0VGltZW91dChhc3luYyAoKSA9PiB7IH0sIDI1MCk7CgoJCQlwX2VsbS5zdHlsZS53aWR0aCA9ICJhdXRvIjsKCQkJcF9lbG0uc3R5bGUuaGVpZ2h0ID0gImF1dG8iOwoJCQlwX2VsbS5zdHlsZS5vcGFjaXR5ID0gIjEiOwoKCQkJaWYgKHdpbmRvdy5tb2JpbGVDaGVjaygpIHx8ICh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMDApKSB7CgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY2VudGVyX3BhbmVsIikuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCQkJCWlmICgoaWQpLmluY2x1ZGVzKCJyaWdodCIpKSB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1fdF9yaWdodF9wYW5lbCIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1fdF9sZWZ0X3BhbmVsIikuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CgkJCQl9CgkJCX0KCgkJfQoJfQp9Cgp2YXIgem5vdGlmaWNhdGlvbklkID0gMCwgbm90aWZpY2F0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI25vdGlmaWNhdGlvbi1jb250YWluZXIiKTsKZnVuY3Rpb24gbm90aWZ5KGEsIGIsIGQpIHsgYiA9IHZvaWQgMCA9PT0gYiA/IDI1MDAgOiBiOyBkID0gKyt6bm90aWZpY2F0aW9uSWQ7IHZhciBjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7IGMuY2xhc3NMaXN0LmFkZCgibm90aWZpY2F0aW9uIik7IGMuaW5uZXJIVE1MID0gKCI8cD4iICsgYSArICI8L3A+PGJ1dHRvbiBjbGFzcz0nY2xvc2UtYnV0dG9uJyBkYXRhLW5vdGlmaWNhdGlvbi1pZD0nIiArIGQgKyAiJz4mdGltZXM7PC9idXR0b24+IikudHJpbSgpOyBjLnN0eWxlLm1hcmdpbkxlZnQgPSAiYXV0byI7IGMuc3R5bGUud2lkdGggPSAiZml0LWNvbnRlbnQiOyBub3RpZmljYXRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoYyk7IHNldFRpbWVvdXQoKCkgPT4geyBjLnN0eWxlLm9wYWNpdHkgPSAiMCI7IHNldFRpbWVvdXQoKCkgPT4geyBjLnJlbW92ZSgpIH0sIDQ1MCkgfSwgYik7IChhID0gYy5wcmV2aW91c1NpYmxpbmcpICYmIGEuc3R5bGUgJiYgKGEuc3R5bGUubWFyZ2luVG9wID0gIjZweCIpIH0Kbm90aWZpY2F0aW9uQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKGEpID0+IHsgaWYgKGEudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygiY2xvc2UtYnV0dG9uIikpIHsgdmFyIGIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJbZGF0YS1ub3RpZmljYXRpb24taWQ9JyIgKyBhLnRhcmdldC5kYXRhc2V0Lm5vdGlmaWNhdGlvbklkICsgIiddIikucGFyZW50RWxlbWVudDsgYi5zdHlsZS5vcGFjaXR5ID0gIjAiOyBzZXRUaW1lb3V0KCgpID0+IHsgYi5yZW1vdmUoKSB9LCAyNTApOyAoYSA9IGIucHJldmlvdXNTaWJsaW5nKSAmJiBhLnN0eWxlICYmIChhLnN0eWxlLm1hcmdpblRvcCA9ICI2cHgiKSB9IH0pOwphc3luYyBmdW5jdGlvbiBzbGVlcChtcykgeyByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7IH0KCmZ1bmN0aW9uIG1vZGFsX29wZW4obWlkKSB7Cgl2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtaWQpOwoJaWYgKG1vZGFsKSB7CgkJcmV0dXJuIG1vZGFsLmhhc0F0dHJpYnV0ZSgnb3BlbicpOwoJfQoJcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBzX21vZGFsKG1pZCkgewoJdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWlkKTsKCWlmIChtb2RhbCkgewoJCXJldHVybiBtb2RhbC5zaG93TW9kYWwoKTsKCX0KCXJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gc2VhcmNoX3RhYmxlKGlkaSwgaWR0KSB7Cgl2YXIgaW5wdXQsIGZpbHRlciwgdGFibGUsIHRyLCB0ZCwgaSwgaiwgdHh0VmFsdWU7CglpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkaSk7CglmaWx0ZXIgPSBpbnB1dC52YWx1ZS50b1VwcGVyQ2FzZSgpOwoJdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZHQpOwoJdHIgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidHIiKTsKCglmb3IgKGkgPSAxOyBpIDwgdHIubGVuZ3RoOyBpKyspIHsKCQl0cltpXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKCQl0ZCA9IHRyW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0ZCIpOwoJCWZvciAoaiA9IDA7IGogPCB0ZC5sZW5ndGg7IGorKykgewoJCQlpZiAodGRbal0pIHsKCQkJCXR4dFZhbHVlID0gdGRbal0udGV4dENvbnRlbnQgfHwgdGRbal0uaW5uZXJUZXh0OwoJCQkJaWYgKHR4dFZhbHVlLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpID4gLTEpIHsKCQkJCQl0cltpXS5zdHlsZS5kaXNwbGF5ID0gIiI7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9Cgl9Cn0KCmZ1bmN0aW9uIHNvcnRfdGFibGUobiwgaWQpIHsKCXZhciB0YWJsZSwKCQlyb3dzLAoJCXN3aXRjaGluZywKCQlpLAoJCXgsCgkJeSwKCQlzaG91bGRTd2l0Y2gsCgkJZGlyLAoJCXN3aXRjaGNvdW50ID0gMDsKCXRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwoJc3dpdGNoaW5nID0gdHJ1ZTsKCWRpciA9ICJhc2MiOwoJd2hpbGUgKHN3aXRjaGluZykgewoJCXN3aXRjaGluZyA9IGZhbHNlOwoJCXJvd3MgPSB0YWJsZS5yb3dzOwoJCWZvciAoaSA9IDE7IGkgPCByb3dzLmxlbmd0aCAtIDE7IGkrKykgewoJCQlzaG91bGRTd2l0Y2ggPSBmYWxzZTsKCQkJeCA9IHJvd3NbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIlREIilbbl07CgkJCXkgPSByb3dzW2kgKyAxXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiVEQiKVtuXTsKCQkJaWYgKGRpciA9PSAiYXNjIikgewoJCQkJaWYgKHguaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCkgPiB5LmlubmVySFRNTC50b0xvd2VyQ2FzZSgpKSB7CgkJCQkJc2hvdWxkU3dpdGNoID0gdHJ1ZTsKCQkJCQlicmVhazsKCQkJCX0KCQkJfSBlbHNlIGlmIChkaXIgPT0gImRlc2MiKSB7CgkJCQlpZiAoeC5pbm5lckhUTUwudG9Mb3dlckNhc2UoKSA8IHkuaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCkpIHsKCQkJCQlzaG91bGRTd2l0Y2ggPSB0cnVlOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoJCWlmIChzaG91bGRTd2l0Y2gpIHsKCQkJcm93c1tpXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyb3dzW2kgKyAxXSwgcm93c1tpXSk7CgkJCXN3aXRjaGluZyA9IHRydWU7CgkJCXN3aXRjaGNvdW50Kys7CgkJfSBlbHNlIHsKCQkJaWYgKHN3aXRjaGNvdW50ID09IDAgJiYgZGlyID09ICJhc2MiKSB7CgkJCQlkaXIgPSAiZGVzYyI7CgkJCQlzd2l0Y2hpbmcgPSB0cnVlOwoJCQl9CgkJfQoJfQp9Cgphc3luYyBmdW5jdGlvbiBsaXZlX3NlcnZlcigpIHsKCWF3YWl0IHNsZWVwKDE1MDApOwoJcl9pbmZvKCk7Cglhd2FpdCBzbGVlcCgxNTAwKTsKCXVfc2xpZGVycygpOwoJYXdhaXQgc2xlZXAoMTAwKTsKCXBfc291bmQoInNuZDEiKTsKfQpsaXZlX3NlcnZlcigpOwoKY29uc29sZS5sb2coImJyZWFraW5nIGNvY29udXRzIik7Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw==";
eval(atob(A));